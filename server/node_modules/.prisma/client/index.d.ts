
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = {
  id: number
  Nombre: string
  Apellido: string
  NombreVendedor: string | null
  Telefono: string
  Email: string
  Identificacion: string
  Contrasenna: string
  Calificacion: Prisma.Decimal
  Deshabilitado: boolean
}

/**
 * Model Rol
 * 
 */
export type Rol = {
  id: number
  Descripcion: string
  Borrado: boolean
}

/**
 * Model RolOnUsuario
 * 
 */
export type RolOnUsuario = {
  RolId: number
  UsuarioId: number
}

/**
 * Model TipoPago
 * 
 */
export type TipoPago = {
  id: number
  Descripcion: string
  Borrado: boolean
}

/**
 * Model MetodoPago
 * 
 */
export type MetodoPago = {
  id: number
  UsuarioId: number
  TipoPagoId: number
  NumeroCuenta: string
  Expiracion: Date
  Titulo: string
  Borrado: boolean
}

/**
 * Model Direccion
 * 
 */
export type Direccion = {
  id: number
  UsuarioId: number
  Provincia: string
  Canton: string
  Distrito: string
  Detalle: string
  CodigoPostal: string
  Telefono: string
  Titulo: string
}

/**
 * Model Producto
 * 
 */
export type Producto = {
  id: number
  Nombre: string
  Descripcion: string
  Precio: Prisma.Decimal
  Cantidad: number
  CategoriaId: number
  EstadoId: number
  VendedorId: number
  Borrado: boolean
}

/**
 * Model Categoria
 * 
 */
export type Categoria = {
  id: number
  Descripcion: string
  Borrado: boolean
}

/**
 * Model EstadoProducto
 * 
 */
export type EstadoProducto = {
  id: number
  Descripcion: string
  Borrado: boolean
}

/**
 * Model FotoProducto
 * 
 */
export type FotoProducto = {
  id: number
  ProductoId: number
  Foto: string
  Borrado: boolean
}

/**
 * Model Mensaje
 * 
 */
export type Mensaje = {
  id: number
  ClienteId: number
  ProductoId: number
  Pregunta: string
  Respuesta: string | null
  Borrado: boolean
  Fecha: Date
}

/**
 * Model EstadoCompra
 * 
 */
export type EstadoCompra = {
  id: number
  Descripcion: string
  Borrado: boolean
}

/**
 * Model Compra
 * 
 */
export type Compra = {
  id: number
  ClienteId: number
  DireccionId: number
  MetodoPagoId: number
  Subtotal: Prisma.Decimal
  Total: Prisma.Decimal
  Fecha: Date
  Borrado: boolean
}

/**
 * Model CompraDetalle
 * 
 */
export type CompraDetalle = {
  id: number
  CompraId: number
  ProductoId: number
  Cantidad: number
  Subtotal: Prisma.Decimal
  EstadoCompraId: number
  Borrado: boolean
}

/**
 * Model Evaluacion
 * 
 */
export type Evaluacion = {
  id: number
  CompraId: number
  EvaluadorId: number
  EvaluadoId: number
  Calificacion: number
  Borrado: boolean
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<GlobalReject>;

  /**
   * `prisma.rol`: Exposes CRUD operations for the **Rol** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rols
    * const rols = await prisma.rol.findMany()
    * ```
    */
  get rol(): Prisma.RolDelegate<GlobalReject>;

  /**
   * `prisma.rolOnUsuario`: Exposes CRUD operations for the **RolOnUsuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RolOnUsuarios
    * const rolOnUsuarios = await prisma.rolOnUsuario.findMany()
    * ```
    */
  get rolOnUsuario(): Prisma.RolOnUsuarioDelegate<GlobalReject>;

  /**
   * `prisma.tipoPago`: Exposes CRUD operations for the **TipoPago** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TipoPagos
    * const tipoPagos = await prisma.tipoPago.findMany()
    * ```
    */
  get tipoPago(): Prisma.TipoPagoDelegate<GlobalReject>;

  /**
   * `prisma.metodoPago`: Exposes CRUD operations for the **MetodoPago** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MetodoPagos
    * const metodoPagos = await prisma.metodoPago.findMany()
    * ```
    */
  get metodoPago(): Prisma.MetodoPagoDelegate<GlobalReject>;

  /**
   * `prisma.direccion`: Exposes CRUD operations for the **Direccion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Direccions
    * const direccions = await prisma.direccion.findMany()
    * ```
    */
  get direccion(): Prisma.DireccionDelegate<GlobalReject>;

  /**
   * `prisma.producto`: Exposes CRUD operations for the **Producto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Productos
    * const productos = await prisma.producto.findMany()
    * ```
    */
  get producto(): Prisma.ProductoDelegate<GlobalReject>;

  /**
   * `prisma.categoria`: Exposes CRUD operations for the **Categoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categoria.findMany()
    * ```
    */
  get categoria(): Prisma.CategoriaDelegate<GlobalReject>;

  /**
   * `prisma.estadoProducto`: Exposes CRUD operations for the **EstadoProducto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EstadoProductos
    * const estadoProductos = await prisma.estadoProducto.findMany()
    * ```
    */
  get estadoProducto(): Prisma.EstadoProductoDelegate<GlobalReject>;

  /**
   * `prisma.fotoProducto`: Exposes CRUD operations for the **FotoProducto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FotoProductos
    * const fotoProductos = await prisma.fotoProducto.findMany()
    * ```
    */
  get fotoProducto(): Prisma.FotoProductoDelegate<GlobalReject>;

  /**
   * `prisma.mensaje`: Exposes CRUD operations for the **Mensaje** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mensajes
    * const mensajes = await prisma.mensaje.findMany()
    * ```
    */
  get mensaje(): Prisma.MensajeDelegate<GlobalReject>;

  /**
   * `prisma.estadoCompra`: Exposes CRUD operations for the **EstadoCompra** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EstadoCompras
    * const estadoCompras = await prisma.estadoCompra.findMany()
    * ```
    */
  get estadoCompra(): Prisma.EstadoCompraDelegate<GlobalReject>;

  /**
   * `prisma.compra`: Exposes CRUD operations for the **Compra** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compras
    * const compras = await prisma.compra.findMany()
    * ```
    */
  get compra(): Prisma.CompraDelegate<GlobalReject>;

  /**
   * `prisma.compraDetalle`: Exposes CRUD operations for the **CompraDetalle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompraDetalles
    * const compraDetalles = await prisma.compraDetalle.findMany()
    * ```
    */
  get compraDetalle(): Prisma.CompraDetalleDelegate<GlobalReject>;

  /**
   * `prisma.evaluacion`: Exposes CRUD operations for the **Evaluacion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Evaluacions
    * const evaluacions = await prisma.evaluacion.findMany()
    * ```
    */
  get evaluacion(): Prisma.EvaluacionDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.1
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Rol: 'Rol',
    RolOnUsuario: 'RolOnUsuario',
    TipoPago: 'TipoPago',
    MetodoPago: 'MetodoPago',
    Direccion: 'Direccion',
    Producto: 'Producto',
    Categoria: 'Categoria',
    EstadoProducto: 'EstadoProducto',
    FotoProducto: 'FotoProducto',
    Mensaje: 'Mensaje',
    EstadoCompra: 'EstadoCompra',
    Compra: 'Compra',
    CompraDetalle: 'CompraDetalle',
    Evaluacion: 'Evaluacion'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */


  export type UsuarioCountOutputType = {
    Roles: number
    MetodoPago: number
    Direccion: number
    Producto: number
    Mensaje: number
    Compra: number
    Evaluadores: number
    Evaluados: number
  }

  export type UsuarioCountOutputTypeSelect = {
    Roles?: boolean
    MetodoPago?: boolean
    Direccion?: boolean
    Producto?: boolean
    Mensaje?: boolean
    Compra?: boolean
    Evaluadores?: boolean
    Evaluados?: boolean
  }

  export type UsuarioCountOutputTypeGetPayload<S extends boolean | null | undefined | UsuarioCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UsuarioCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UsuarioCountOutputTypeArgs)
    ? UsuarioCountOutputType 
    : S extends { select: any } & (UsuarioCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UsuarioCountOutputType ? UsuarioCountOutputType[P] : never
  } 
      : UsuarioCountOutputType




  // Custom InputTypes

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect | null
  }



  /**
   * Count Type RolCountOutputType
   */


  export type RolCountOutputType = {
    Usuarios: number
  }

  export type RolCountOutputTypeSelect = {
    Usuarios?: boolean
  }

  export type RolCountOutputTypeGetPayload<S extends boolean | null | undefined | RolCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RolCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (RolCountOutputTypeArgs)
    ? RolCountOutputType 
    : S extends { select: any } & (RolCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof RolCountOutputType ? RolCountOutputType[P] : never
  } 
      : RolCountOutputType




  // Custom InputTypes

  /**
   * RolCountOutputType without action
   */
  export type RolCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RolCountOutputType
     */
    select?: RolCountOutputTypeSelect | null
  }



  /**
   * Count Type TipoPagoCountOutputType
   */


  export type TipoPagoCountOutputType = {
    MetodoPago: number
  }

  export type TipoPagoCountOutputTypeSelect = {
    MetodoPago?: boolean
  }

  export type TipoPagoCountOutputTypeGetPayload<S extends boolean | null | undefined | TipoPagoCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TipoPagoCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TipoPagoCountOutputTypeArgs)
    ? TipoPagoCountOutputType 
    : S extends { select: any } & (TipoPagoCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TipoPagoCountOutputType ? TipoPagoCountOutputType[P] : never
  } 
      : TipoPagoCountOutputType




  // Custom InputTypes

  /**
   * TipoPagoCountOutputType without action
   */
  export type TipoPagoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TipoPagoCountOutputType
     */
    select?: TipoPagoCountOutputTypeSelect | null
  }



  /**
   * Count Type MetodoPagoCountOutputType
   */


  export type MetodoPagoCountOutputType = {
    Compra: number
  }

  export type MetodoPagoCountOutputTypeSelect = {
    Compra?: boolean
  }

  export type MetodoPagoCountOutputTypeGetPayload<S extends boolean | null | undefined | MetodoPagoCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MetodoPagoCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (MetodoPagoCountOutputTypeArgs)
    ? MetodoPagoCountOutputType 
    : S extends { select: any } & (MetodoPagoCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof MetodoPagoCountOutputType ? MetodoPagoCountOutputType[P] : never
  } 
      : MetodoPagoCountOutputType




  // Custom InputTypes

  /**
   * MetodoPagoCountOutputType without action
   */
  export type MetodoPagoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the MetodoPagoCountOutputType
     */
    select?: MetodoPagoCountOutputTypeSelect | null
  }



  /**
   * Count Type DireccionCountOutputType
   */


  export type DireccionCountOutputType = {
    Compra: number
  }

  export type DireccionCountOutputTypeSelect = {
    Compra?: boolean
  }

  export type DireccionCountOutputTypeGetPayload<S extends boolean | null | undefined | DireccionCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DireccionCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (DireccionCountOutputTypeArgs)
    ? DireccionCountOutputType 
    : S extends { select: any } & (DireccionCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof DireccionCountOutputType ? DireccionCountOutputType[P] : never
  } 
      : DireccionCountOutputType




  // Custom InputTypes

  /**
   * DireccionCountOutputType without action
   */
  export type DireccionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DireccionCountOutputType
     */
    select?: DireccionCountOutputTypeSelect | null
  }



  /**
   * Count Type ProductoCountOutputType
   */


  export type ProductoCountOutputType = {
    FotoProducto: number
    Mensaje: number
    CompraDetalle: number
  }

  export type ProductoCountOutputTypeSelect = {
    FotoProducto?: boolean
    Mensaje?: boolean
    CompraDetalle?: boolean
  }

  export type ProductoCountOutputTypeGetPayload<S extends boolean | null | undefined | ProductoCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProductoCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProductoCountOutputTypeArgs)
    ? ProductoCountOutputType 
    : S extends { select: any } & (ProductoCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ProductoCountOutputType ? ProductoCountOutputType[P] : never
  } 
      : ProductoCountOutputType




  // Custom InputTypes

  /**
   * ProductoCountOutputType without action
   */
  export type ProductoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductoCountOutputType
     */
    select?: ProductoCountOutputTypeSelect | null
  }



  /**
   * Count Type CategoriaCountOutputType
   */


  export type CategoriaCountOutputType = {
    Producto: number
  }

  export type CategoriaCountOutputTypeSelect = {
    Producto?: boolean
  }

  export type CategoriaCountOutputTypeGetPayload<S extends boolean | null | undefined | CategoriaCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CategoriaCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CategoriaCountOutputTypeArgs)
    ? CategoriaCountOutputType 
    : S extends { select: any } & (CategoriaCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CategoriaCountOutputType ? CategoriaCountOutputType[P] : never
  } 
      : CategoriaCountOutputType




  // Custom InputTypes

  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoriaCountOutputType
     */
    select?: CategoriaCountOutputTypeSelect | null
  }



  /**
   * Count Type EstadoProductoCountOutputType
   */


  export type EstadoProductoCountOutputType = {
    Producto: number
  }

  export type EstadoProductoCountOutputTypeSelect = {
    Producto?: boolean
  }

  export type EstadoProductoCountOutputTypeGetPayload<S extends boolean | null | undefined | EstadoProductoCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? EstadoProductoCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (EstadoProductoCountOutputTypeArgs)
    ? EstadoProductoCountOutputType 
    : S extends { select: any } & (EstadoProductoCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof EstadoProductoCountOutputType ? EstadoProductoCountOutputType[P] : never
  } 
      : EstadoProductoCountOutputType




  // Custom InputTypes

  /**
   * EstadoProductoCountOutputType without action
   */
  export type EstadoProductoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EstadoProductoCountOutputType
     */
    select?: EstadoProductoCountOutputTypeSelect | null
  }



  /**
   * Count Type EstadoCompraCountOutputType
   */


  export type EstadoCompraCountOutputType = {
    CompraDetalle: number
  }

  export type EstadoCompraCountOutputTypeSelect = {
    CompraDetalle?: boolean
  }

  export type EstadoCompraCountOutputTypeGetPayload<S extends boolean | null | undefined | EstadoCompraCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? EstadoCompraCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (EstadoCompraCountOutputTypeArgs)
    ? EstadoCompraCountOutputType 
    : S extends { select: any } & (EstadoCompraCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof EstadoCompraCountOutputType ? EstadoCompraCountOutputType[P] : never
  } 
      : EstadoCompraCountOutputType




  // Custom InputTypes

  /**
   * EstadoCompraCountOutputType without action
   */
  export type EstadoCompraCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EstadoCompraCountOutputType
     */
    select?: EstadoCompraCountOutputTypeSelect | null
  }



  /**
   * Count Type CompraCountOutputType
   */


  export type CompraCountOutputType = {
    CompraDetalle: number
    Evaluacion: number
  }

  export type CompraCountOutputTypeSelect = {
    CompraDetalle?: boolean
    Evaluacion?: boolean
  }

  export type CompraCountOutputTypeGetPayload<S extends boolean | null | undefined | CompraCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CompraCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CompraCountOutputTypeArgs)
    ? CompraCountOutputType 
    : S extends { select: any } & (CompraCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CompraCountOutputType ? CompraCountOutputType[P] : never
  } 
      : CompraCountOutputType




  // Custom InputTypes

  /**
   * CompraCountOutputType without action
   */
  export type CompraCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CompraCountOutputType
     */
    select?: CompraCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Usuario
   */


  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
    Calificacion: Decimal | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
    Calificacion: Decimal | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    Nombre: string | null
    Apellido: string | null
    NombreVendedor: string | null
    Telefono: string | null
    Email: string | null
    Identificacion: string | null
    Contrasenna: string | null
    Calificacion: Decimal | null
    Deshabilitado: boolean | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    Nombre: string | null
    Apellido: string | null
    NombreVendedor: string | null
    Telefono: string | null
    Email: string | null
    Identificacion: string | null
    Contrasenna: string | null
    Calificacion: Decimal | null
    Deshabilitado: boolean | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    Nombre: number
    Apellido: number
    NombreVendedor: number
    Telefono: number
    Email: number
    Identificacion: number
    Contrasenna: number
    Calificacion: number
    Deshabilitado: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
    Calificacion?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
    Calificacion?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    Nombre?: true
    Apellido?: true
    NombreVendedor?: true
    Telefono?: true
    Email?: true
    Identificacion?: true
    Contrasenna?: true
    Calificacion?: true
    Deshabilitado?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    Nombre?: true
    Apellido?: true
    NombreVendedor?: true
    Telefono?: true
    Email?: true
    Identificacion?: true
    Contrasenna?: true
    Calificacion?: true
    Deshabilitado?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    Nombre?: true
    Apellido?: true
    NombreVendedor?: true
    Telefono?: true
    Email?: true
    Identificacion?: true
    Contrasenna?: true
    Calificacion?: true
    Deshabilitado?: true
    _all?: true
  }

  export type UsuarioAggregateArgs = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs = {
    where?: UsuarioWhereInput
    orderBy?: Enumerable<UsuarioOrderByWithAggregationInput>
    by: UsuarioScalarFieldEnum[]
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }


  export type UsuarioGroupByOutputType = {
    id: number
    Nombre: string
    Apellido: string
    NombreVendedor: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal
    Deshabilitado: boolean
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect = {
    id?: boolean
    Nombre?: boolean
    Apellido?: boolean
    NombreVendedor?: boolean
    Telefono?: boolean
    Email?: boolean
    Identificacion?: boolean
    Contrasenna?: boolean
    Calificacion?: boolean
    Deshabilitado?: boolean
    Roles?: boolean | Usuario$RolesArgs
    MetodoPago?: boolean | Usuario$MetodoPagoArgs
    Direccion?: boolean | Usuario$DireccionArgs
    Producto?: boolean | Usuario$ProductoArgs
    Mensaje?: boolean | Usuario$MensajeArgs
    Compra?: boolean | Usuario$CompraArgs
    Evaluadores?: boolean | Usuario$EvaluadoresArgs
    Evaluados?: boolean | Usuario$EvaluadosArgs
    _count?: boolean | UsuarioCountOutputTypeArgs
  }


  export type UsuarioInclude = {
    Roles?: boolean | Usuario$RolesArgs
    MetodoPago?: boolean | Usuario$MetodoPagoArgs
    Direccion?: boolean | Usuario$DireccionArgs
    Producto?: boolean | Usuario$ProductoArgs
    Mensaje?: boolean | Usuario$MensajeArgs
    Compra?: boolean | Usuario$CompraArgs
    Evaluadores?: boolean | Usuario$EvaluadoresArgs
    Evaluados?: boolean | Usuario$EvaluadosArgs
    _count?: boolean | UsuarioCountOutputTypeArgs
  }

  export type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Usuario :
    S extends undefined ? never :
    S extends { include: any } & (UsuarioArgs | UsuarioFindManyArgs)
    ? Usuario  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Roles' ? Array < RolOnUsuarioGetPayload<S['include'][P]>>  :
        P extends 'MetodoPago' ? Array < MetodoPagoGetPayload<S['include'][P]>>  :
        P extends 'Direccion' ? Array < DireccionGetPayload<S['include'][P]>>  :
        P extends 'Producto' ? Array < ProductoGetPayload<S['include'][P]>>  :
        P extends 'Mensaje' ? Array < MensajeGetPayload<S['include'][P]>>  :
        P extends 'Compra' ? Array < CompraGetPayload<S['include'][P]>>  :
        P extends 'Evaluadores' ? Array < EvaluacionGetPayload<S['include'][P]>>  :
        P extends 'Evaluados' ? Array < EvaluacionGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsuarioCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UsuarioArgs | UsuarioFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Roles' ? Array < RolOnUsuarioGetPayload<S['select'][P]>>  :
        P extends 'MetodoPago' ? Array < MetodoPagoGetPayload<S['select'][P]>>  :
        P extends 'Direccion' ? Array < DireccionGetPayload<S['select'][P]>>  :
        P extends 'Producto' ? Array < ProductoGetPayload<S['select'][P]>>  :
        P extends 'Mensaje' ? Array < MensajeGetPayload<S['select'][P]>>  :
        P extends 'Compra' ? Array < CompraGetPayload<S['select'][P]>>  :
        P extends 'Evaluadores' ? Array < EvaluacionGetPayload<S['select'][P]>>  :
        P extends 'Evaluados' ? Array < EvaluacionGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsuarioCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Usuario ? Usuario[P] : never
  } 
      : Usuario


  type UsuarioCountArgs = 
    Omit<UsuarioFindManyArgs, 'select' | 'include'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsuarioFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsuarioFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Usuario'> extends True ? Prisma__UsuarioClient<UsuarioGetPayload<T>> : Prisma__UsuarioClient<UsuarioGetPayload<T> | null, null>

    /**
     * Find one Usuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UsuarioFindUniqueOrThrowArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsuarioFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsuarioFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Usuario'> extends True ? Prisma__UsuarioClient<UsuarioGetPayload<T>> : Prisma__UsuarioClient<UsuarioGetPayload<T> | null, null>

    /**
     * Find the first Usuario that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsuarioFindManyArgs>(
      args?: SelectSubset<T, UsuarioFindManyArgs>
    ): Prisma.PrismaPromise<Array<UsuarioGetPayload<T>>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends UsuarioCreateArgs>(
      args: SelectSubset<T, UsuarioCreateArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Create many Usuarios.
     *     @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuario = await prisma.usuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsuarioCreateManyArgs>(
      args?: SelectSubset<T, UsuarioCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends UsuarioDeleteArgs>(
      args: SelectSubset<T, UsuarioDeleteArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsuarioUpdateArgs>(
      args: SelectSubset<T, UsuarioUpdateArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsuarioDeleteManyArgs>(
      args?: SelectSubset<T, UsuarioDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsuarioUpdateManyArgs>(
      args: SelectSubset<T, UsuarioUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends UsuarioUpsertArgs>(
      args: SelectSubset<T, UsuarioUpsertArgs>
    ): Prisma__UsuarioClient<UsuarioGetPayload<T>>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsuarioClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Roles<T extends Usuario$RolesArgs= {}>(args?: Subset<T, Usuario$RolesArgs>): Prisma.PrismaPromise<Array<RolOnUsuarioGetPayload<T>>| Null>;

    MetodoPago<T extends Usuario$MetodoPagoArgs= {}>(args?: Subset<T, Usuario$MetodoPagoArgs>): Prisma.PrismaPromise<Array<MetodoPagoGetPayload<T>>| Null>;

    Direccion<T extends Usuario$DireccionArgs= {}>(args?: Subset<T, Usuario$DireccionArgs>): Prisma.PrismaPromise<Array<DireccionGetPayload<T>>| Null>;

    Producto<T extends Usuario$ProductoArgs= {}>(args?: Subset<T, Usuario$ProductoArgs>): Prisma.PrismaPromise<Array<ProductoGetPayload<T>>| Null>;

    Mensaje<T extends Usuario$MensajeArgs= {}>(args?: Subset<T, Usuario$MensajeArgs>): Prisma.PrismaPromise<Array<MensajeGetPayload<T>>| Null>;

    Compra<T extends Usuario$CompraArgs= {}>(args?: Subset<T, Usuario$CompraArgs>): Prisma.PrismaPromise<Array<CompraGetPayload<T>>| Null>;

    Evaluadores<T extends Usuario$EvaluadoresArgs= {}>(args?: Subset<T, Usuario$EvaluadoresArgs>): Prisma.PrismaPromise<Array<EvaluacionGetPayload<T>>| Null>;

    Evaluados<T extends Usuario$EvaluadosArgs= {}>(args?: Subset<T, Usuario$EvaluadosArgs>): Prisma.PrismaPromise<Array<EvaluacionGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Usuario base type for findUnique actions
   */
  export type UsuarioFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUnique
   */
  export interface UsuarioFindUniqueArgs extends UsuarioFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario base type for findFirst actions
   */
  export type UsuarioFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }

  /**
   * Usuario findFirst
   */
  export interface UsuarioFindFirstArgs extends UsuarioFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }


  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }


  /**
   * Usuario create
   */
  export type UsuarioCreateArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }


  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs = {
    /**
     * The data used to create many Usuarios.
     */
    data: Enumerable<UsuarioCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }


  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }


  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }


  /**
   * Usuario.Roles
   */
  export type Usuario$RolesArgs = {
    /**
     * Select specific fields to fetch from the RolOnUsuario
     */
    select?: RolOnUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolOnUsuarioInclude | null
    where?: RolOnUsuarioWhereInput
    orderBy?: Enumerable<RolOnUsuarioOrderByWithRelationInput>
    cursor?: RolOnUsuarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RolOnUsuarioScalarFieldEnum>
  }


  /**
   * Usuario.MetodoPago
   */
  export type Usuario$MetodoPagoArgs = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude | null
    where?: MetodoPagoWhereInput
    orderBy?: Enumerable<MetodoPagoOrderByWithRelationInput>
    cursor?: MetodoPagoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MetodoPagoScalarFieldEnum>
  }


  /**
   * Usuario.Direccion
   */
  export type Usuario$DireccionArgs = {
    /**
     * Select specific fields to fetch from the Direccion
     */
    select?: DireccionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DireccionInclude | null
    where?: DireccionWhereInput
    orderBy?: Enumerable<DireccionOrderByWithRelationInput>
    cursor?: DireccionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DireccionScalarFieldEnum>
  }


  /**
   * Usuario.Producto
   */
  export type Usuario$ProductoArgs = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductoInclude | null
    where?: ProductoWhereInput
    orderBy?: Enumerable<ProductoOrderByWithRelationInput>
    cursor?: ProductoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductoScalarFieldEnum>
  }


  /**
   * Usuario.Mensaje
   */
  export type Usuario$MensajeArgs = {
    /**
     * Select specific fields to fetch from the Mensaje
     */
    select?: MensajeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensajeInclude | null
    where?: MensajeWhereInput
    orderBy?: Enumerable<MensajeOrderByWithRelationInput>
    cursor?: MensajeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MensajeScalarFieldEnum>
  }


  /**
   * Usuario.Compra
   */
  export type Usuario$CompraArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    where?: CompraWhereInput
    orderBy?: Enumerable<CompraOrderByWithRelationInput>
    cursor?: CompraWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompraScalarFieldEnum>
  }


  /**
   * Usuario.Evaluadores
   */
  export type Usuario$EvaluadoresArgs = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EvaluacionInclude | null
    where?: EvaluacionWhereInput
    orderBy?: Enumerable<EvaluacionOrderByWithRelationInput>
    cursor?: EvaluacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EvaluacionScalarFieldEnum>
  }


  /**
   * Usuario.Evaluados
   */
  export type Usuario$EvaluadosArgs = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EvaluacionInclude | null
    where?: EvaluacionWhereInput
    orderBy?: Enumerable<EvaluacionOrderByWithRelationInput>
    cursor?: EvaluacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EvaluacionScalarFieldEnum>
  }


  /**
   * Usuario without action
   */
  export type UsuarioArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude | null
  }



  /**
   * Model Rol
   */


  export type AggregateRol = {
    _count: RolCountAggregateOutputType | null
    _avg: RolAvgAggregateOutputType | null
    _sum: RolSumAggregateOutputType | null
    _min: RolMinAggregateOutputType | null
    _max: RolMaxAggregateOutputType | null
  }

  export type RolAvgAggregateOutputType = {
    id: number | null
  }

  export type RolSumAggregateOutputType = {
    id: number | null
  }

  export type RolMinAggregateOutputType = {
    id: number | null
    Descripcion: string | null
    Borrado: boolean | null
  }

  export type RolMaxAggregateOutputType = {
    id: number | null
    Descripcion: string | null
    Borrado: boolean | null
  }

  export type RolCountAggregateOutputType = {
    id: number
    Descripcion: number
    Borrado: number
    _all: number
  }


  export type RolAvgAggregateInputType = {
    id?: true
  }

  export type RolSumAggregateInputType = {
    id?: true
  }

  export type RolMinAggregateInputType = {
    id?: true
    Descripcion?: true
    Borrado?: true
  }

  export type RolMaxAggregateInputType = {
    id?: true
    Descripcion?: true
    Borrado?: true
  }

  export type RolCountAggregateInputType = {
    id?: true
    Descripcion?: true
    Borrado?: true
    _all?: true
  }

  export type RolAggregateArgs = {
    /**
     * Filter which Rol to aggregate.
     */
    where?: RolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rols to fetch.
     */
    orderBy?: Enumerable<RolOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rols
    **/
    _count?: true | RolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolMaxAggregateInputType
  }

  export type GetRolAggregateType<T extends RolAggregateArgs> = {
        [P in keyof T & keyof AggregateRol]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRol[P]>
      : GetScalarType<T[P], AggregateRol[P]>
  }




  export type RolGroupByArgs = {
    where?: RolWhereInput
    orderBy?: Enumerable<RolOrderByWithAggregationInput>
    by: RolScalarFieldEnum[]
    having?: RolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolCountAggregateInputType | true
    _avg?: RolAvgAggregateInputType
    _sum?: RolSumAggregateInputType
    _min?: RolMinAggregateInputType
    _max?: RolMaxAggregateInputType
  }


  export type RolGroupByOutputType = {
    id: number
    Descripcion: string
    Borrado: boolean
    _count: RolCountAggregateOutputType | null
    _avg: RolAvgAggregateOutputType | null
    _sum: RolSumAggregateOutputType | null
    _min: RolMinAggregateOutputType | null
    _max: RolMaxAggregateOutputType | null
  }

  type GetRolGroupByPayload<T extends RolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolGroupByOutputType[P]>
            : GetScalarType<T[P], RolGroupByOutputType[P]>
        }
      >
    >


  export type RolSelect = {
    id?: boolean
    Descripcion?: boolean
    Borrado?: boolean
    Usuarios?: boolean | Rol$UsuariosArgs
    _count?: boolean | RolCountOutputTypeArgs
  }


  export type RolInclude = {
    Usuarios?: boolean | Rol$UsuariosArgs
    _count?: boolean | RolCountOutputTypeArgs
  }

  export type RolGetPayload<S extends boolean | null | undefined | RolArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Rol :
    S extends undefined ? never :
    S extends { include: any } & (RolArgs | RolFindManyArgs)
    ? Rol  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Usuarios' ? Array < RolOnUsuarioGetPayload<S['include'][P]>>  :
        P extends '_count' ? RolCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (RolArgs | RolFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Usuarios' ? Array < RolOnUsuarioGetPayload<S['select'][P]>>  :
        P extends '_count' ? RolCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Rol ? Rol[P] : never
  } 
      : Rol


  type RolCountArgs = 
    Omit<RolFindManyArgs, 'select' | 'include'> & {
      select?: RolCountAggregateInputType | true
    }

  export interface RolDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Rol that matches the filter.
     * @param {RolFindUniqueArgs} args - Arguments to find a Rol
     * @example
     * // Get one Rol
     * const rol = await prisma.rol.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RolFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RolFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Rol'> extends True ? Prisma__RolClient<RolGetPayload<T>> : Prisma__RolClient<RolGetPayload<T> | null, null>

    /**
     * Find one Rol that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RolFindUniqueOrThrowArgs} args - Arguments to find a Rol
     * @example
     * // Get one Rol
     * const rol = await prisma.rol.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RolFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RolFindUniqueOrThrowArgs>
    ): Prisma__RolClient<RolGetPayload<T>>

    /**
     * Find the first Rol that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolFindFirstArgs} args - Arguments to find a Rol
     * @example
     * // Get one Rol
     * const rol = await prisma.rol.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RolFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RolFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Rol'> extends True ? Prisma__RolClient<RolGetPayload<T>> : Prisma__RolClient<RolGetPayload<T> | null, null>

    /**
     * Find the first Rol that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolFindFirstOrThrowArgs} args - Arguments to find a Rol
     * @example
     * // Get one Rol
     * const rol = await prisma.rol.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RolFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RolFindFirstOrThrowArgs>
    ): Prisma__RolClient<RolGetPayload<T>>

    /**
     * Find zero or more Rols that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rols
     * const rols = await prisma.rol.findMany()
     * 
     * // Get first 10 Rols
     * const rols = await prisma.rol.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolWithIdOnly = await prisma.rol.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RolFindManyArgs>(
      args?: SelectSubset<T, RolFindManyArgs>
    ): Prisma.PrismaPromise<Array<RolGetPayload<T>>>

    /**
     * Create a Rol.
     * @param {RolCreateArgs} args - Arguments to create a Rol.
     * @example
     * // Create one Rol
     * const Rol = await prisma.rol.create({
     *   data: {
     *     // ... data to create a Rol
     *   }
     * })
     * 
    **/
    create<T extends RolCreateArgs>(
      args: SelectSubset<T, RolCreateArgs>
    ): Prisma__RolClient<RolGetPayload<T>>

    /**
     * Create many Rols.
     *     @param {RolCreateManyArgs} args - Arguments to create many Rols.
     *     @example
     *     // Create many Rols
     *     const rol = await prisma.rol.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RolCreateManyArgs>(
      args?: SelectSubset<T, RolCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rol.
     * @param {RolDeleteArgs} args - Arguments to delete one Rol.
     * @example
     * // Delete one Rol
     * const Rol = await prisma.rol.delete({
     *   where: {
     *     // ... filter to delete one Rol
     *   }
     * })
     * 
    **/
    delete<T extends RolDeleteArgs>(
      args: SelectSubset<T, RolDeleteArgs>
    ): Prisma__RolClient<RolGetPayload<T>>

    /**
     * Update one Rol.
     * @param {RolUpdateArgs} args - Arguments to update one Rol.
     * @example
     * // Update one Rol
     * const rol = await prisma.rol.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RolUpdateArgs>(
      args: SelectSubset<T, RolUpdateArgs>
    ): Prisma__RolClient<RolGetPayload<T>>

    /**
     * Delete zero or more Rols.
     * @param {RolDeleteManyArgs} args - Arguments to filter Rols to delete.
     * @example
     * // Delete a few Rols
     * const { count } = await prisma.rol.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RolDeleteManyArgs>(
      args?: SelectSubset<T, RolDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rols
     * const rol = await prisma.rol.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RolUpdateManyArgs>(
      args: SelectSubset<T, RolUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rol.
     * @param {RolUpsertArgs} args - Arguments to update or create a Rol.
     * @example
     * // Update or create a Rol
     * const rol = await prisma.rol.upsert({
     *   create: {
     *     // ... data to create a Rol
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rol we want to update
     *   }
     * })
    **/
    upsert<T extends RolUpsertArgs>(
      args: SelectSubset<T, RolUpsertArgs>
    ): Prisma__RolClient<RolGetPayload<T>>

    /**
     * Count the number of Rols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolCountArgs} args - Arguments to filter Rols to count.
     * @example
     * // Count the number of Rols
     * const count = await prisma.rol.count({
     *   where: {
     *     // ... the filter for the Rols we want to count
     *   }
     * })
    **/
    count<T extends RolCountArgs>(
      args?: Subset<T, RolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolAggregateArgs>(args: Subset<T, RolAggregateArgs>): Prisma.PrismaPromise<GetRolAggregateType<T>>

    /**
     * Group by Rol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolGroupByArgs['orderBy'] }
        : { orderBy?: RolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Rol.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RolClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Usuarios<T extends Rol$UsuariosArgs= {}>(args?: Subset<T, Rol$UsuariosArgs>): Prisma.PrismaPromise<Array<RolOnUsuarioGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Rol base type for findUnique actions
   */
  export type RolFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolInclude | null
    /**
     * Filter, which Rol to fetch.
     */
    where: RolWhereUniqueInput
  }

  /**
   * Rol findUnique
   */
  export interface RolFindUniqueArgs extends RolFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Rol findUniqueOrThrow
   */
  export type RolFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolInclude | null
    /**
     * Filter, which Rol to fetch.
     */
    where: RolWhereUniqueInput
  }


  /**
   * Rol base type for findFirst actions
   */
  export type RolFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolInclude | null
    /**
     * Filter, which Rol to fetch.
     */
    where?: RolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rols to fetch.
     */
    orderBy?: Enumerable<RolOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rols.
     */
    cursor?: RolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rols.
     */
    distinct?: Enumerable<RolScalarFieldEnum>
  }

  /**
   * Rol findFirst
   */
  export interface RolFindFirstArgs extends RolFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Rol findFirstOrThrow
   */
  export type RolFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolInclude | null
    /**
     * Filter, which Rol to fetch.
     */
    where?: RolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rols to fetch.
     */
    orderBy?: Enumerable<RolOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rols.
     */
    cursor?: RolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rols.
     */
    distinct?: Enumerable<RolScalarFieldEnum>
  }


  /**
   * Rol findMany
   */
  export type RolFindManyArgs = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolInclude | null
    /**
     * Filter, which Rols to fetch.
     */
    where?: RolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rols to fetch.
     */
    orderBy?: Enumerable<RolOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rols.
     */
    cursor?: RolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rols.
     */
    skip?: number
    distinct?: Enumerable<RolScalarFieldEnum>
  }


  /**
   * Rol create
   */
  export type RolCreateArgs = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolInclude | null
    /**
     * The data needed to create a Rol.
     */
    data: XOR<RolCreateInput, RolUncheckedCreateInput>
  }


  /**
   * Rol createMany
   */
  export type RolCreateManyArgs = {
    /**
     * The data used to create many Rols.
     */
    data: Enumerable<RolCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Rol update
   */
  export type RolUpdateArgs = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolInclude | null
    /**
     * The data needed to update a Rol.
     */
    data: XOR<RolUpdateInput, RolUncheckedUpdateInput>
    /**
     * Choose, which Rol to update.
     */
    where: RolWhereUniqueInput
  }


  /**
   * Rol updateMany
   */
  export type RolUpdateManyArgs = {
    /**
     * The data used to update Rols.
     */
    data: XOR<RolUpdateManyMutationInput, RolUncheckedUpdateManyInput>
    /**
     * Filter which Rols to update
     */
    where?: RolWhereInput
  }


  /**
   * Rol upsert
   */
  export type RolUpsertArgs = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolInclude | null
    /**
     * The filter to search for the Rol to update in case it exists.
     */
    where: RolWhereUniqueInput
    /**
     * In case the Rol found by the `where` argument doesn't exist, create a new Rol with this data.
     */
    create: XOR<RolCreateInput, RolUncheckedCreateInput>
    /**
     * In case the Rol was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolUpdateInput, RolUncheckedUpdateInput>
  }


  /**
   * Rol delete
   */
  export type RolDeleteArgs = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolInclude | null
    /**
     * Filter which Rol to delete.
     */
    where: RolWhereUniqueInput
  }


  /**
   * Rol deleteMany
   */
  export type RolDeleteManyArgs = {
    /**
     * Filter which Rols to delete
     */
    where?: RolWhereInput
  }


  /**
   * Rol.Usuarios
   */
  export type Rol$UsuariosArgs = {
    /**
     * Select specific fields to fetch from the RolOnUsuario
     */
    select?: RolOnUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolOnUsuarioInclude | null
    where?: RolOnUsuarioWhereInput
    orderBy?: Enumerable<RolOnUsuarioOrderByWithRelationInput>
    cursor?: RolOnUsuarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RolOnUsuarioScalarFieldEnum>
  }


  /**
   * Rol without action
   */
  export type RolArgs = {
    /**
     * Select specific fields to fetch from the Rol
     */
    select?: RolSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolInclude | null
  }



  /**
   * Model RolOnUsuario
   */


  export type AggregateRolOnUsuario = {
    _count: RolOnUsuarioCountAggregateOutputType | null
    _avg: RolOnUsuarioAvgAggregateOutputType | null
    _sum: RolOnUsuarioSumAggregateOutputType | null
    _min: RolOnUsuarioMinAggregateOutputType | null
    _max: RolOnUsuarioMaxAggregateOutputType | null
  }

  export type RolOnUsuarioAvgAggregateOutputType = {
    RolId: number | null
    UsuarioId: number | null
  }

  export type RolOnUsuarioSumAggregateOutputType = {
    RolId: number | null
    UsuarioId: number | null
  }

  export type RolOnUsuarioMinAggregateOutputType = {
    RolId: number | null
    UsuarioId: number | null
  }

  export type RolOnUsuarioMaxAggregateOutputType = {
    RolId: number | null
    UsuarioId: number | null
  }

  export type RolOnUsuarioCountAggregateOutputType = {
    RolId: number
    UsuarioId: number
    _all: number
  }


  export type RolOnUsuarioAvgAggregateInputType = {
    RolId?: true
    UsuarioId?: true
  }

  export type RolOnUsuarioSumAggregateInputType = {
    RolId?: true
    UsuarioId?: true
  }

  export type RolOnUsuarioMinAggregateInputType = {
    RolId?: true
    UsuarioId?: true
  }

  export type RolOnUsuarioMaxAggregateInputType = {
    RolId?: true
    UsuarioId?: true
  }

  export type RolOnUsuarioCountAggregateInputType = {
    RolId?: true
    UsuarioId?: true
    _all?: true
  }

  export type RolOnUsuarioAggregateArgs = {
    /**
     * Filter which RolOnUsuario to aggregate.
     */
    where?: RolOnUsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolOnUsuarios to fetch.
     */
    orderBy?: Enumerable<RolOnUsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolOnUsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolOnUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolOnUsuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RolOnUsuarios
    **/
    _count?: true | RolOnUsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RolOnUsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RolOnUsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolOnUsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolOnUsuarioMaxAggregateInputType
  }

  export type GetRolOnUsuarioAggregateType<T extends RolOnUsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateRolOnUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRolOnUsuario[P]>
      : GetScalarType<T[P], AggregateRolOnUsuario[P]>
  }




  export type RolOnUsuarioGroupByArgs = {
    where?: RolOnUsuarioWhereInput
    orderBy?: Enumerable<RolOnUsuarioOrderByWithAggregationInput>
    by: RolOnUsuarioScalarFieldEnum[]
    having?: RolOnUsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolOnUsuarioCountAggregateInputType | true
    _avg?: RolOnUsuarioAvgAggregateInputType
    _sum?: RolOnUsuarioSumAggregateInputType
    _min?: RolOnUsuarioMinAggregateInputType
    _max?: RolOnUsuarioMaxAggregateInputType
  }


  export type RolOnUsuarioGroupByOutputType = {
    RolId: number
    UsuarioId: number
    _count: RolOnUsuarioCountAggregateOutputType | null
    _avg: RolOnUsuarioAvgAggregateOutputType | null
    _sum: RolOnUsuarioSumAggregateOutputType | null
    _min: RolOnUsuarioMinAggregateOutputType | null
    _max: RolOnUsuarioMaxAggregateOutputType | null
  }

  type GetRolOnUsuarioGroupByPayload<T extends RolOnUsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RolOnUsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolOnUsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolOnUsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], RolOnUsuarioGroupByOutputType[P]>
        }
      >
    >


  export type RolOnUsuarioSelect = {
    RolId?: boolean
    UsuarioId?: boolean
    rol?: boolean | RolArgs
    usuario?: boolean | UsuarioArgs
  }


  export type RolOnUsuarioInclude = {
    rol?: boolean | RolArgs
    usuario?: boolean | UsuarioArgs
  }

  export type RolOnUsuarioGetPayload<S extends boolean | null | undefined | RolOnUsuarioArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RolOnUsuario :
    S extends undefined ? never :
    S extends { include: any } & (RolOnUsuarioArgs | RolOnUsuarioFindManyArgs)
    ? RolOnUsuario  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'rol' ? RolGetPayload<S['include'][P]> :
        P extends 'usuario' ? UsuarioGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (RolOnUsuarioArgs | RolOnUsuarioFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'rol' ? RolGetPayload<S['select'][P]> :
        P extends 'usuario' ? UsuarioGetPayload<S['select'][P]> :  P extends keyof RolOnUsuario ? RolOnUsuario[P] : never
  } 
      : RolOnUsuario


  type RolOnUsuarioCountArgs = 
    Omit<RolOnUsuarioFindManyArgs, 'select' | 'include'> & {
      select?: RolOnUsuarioCountAggregateInputType | true
    }

  export interface RolOnUsuarioDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one RolOnUsuario that matches the filter.
     * @param {RolOnUsuarioFindUniqueArgs} args - Arguments to find a RolOnUsuario
     * @example
     * // Get one RolOnUsuario
     * const rolOnUsuario = await prisma.rolOnUsuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RolOnUsuarioFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RolOnUsuarioFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'RolOnUsuario'> extends True ? Prisma__RolOnUsuarioClient<RolOnUsuarioGetPayload<T>> : Prisma__RolOnUsuarioClient<RolOnUsuarioGetPayload<T> | null, null>

    /**
     * Find one RolOnUsuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RolOnUsuarioFindUniqueOrThrowArgs} args - Arguments to find a RolOnUsuario
     * @example
     * // Get one RolOnUsuario
     * const rolOnUsuario = await prisma.rolOnUsuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RolOnUsuarioFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RolOnUsuarioFindUniqueOrThrowArgs>
    ): Prisma__RolOnUsuarioClient<RolOnUsuarioGetPayload<T>>

    /**
     * Find the first RolOnUsuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolOnUsuarioFindFirstArgs} args - Arguments to find a RolOnUsuario
     * @example
     * // Get one RolOnUsuario
     * const rolOnUsuario = await prisma.rolOnUsuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RolOnUsuarioFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RolOnUsuarioFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'RolOnUsuario'> extends True ? Prisma__RolOnUsuarioClient<RolOnUsuarioGetPayload<T>> : Prisma__RolOnUsuarioClient<RolOnUsuarioGetPayload<T> | null, null>

    /**
     * Find the first RolOnUsuario that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolOnUsuarioFindFirstOrThrowArgs} args - Arguments to find a RolOnUsuario
     * @example
     * // Get one RolOnUsuario
     * const rolOnUsuario = await prisma.rolOnUsuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RolOnUsuarioFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RolOnUsuarioFindFirstOrThrowArgs>
    ): Prisma__RolOnUsuarioClient<RolOnUsuarioGetPayload<T>>

    /**
     * Find zero or more RolOnUsuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolOnUsuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RolOnUsuarios
     * const rolOnUsuarios = await prisma.rolOnUsuario.findMany()
     * 
     * // Get first 10 RolOnUsuarios
     * const rolOnUsuarios = await prisma.rolOnUsuario.findMany({ take: 10 })
     * 
     * // Only select the `RolId`
     * const rolOnUsuarioWithRolIdOnly = await prisma.rolOnUsuario.findMany({ select: { RolId: true } })
     * 
    **/
    findMany<T extends RolOnUsuarioFindManyArgs>(
      args?: SelectSubset<T, RolOnUsuarioFindManyArgs>
    ): Prisma.PrismaPromise<Array<RolOnUsuarioGetPayload<T>>>

    /**
     * Create a RolOnUsuario.
     * @param {RolOnUsuarioCreateArgs} args - Arguments to create a RolOnUsuario.
     * @example
     * // Create one RolOnUsuario
     * const RolOnUsuario = await prisma.rolOnUsuario.create({
     *   data: {
     *     // ... data to create a RolOnUsuario
     *   }
     * })
     * 
    **/
    create<T extends RolOnUsuarioCreateArgs>(
      args: SelectSubset<T, RolOnUsuarioCreateArgs>
    ): Prisma__RolOnUsuarioClient<RolOnUsuarioGetPayload<T>>

    /**
     * Create many RolOnUsuarios.
     *     @param {RolOnUsuarioCreateManyArgs} args - Arguments to create many RolOnUsuarios.
     *     @example
     *     // Create many RolOnUsuarios
     *     const rolOnUsuario = await prisma.rolOnUsuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RolOnUsuarioCreateManyArgs>(
      args?: SelectSubset<T, RolOnUsuarioCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RolOnUsuario.
     * @param {RolOnUsuarioDeleteArgs} args - Arguments to delete one RolOnUsuario.
     * @example
     * // Delete one RolOnUsuario
     * const RolOnUsuario = await prisma.rolOnUsuario.delete({
     *   where: {
     *     // ... filter to delete one RolOnUsuario
     *   }
     * })
     * 
    **/
    delete<T extends RolOnUsuarioDeleteArgs>(
      args: SelectSubset<T, RolOnUsuarioDeleteArgs>
    ): Prisma__RolOnUsuarioClient<RolOnUsuarioGetPayload<T>>

    /**
     * Update one RolOnUsuario.
     * @param {RolOnUsuarioUpdateArgs} args - Arguments to update one RolOnUsuario.
     * @example
     * // Update one RolOnUsuario
     * const rolOnUsuario = await prisma.rolOnUsuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RolOnUsuarioUpdateArgs>(
      args: SelectSubset<T, RolOnUsuarioUpdateArgs>
    ): Prisma__RolOnUsuarioClient<RolOnUsuarioGetPayload<T>>

    /**
     * Delete zero or more RolOnUsuarios.
     * @param {RolOnUsuarioDeleteManyArgs} args - Arguments to filter RolOnUsuarios to delete.
     * @example
     * // Delete a few RolOnUsuarios
     * const { count } = await prisma.rolOnUsuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RolOnUsuarioDeleteManyArgs>(
      args?: SelectSubset<T, RolOnUsuarioDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RolOnUsuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolOnUsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RolOnUsuarios
     * const rolOnUsuario = await prisma.rolOnUsuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RolOnUsuarioUpdateManyArgs>(
      args: SelectSubset<T, RolOnUsuarioUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RolOnUsuario.
     * @param {RolOnUsuarioUpsertArgs} args - Arguments to update or create a RolOnUsuario.
     * @example
     * // Update or create a RolOnUsuario
     * const rolOnUsuario = await prisma.rolOnUsuario.upsert({
     *   create: {
     *     // ... data to create a RolOnUsuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RolOnUsuario we want to update
     *   }
     * })
    **/
    upsert<T extends RolOnUsuarioUpsertArgs>(
      args: SelectSubset<T, RolOnUsuarioUpsertArgs>
    ): Prisma__RolOnUsuarioClient<RolOnUsuarioGetPayload<T>>

    /**
     * Count the number of RolOnUsuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolOnUsuarioCountArgs} args - Arguments to filter RolOnUsuarios to count.
     * @example
     * // Count the number of RolOnUsuarios
     * const count = await prisma.rolOnUsuario.count({
     *   where: {
     *     // ... the filter for the RolOnUsuarios we want to count
     *   }
     * })
    **/
    count<T extends RolOnUsuarioCountArgs>(
      args?: Subset<T, RolOnUsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolOnUsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RolOnUsuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolOnUsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolOnUsuarioAggregateArgs>(args: Subset<T, RolOnUsuarioAggregateArgs>): Prisma.PrismaPromise<GetRolOnUsuarioAggregateType<T>>

    /**
     * Group by RolOnUsuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolOnUsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolOnUsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolOnUsuarioGroupByArgs['orderBy'] }
        : { orderBy?: RolOnUsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolOnUsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolOnUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for RolOnUsuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RolOnUsuarioClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    rol<T extends RolArgs= {}>(args?: Subset<T, RolArgs>): Prisma__RolClient<RolGetPayload<T> | Null>;

    usuario<T extends UsuarioArgs= {}>(args?: Subset<T, UsuarioArgs>): Prisma__UsuarioClient<UsuarioGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * RolOnUsuario base type for findUnique actions
   */
  export type RolOnUsuarioFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the RolOnUsuario
     */
    select?: RolOnUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolOnUsuarioInclude | null
    /**
     * Filter, which RolOnUsuario to fetch.
     */
    where: RolOnUsuarioWhereUniqueInput
  }

  /**
   * RolOnUsuario findUnique
   */
  export interface RolOnUsuarioFindUniqueArgs extends RolOnUsuarioFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * RolOnUsuario findUniqueOrThrow
   */
  export type RolOnUsuarioFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the RolOnUsuario
     */
    select?: RolOnUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolOnUsuarioInclude | null
    /**
     * Filter, which RolOnUsuario to fetch.
     */
    where: RolOnUsuarioWhereUniqueInput
  }


  /**
   * RolOnUsuario base type for findFirst actions
   */
  export type RolOnUsuarioFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the RolOnUsuario
     */
    select?: RolOnUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolOnUsuarioInclude | null
    /**
     * Filter, which RolOnUsuario to fetch.
     */
    where?: RolOnUsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolOnUsuarios to fetch.
     */
    orderBy?: Enumerable<RolOnUsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolOnUsuarios.
     */
    cursor?: RolOnUsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolOnUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolOnUsuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolOnUsuarios.
     */
    distinct?: Enumerable<RolOnUsuarioScalarFieldEnum>
  }

  /**
   * RolOnUsuario findFirst
   */
  export interface RolOnUsuarioFindFirstArgs extends RolOnUsuarioFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * RolOnUsuario findFirstOrThrow
   */
  export type RolOnUsuarioFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the RolOnUsuario
     */
    select?: RolOnUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolOnUsuarioInclude | null
    /**
     * Filter, which RolOnUsuario to fetch.
     */
    where?: RolOnUsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolOnUsuarios to fetch.
     */
    orderBy?: Enumerable<RolOnUsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolOnUsuarios.
     */
    cursor?: RolOnUsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolOnUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolOnUsuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolOnUsuarios.
     */
    distinct?: Enumerable<RolOnUsuarioScalarFieldEnum>
  }


  /**
   * RolOnUsuario findMany
   */
  export type RolOnUsuarioFindManyArgs = {
    /**
     * Select specific fields to fetch from the RolOnUsuario
     */
    select?: RolOnUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolOnUsuarioInclude | null
    /**
     * Filter, which RolOnUsuarios to fetch.
     */
    where?: RolOnUsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolOnUsuarios to fetch.
     */
    orderBy?: Enumerable<RolOnUsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RolOnUsuarios.
     */
    cursor?: RolOnUsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolOnUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolOnUsuarios.
     */
    skip?: number
    distinct?: Enumerable<RolOnUsuarioScalarFieldEnum>
  }


  /**
   * RolOnUsuario create
   */
  export type RolOnUsuarioCreateArgs = {
    /**
     * Select specific fields to fetch from the RolOnUsuario
     */
    select?: RolOnUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolOnUsuarioInclude | null
    /**
     * The data needed to create a RolOnUsuario.
     */
    data: XOR<RolOnUsuarioCreateInput, RolOnUsuarioUncheckedCreateInput>
  }


  /**
   * RolOnUsuario createMany
   */
  export type RolOnUsuarioCreateManyArgs = {
    /**
     * The data used to create many RolOnUsuarios.
     */
    data: Enumerable<RolOnUsuarioCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * RolOnUsuario update
   */
  export type RolOnUsuarioUpdateArgs = {
    /**
     * Select specific fields to fetch from the RolOnUsuario
     */
    select?: RolOnUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolOnUsuarioInclude | null
    /**
     * The data needed to update a RolOnUsuario.
     */
    data: XOR<RolOnUsuarioUpdateInput, RolOnUsuarioUncheckedUpdateInput>
    /**
     * Choose, which RolOnUsuario to update.
     */
    where: RolOnUsuarioWhereUniqueInput
  }


  /**
   * RolOnUsuario updateMany
   */
  export type RolOnUsuarioUpdateManyArgs = {
    /**
     * The data used to update RolOnUsuarios.
     */
    data: XOR<RolOnUsuarioUpdateManyMutationInput, RolOnUsuarioUncheckedUpdateManyInput>
    /**
     * Filter which RolOnUsuarios to update
     */
    where?: RolOnUsuarioWhereInput
  }


  /**
   * RolOnUsuario upsert
   */
  export type RolOnUsuarioUpsertArgs = {
    /**
     * Select specific fields to fetch from the RolOnUsuario
     */
    select?: RolOnUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolOnUsuarioInclude | null
    /**
     * The filter to search for the RolOnUsuario to update in case it exists.
     */
    where: RolOnUsuarioWhereUniqueInput
    /**
     * In case the RolOnUsuario found by the `where` argument doesn't exist, create a new RolOnUsuario with this data.
     */
    create: XOR<RolOnUsuarioCreateInput, RolOnUsuarioUncheckedCreateInput>
    /**
     * In case the RolOnUsuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolOnUsuarioUpdateInput, RolOnUsuarioUncheckedUpdateInput>
  }


  /**
   * RolOnUsuario delete
   */
  export type RolOnUsuarioDeleteArgs = {
    /**
     * Select specific fields to fetch from the RolOnUsuario
     */
    select?: RolOnUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolOnUsuarioInclude | null
    /**
     * Filter which RolOnUsuario to delete.
     */
    where: RolOnUsuarioWhereUniqueInput
  }


  /**
   * RolOnUsuario deleteMany
   */
  export type RolOnUsuarioDeleteManyArgs = {
    /**
     * Filter which RolOnUsuarios to delete
     */
    where?: RolOnUsuarioWhereInput
  }


  /**
   * RolOnUsuario without action
   */
  export type RolOnUsuarioArgs = {
    /**
     * Select specific fields to fetch from the RolOnUsuario
     */
    select?: RolOnUsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolOnUsuarioInclude | null
  }



  /**
   * Model TipoPago
   */


  export type AggregateTipoPago = {
    _count: TipoPagoCountAggregateOutputType | null
    _avg: TipoPagoAvgAggregateOutputType | null
    _sum: TipoPagoSumAggregateOutputType | null
    _min: TipoPagoMinAggregateOutputType | null
    _max: TipoPagoMaxAggregateOutputType | null
  }

  export type TipoPagoAvgAggregateOutputType = {
    id: number | null
  }

  export type TipoPagoSumAggregateOutputType = {
    id: number | null
  }

  export type TipoPagoMinAggregateOutputType = {
    id: number | null
    Descripcion: string | null
    Borrado: boolean | null
  }

  export type TipoPagoMaxAggregateOutputType = {
    id: number | null
    Descripcion: string | null
    Borrado: boolean | null
  }

  export type TipoPagoCountAggregateOutputType = {
    id: number
    Descripcion: number
    Borrado: number
    _all: number
  }


  export type TipoPagoAvgAggregateInputType = {
    id?: true
  }

  export type TipoPagoSumAggregateInputType = {
    id?: true
  }

  export type TipoPagoMinAggregateInputType = {
    id?: true
    Descripcion?: true
    Borrado?: true
  }

  export type TipoPagoMaxAggregateInputType = {
    id?: true
    Descripcion?: true
    Borrado?: true
  }

  export type TipoPagoCountAggregateInputType = {
    id?: true
    Descripcion?: true
    Borrado?: true
    _all?: true
  }

  export type TipoPagoAggregateArgs = {
    /**
     * Filter which TipoPago to aggregate.
     */
    where?: TipoPagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoPagos to fetch.
     */
    orderBy?: Enumerable<TipoPagoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TipoPagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoPagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoPagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TipoPagos
    **/
    _count?: true | TipoPagoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TipoPagoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TipoPagoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TipoPagoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TipoPagoMaxAggregateInputType
  }

  export type GetTipoPagoAggregateType<T extends TipoPagoAggregateArgs> = {
        [P in keyof T & keyof AggregateTipoPago]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTipoPago[P]>
      : GetScalarType<T[P], AggregateTipoPago[P]>
  }




  export type TipoPagoGroupByArgs = {
    where?: TipoPagoWhereInput
    orderBy?: Enumerable<TipoPagoOrderByWithAggregationInput>
    by: TipoPagoScalarFieldEnum[]
    having?: TipoPagoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TipoPagoCountAggregateInputType | true
    _avg?: TipoPagoAvgAggregateInputType
    _sum?: TipoPagoSumAggregateInputType
    _min?: TipoPagoMinAggregateInputType
    _max?: TipoPagoMaxAggregateInputType
  }


  export type TipoPagoGroupByOutputType = {
    id: number
    Descripcion: string
    Borrado: boolean
    _count: TipoPagoCountAggregateOutputType | null
    _avg: TipoPagoAvgAggregateOutputType | null
    _sum: TipoPagoSumAggregateOutputType | null
    _min: TipoPagoMinAggregateOutputType | null
    _max: TipoPagoMaxAggregateOutputType | null
  }

  type GetTipoPagoGroupByPayload<T extends TipoPagoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TipoPagoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TipoPagoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TipoPagoGroupByOutputType[P]>
            : GetScalarType<T[P], TipoPagoGroupByOutputType[P]>
        }
      >
    >


  export type TipoPagoSelect = {
    id?: boolean
    Descripcion?: boolean
    Borrado?: boolean
    MetodoPago?: boolean | TipoPago$MetodoPagoArgs
    _count?: boolean | TipoPagoCountOutputTypeArgs
  }


  export type TipoPagoInclude = {
    MetodoPago?: boolean | TipoPago$MetodoPagoArgs
    _count?: boolean | TipoPagoCountOutputTypeArgs
  }

  export type TipoPagoGetPayload<S extends boolean | null | undefined | TipoPagoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TipoPago :
    S extends undefined ? never :
    S extends { include: any } & (TipoPagoArgs | TipoPagoFindManyArgs)
    ? TipoPago  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'MetodoPago' ? Array < MetodoPagoGetPayload<S['include'][P]>>  :
        P extends '_count' ? TipoPagoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TipoPagoArgs | TipoPagoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'MetodoPago' ? Array < MetodoPagoGetPayload<S['select'][P]>>  :
        P extends '_count' ? TipoPagoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TipoPago ? TipoPago[P] : never
  } 
      : TipoPago


  type TipoPagoCountArgs = 
    Omit<TipoPagoFindManyArgs, 'select' | 'include'> & {
      select?: TipoPagoCountAggregateInputType | true
    }

  export interface TipoPagoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TipoPago that matches the filter.
     * @param {TipoPagoFindUniqueArgs} args - Arguments to find a TipoPago
     * @example
     * // Get one TipoPago
     * const tipoPago = await prisma.tipoPago.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TipoPagoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TipoPagoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TipoPago'> extends True ? Prisma__TipoPagoClient<TipoPagoGetPayload<T>> : Prisma__TipoPagoClient<TipoPagoGetPayload<T> | null, null>

    /**
     * Find one TipoPago that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TipoPagoFindUniqueOrThrowArgs} args - Arguments to find a TipoPago
     * @example
     * // Get one TipoPago
     * const tipoPago = await prisma.tipoPago.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TipoPagoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TipoPagoFindUniqueOrThrowArgs>
    ): Prisma__TipoPagoClient<TipoPagoGetPayload<T>>

    /**
     * Find the first TipoPago that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoPagoFindFirstArgs} args - Arguments to find a TipoPago
     * @example
     * // Get one TipoPago
     * const tipoPago = await prisma.tipoPago.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TipoPagoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TipoPagoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TipoPago'> extends True ? Prisma__TipoPagoClient<TipoPagoGetPayload<T>> : Prisma__TipoPagoClient<TipoPagoGetPayload<T> | null, null>

    /**
     * Find the first TipoPago that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoPagoFindFirstOrThrowArgs} args - Arguments to find a TipoPago
     * @example
     * // Get one TipoPago
     * const tipoPago = await prisma.tipoPago.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TipoPagoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TipoPagoFindFirstOrThrowArgs>
    ): Prisma__TipoPagoClient<TipoPagoGetPayload<T>>

    /**
     * Find zero or more TipoPagos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoPagoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TipoPagos
     * const tipoPagos = await prisma.tipoPago.findMany()
     * 
     * // Get first 10 TipoPagos
     * const tipoPagos = await prisma.tipoPago.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tipoPagoWithIdOnly = await prisma.tipoPago.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TipoPagoFindManyArgs>(
      args?: SelectSubset<T, TipoPagoFindManyArgs>
    ): Prisma.PrismaPromise<Array<TipoPagoGetPayload<T>>>

    /**
     * Create a TipoPago.
     * @param {TipoPagoCreateArgs} args - Arguments to create a TipoPago.
     * @example
     * // Create one TipoPago
     * const TipoPago = await prisma.tipoPago.create({
     *   data: {
     *     // ... data to create a TipoPago
     *   }
     * })
     * 
    **/
    create<T extends TipoPagoCreateArgs>(
      args: SelectSubset<T, TipoPagoCreateArgs>
    ): Prisma__TipoPagoClient<TipoPagoGetPayload<T>>

    /**
     * Create many TipoPagos.
     *     @param {TipoPagoCreateManyArgs} args - Arguments to create many TipoPagos.
     *     @example
     *     // Create many TipoPagos
     *     const tipoPago = await prisma.tipoPago.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TipoPagoCreateManyArgs>(
      args?: SelectSubset<T, TipoPagoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TipoPago.
     * @param {TipoPagoDeleteArgs} args - Arguments to delete one TipoPago.
     * @example
     * // Delete one TipoPago
     * const TipoPago = await prisma.tipoPago.delete({
     *   where: {
     *     // ... filter to delete one TipoPago
     *   }
     * })
     * 
    **/
    delete<T extends TipoPagoDeleteArgs>(
      args: SelectSubset<T, TipoPagoDeleteArgs>
    ): Prisma__TipoPagoClient<TipoPagoGetPayload<T>>

    /**
     * Update one TipoPago.
     * @param {TipoPagoUpdateArgs} args - Arguments to update one TipoPago.
     * @example
     * // Update one TipoPago
     * const tipoPago = await prisma.tipoPago.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TipoPagoUpdateArgs>(
      args: SelectSubset<T, TipoPagoUpdateArgs>
    ): Prisma__TipoPagoClient<TipoPagoGetPayload<T>>

    /**
     * Delete zero or more TipoPagos.
     * @param {TipoPagoDeleteManyArgs} args - Arguments to filter TipoPagos to delete.
     * @example
     * // Delete a few TipoPagos
     * const { count } = await prisma.tipoPago.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TipoPagoDeleteManyArgs>(
      args?: SelectSubset<T, TipoPagoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TipoPagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoPagoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TipoPagos
     * const tipoPago = await prisma.tipoPago.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TipoPagoUpdateManyArgs>(
      args: SelectSubset<T, TipoPagoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TipoPago.
     * @param {TipoPagoUpsertArgs} args - Arguments to update or create a TipoPago.
     * @example
     * // Update or create a TipoPago
     * const tipoPago = await prisma.tipoPago.upsert({
     *   create: {
     *     // ... data to create a TipoPago
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TipoPago we want to update
     *   }
     * })
    **/
    upsert<T extends TipoPagoUpsertArgs>(
      args: SelectSubset<T, TipoPagoUpsertArgs>
    ): Prisma__TipoPagoClient<TipoPagoGetPayload<T>>

    /**
     * Count the number of TipoPagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoPagoCountArgs} args - Arguments to filter TipoPagos to count.
     * @example
     * // Count the number of TipoPagos
     * const count = await prisma.tipoPago.count({
     *   where: {
     *     // ... the filter for the TipoPagos we want to count
     *   }
     * })
    **/
    count<T extends TipoPagoCountArgs>(
      args?: Subset<T, TipoPagoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TipoPagoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TipoPago.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoPagoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TipoPagoAggregateArgs>(args: Subset<T, TipoPagoAggregateArgs>): Prisma.PrismaPromise<GetTipoPagoAggregateType<T>>

    /**
     * Group by TipoPago.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoPagoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TipoPagoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TipoPagoGroupByArgs['orderBy'] }
        : { orderBy?: TipoPagoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TipoPagoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTipoPagoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TipoPago.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TipoPagoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    MetodoPago<T extends TipoPago$MetodoPagoArgs= {}>(args?: Subset<T, TipoPago$MetodoPagoArgs>): Prisma.PrismaPromise<Array<MetodoPagoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TipoPago base type for findUnique actions
   */
  export type TipoPagoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TipoPago
     */
    select?: TipoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoPagoInclude | null
    /**
     * Filter, which TipoPago to fetch.
     */
    where: TipoPagoWhereUniqueInput
  }

  /**
   * TipoPago findUnique
   */
  export interface TipoPagoFindUniqueArgs extends TipoPagoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TipoPago findUniqueOrThrow
   */
  export type TipoPagoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TipoPago
     */
    select?: TipoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoPagoInclude | null
    /**
     * Filter, which TipoPago to fetch.
     */
    where: TipoPagoWhereUniqueInput
  }


  /**
   * TipoPago base type for findFirst actions
   */
  export type TipoPagoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TipoPago
     */
    select?: TipoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoPagoInclude | null
    /**
     * Filter, which TipoPago to fetch.
     */
    where?: TipoPagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoPagos to fetch.
     */
    orderBy?: Enumerable<TipoPagoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoPagos.
     */
    cursor?: TipoPagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoPagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoPagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoPagos.
     */
    distinct?: Enumerable<TipoPagoScalarFieldEnum>
  }

  /**
   * TipoPago findFirst
   */
  export interface TipoPagoFindFirstArgs extends TipoPagoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TipoPago findFirstOrThrow
   */
  export type TipoPagoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TipoPago
     */
    select?: TipoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoPagoInclude | null
    /**
     * Filter, which TipoPago to fetch.
     */
    where?: TipoPagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoPagos to fetch.
     */
    orderBy?: Enumerable<TipoPagoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoPagos.
     */
    cursor?: TipoPagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoPagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoPagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoPagos.
     */
    distinct?: Enumerable<TipoPagoScalarFieldEnum>
  }


  /**
   * TipoPago findMany
   */
  export type TipoPagoFindManyArgs = {
    /**
     * Select specific fields to fetch from the TipoPago
     */
    select?: TipoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoPagoInclude | null
    /**
     * Filter, which TipoPagos to fetch.
     */
    where?: TipoPagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoPagos to fetch.
     */
    orderBy?: Enumerable<TipoPagoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TipoPagos.
     */
    cursor?: TipoPagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoPagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoPagos.
     */
    skip?: number
    distinct?: Enumerable<TipoPagoScalarFieldEnum>
  }


  /**
   * TipoPago create
   */
  export type TipoPagoCreateArgs = {
    /**
     * Select specific fields to fetch from the TipoPago
     */
    select?: TipoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoPagoInclude | null
    /**
     * The data needed to create a TipoPago.
     */
    data: XOR<TipoPagoCreateInput, TipoPagoUncheckedCreateInput>
  }


  /**
   * TipoPago createMany
   */
  export type TipoPagoCreateManyArgs = {
    /**
     * The data used to create many TipoPagos.
     */
    data: Enumerable<TipoPagoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TipoPago update
   */
  export type TipoPagoUpdateArgs = {
    /**
     * Select specific fields to fetch from the TipoPago
     */
    select?: TipoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoPagoInclude | null
    /**
     * The data needed to update a TipoPago.
     */
    data: XOR<TipoPagoUpdateInput, TipoPagoUncheckedUpdateInput>
    /**
     * Choose, which TipoPago to update.
     */
    where: TipoPagoWhereUniqueInput
  }


  /**
   * TipoPago updateMany
   */
  export type TipoPagoUpdateManyArgs = {
    /**
     * The data used to update TipoPagos.
     */
    data: XOR<TipoPagoUpdateManyMutationInput, TipoPagoUncheckedUpdateManyInput>
    /**
     * Filter which TipoPagos to update
     */
    where?: TipoPagoWhereInput
  }


  /**
   * TipoPago upsert
   */
  export type TipoPagoUpsertArgs = {
    /**
     * Select specific fields to fetch from the TipoPago
     */
    select?: TipoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoPagoInclude | null
    /**
     * The filter to search for the TipoPago to update in case it exists.
     */
    where: TipoPagoWhereUniqueInput
    /**
     * In case the TipoPago found by the `where` argument doesn't exist, create a new TipoPago with this data.
     */
    create: XOR<TipoPagoCreateInput, TipoPagoUncheckedCreateInput>
    /**
     * In case the TipoPago was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TipoPagoUpdateInput, TipoPagoUncheckedUpdateInput>
  }


  /**
   * TipoPago delete
   */
  export type TipoPagoDeleteArgs = {
    /**
     * Select specific fields to fetch from the TipoPago
     */
    select?: TipoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoPagoInclude | null
    /**
     * Filter which TipoPago to delete.
     */
    where: TipoPagoWhereUniqueInput
  }


  /**
   * TipoPago deleteMany
   */
  export type TipoPagoDeleteManyArgs = {
    /**
     * Filter which TipoPagos to delete
     */
    where?: TipoPagoWhereInput
  }


  /**
   * TipoPago.MetodoPago
   */
  export type TipoPago$MetodoPagoArgs = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude | null
    where?: MetodoPagoWhereInput
    orderBy?: Enumerable<MetodoPagoOrderByWithRelationInput>
    cursor?: MetodoPagoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MetodoPagoScalarFieldEnum>
  }


  /**
   * TipoPago without action
   */
  export type TipoPagoArgs = {
    /**
     * Select specific fields to fetch from the TipoPago
     */
    select?: TipoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TipoPagoInclude | null
  }



  /**
   * Model MetodoPago
   */


  export type AggregateMetodoPago = {
    _count: MetodoPagoCountAggregateOutputType | null
    _avg: MetodoPagoAvgAggregateOutputType | null
    _sum: MetodoPagoSumAggregateOutputType | null
    _min: MetodoPagoMinAggregateOutputType | null
    _max: MetodoPagoMaxAggregateOutputType | null
  }

  export type MetodoPagoAvgAggregateOutputType = {
    id: number | null
    UsuarioId: number | null
    TipoPagoId: number | null
  }

  export type MetodoPagoSumAggregateOutputType = {
    id: number | null
    UsuarioId: number | null
    TipoPagoId: number | null
  }

  export type MetodoPagoMinAggregateOutputType = {
    id: number | null
    UsuarioId: number | null
    TipoPagoId: number | null
    NumeroCuenta: string | null
    Expiracion: Date | null
    Titulo: string | null
    Borrado: boolean | null
  }

  export type MetodoPagoMaxAggregateOutputType = {
    id: number | null
    UsuarioId: number | null
    TipoPagoId: number | null
    NumeroCuenta: string | null
    Expiracion: Date | null
    Titulo: string | null
    Borrado: boolean | null
  }

  export type MetodoPagoCountAggregateOutputType = {
    id: number
    UsuarioId: number
    TipoPagoId: number
    NumeroCuenta: number
    Expiracion: number
    Titulo: number
    Borrado: number
    _all: number
  }


  export type MetodoPagoAvgAggregateInputType = {
    id?: true
    UsuarioId?: true
    TipoPagoId?: true
  }

  export type MetodoPagoSumAggregateInputType = {
    id?: true
    UsuarioId?: true
    TipoPagoId?: true
  }

  export type MetodoPagoMinAggregateInputType = {
    id?: true
    UsuarioId?: true
    TipoPagoId?: true
    NumeroCuenta?: true
    Expiracion?: true
    Titulo?: true
    Borrado?: true
  }

  export type MetodoPagoMaxAggregateInputType = {
    id?: true
    UsuarioId?: true
    TipoPagoId?: true
    NumeroCuenta?: true
    Expiracion?: true
    Titulo?: true
    Borrado?: true
  }

  export type MetodoPagoCountAggregateInputType = {
    id?: true
    UsuarioId?: true
    TipoPagoId?: true
    NumeroCuenta?: true
    Expiracion?: true
    Titulo?: true
    Borrado?: true
    _all?: true
  }

  export type MetodoPagoAggregateArgs = {
    /**
     * Filter which MetodoPago to aggregate.
     */
    where?: MetodoPagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetodoPagos to fetch.
     */
    orderBy?: Enumerable<MetodoPagoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MetodoPagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetodoPagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetodoPagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MetodoPagos
    **/
    _count?: true | MetodoPagoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MetodoPagoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MetodoPagoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MetodoPagoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MetodoPagoMaxAggregateInputType
  }

  export type GetMetodoPagoAggregateType<T extends MetodoPagoAggregateArgs> = {
        [P in keyof T & keyof AggregateMetodoPago]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMetodoPago[P]>
      : GetScalarType<T[P], AggregateMetodoPago[P]>
  }




  export type MetodoPagoGroupByArgs = {
    where?: MetodoPagoWhereInput
    orderBy?: Enumerable<MetodoPagoOrderByWithAggregationInput>
    by: MetodoPagoScalarFieldEnum[]
    having?: MetodoPagoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MetodoPagoCountAggregateInputType | true
    _avg?: MetodoPagoAvgAggregateInputType
    _sum?: MetodoPagoSumAggregateInputType
    _min?: MetodoPagoMinAggregateInputType
    _max?: MetodoPagoMaxAggregateInputType
  }


  export type MetodoPagoGroupByOutputType = {
    id: number
    UsuarioId: number
    TipoPagoId: number
    NumeroCuenta: string
    Expiracion: Date
    Titulo: string
    Borrado: boolean
    _count: MetodoPagoCountAggregateOutputType | null
    _avg: MetodoPagoAvgAggregateOutputType | null
    _sum: MetodoPagoSumAggregateOutputType | null
    _min: MetodoPagoMinAggregateOutputType | null
    _max: MetodoPagoMaxAggregateOutputType | null
  }

  type GetMetodoPagoGroupByPayload<T extends MetodoPagoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MetodoPagoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MetodoPagoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MetodoPagoGroupByOutputType[P]>
            : GetScalarType<T[P], MetodoPagoGroupByOutputType[P]>
        }
      >
    >


  export type MetodoPagoSelect = {
    id?: boolean
    UsuarioId?: boolean
    TipoPagoId?: boolean
    NumeroCuenta?: boolean
    Expiracion?: boolean
    Titulo?: boolean
    Borrado?: boolean
    usuario?: boolean | UsuarioArgs
    tipoPago?: boolean | TipoPagoArgs
    Compra?: boolean | MetodoPago$CompraArgs
    _count?: boolean | MetodoPagoCountOutputTypeArgs
  }


  export type MetodoPagoInclude = {
    usuario?: boolean | UsuarioArgs
    tipoPago?: boolean | TipoPagoArgs
    Compra?: boolean | MetodoPago$CompraArgs
    _count?: boolean | MetodoPagoCountOutputTypeArgs
  }

  export type MetodoPagoGetPayload<S extends boolean | null | undefined | MetodoPagoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MetodoPago :
    S extends undefined ? never :
    S extends { include: any } & (MetodoPagoArgs | MetodoPagoFindManyArgs)
    ? MetodoPago  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'usuario' ? UsuarioGetPayload<S['include'][P]> :
        P extends 'tipoPago' ? TipoPagoGetPayload<S['include'][P]> :
        P extends 'Compra' ? Array < CompraGetPayload<S['include'][P]>>  :
        P extends '_count' ? MetodoPagoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MetodoPagoArgs | MetodoPagoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'usuario' ? UsuarioGetPayload<S['select'][P]> :
        P extends 'tipoPago' ? TipoPagoGetPayload<S['select'][P]> :
        P extends 'Compra' ? Array < CompraGetPayload<S['select'][P]>>  :
        P extends '_count' ? MetodoPagoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof MetodoPago ? MetodoPago[P] : never
  } 
      : MetodoPago


  type MetodoPagoCountArgs = 
    Omit<MetodoPagoFindManyArgs, 'select' | 'include'> & {
      select?: MetodoPagoCountAggregateInputType | true
    }

  export interface MetodoPagoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one MetodoPago that matches the filter.
     * @param {MetodoPagoFindUniqueArgs} args - Arguments to find a MetodoPago
     * @example
     * // Get one MetodoPago
     * const metodoPago = await prisma.metodoPago.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MetodoPagoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MetodoPagoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MetodoPago'> extends True ? Prisma__MetodoPagoClient<MetodoPagoGetPayload<T>> : Prisma__MetodoPagoClient<MetodoPagoGetPayload<T> | null, null>

    /**
     * Find one MetodoPago that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MetodoPagoFindUniqueOrThrowArgs} args - Arguments to find a MetodoPago
     * @example
     * // Get one MetodoPago
     * const metodoPago = await prisma.metodoPago.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MetodoPagoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MetodoPagoFindUniqueOrThrowArgs>
    ): Prisma__MetodoPagoClient<MetodoPagoGetPayload<T>>

    /**
     * Find the first MetodoPago that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoFindFirstArgs} args - Arguments to find a MetodoPago
     * @example
     * // Get one MetodoPago
     * const metodoPago = await prisma.metodoPago.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MetodoPagoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MetodoPagoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MetodoPago'> extends True ? Prisma__MetodoPagoClient<MetodoPagoGetPayload<T>> : Prisma__MetodoPagoClient<MetodoPagoGetPayload<T> | null, null>

    /**
     * Find the first MetodoPago that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoFindFirstOrThrowArgs} args - Arguments to find a MetodoPago
     * @example
     * // Get one MetodoPago
     * const metodoPago = await prisma.metodoPago.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MetodoPagoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MetodoPagoFindFirstOrThrowArgs>
    ): Prisma__MetodoPagoClient<MetodoPagoGetPayload<T>>

    /**
     * Find zero or more MetodoPagos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MetodoPagos
     * const metodoPagos = await prisma.metodoPago.findMany()
     * 
     * // Get first 10 MetodoPagos
     * const metodoPagos = await prisma.metodoPago.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const metodoPagoWithIdOnly = await prisma.metodoPago.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MetodoPagoFindManyArgs>(
      args?: SelectSubset<T, MetodoPagoFindManyArgs>
    ): Prisma.PrismaPromise<Array<MetodoPagoGetPayload<T>>>

    /**
     * Create a MetodoPago.
     * @param {MetodoPagoCreateArgs} args - Arguments to create a MetodoPago.
     * @example
     * // Create one MetodoPago
     * const MetodoPago = await prisma.metodoPago.create({
     *   data: {
     *     // ... data to create a MetodoPago
     *   }
     * })
     * 
    **/
    create<T extends MetodoPagoCreateArgs>(
      args: SelectSubset<T, MetodoPagoCreateArgs>
    ): Prisma__MetodoPagoClient<MetodoPagoGetPayload<T>>

    /**
     * Create many MetodoPagos.
     *     @param {MetodoPagoCreateManyArgs} args - Arguments to create many MetodoPagos.
     *     @example
     *     // Create many MetodoPagos
     *     const metodoPago = await prisma.metodoPago.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MetodoPagoCreateManyArgs>(
      args?: SelectSubset<T, MetodoPagoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MetodoPago.
     * @param {MetodoPagoDeleteArgs} args - Arguments to delete one MetodoPago.
     * @example
     * // Delete one MetodoPago
     * const MetodoPago = await prisma.metodoPago.delete({
     *   where: {
     *     // ... filter to delete one MetodoPago
     *   }
     * })
     * 
    **/
    delete<T extends MetodoPagoDeleteArgs>(
      args: SelectSubset<T, MetodoPagoDeleteArgs>
    ): Prisma__MetodoPagoClient<MetodoPagoGetPayload<T>>

    /**
     * Update one MetodoPago.
     * @param {MetodoPagoUpdateArgs} args - Arguments to update one MetodoPago.
     * @example
     * // Update one MetodoPago
     * const metodoPago = await prisma.metodoPago.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MetodoPagoUpdateArgs>(
      args: SelectSubset<T, MetodoPagoUpdateArgs>
    ): Prisma__MetodoPagoClient<MetodoPagoGetPayload<T>>

    /**
     * Delete zero or more MetodoPagos.
     * @param {MetodoPagoDeleteManyArgs} args - Arguments to filter MetodoPagos to delete.
     * @example
     * // Delete a few MetodoPagos
     * const { count } = await prisma.metodoPago.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MetodoPagoDeleteManyArgs>(
      args?: SelectSubset<T, MetodoPagoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetodoPagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MetodoPagos
     * const metodoPago = await prisma.metodoPago.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MetodoPagoUpdateManyArgs>(
      args: SelectSubset<T, MetodoPagoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MetodoPago.
     * @param {MetodoPagoUpsertArgs} args - Arguments to update or create a MetodoPago.
     * @example
     * // Update or create a MetodoPago
     * const metodoPago = await prisma.metodoPago.upsert({
     *   create: {
     *     // ... data to create a MetodoPago
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MetodoPago we want to update
     *   }
     * })
    **/
    upsert<T extends MetodoPagoUpsertArgs>(
      args: SelectSubset<T, MetodoPagoUpsertArgs>
    ): Prisma__MetodoPagoClient<MetodoPagoGetPayload<T>>

    /**
     * Count the number of MetodoPagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoCountArgs} args - Arguments to filter MetodoPagos to count.
     * @example
     * // Count the number of MetodoPagos
     * const count = await prisma.metodoPago.count({
     *   where: {
     *     // ... the filter for the MetodoPagos we want to count
     *   }
     * })
    **/
    count<T extends MetodoPagoCountArgs>(
      args?: Subset<T, MetodoPagoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MetodoPagoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MetodoPago.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MetodoPagoAggregateArgs>(args: Subset<T, MetodoPagoAggregateArgs>): Prisma.PrismaPromise<GetMetodoPagoAggregateType<T>>

    /**
     * Group by MetodoPago.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MetodoPagoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MetodoPagoGroupByArgs['orderBy'] }
        : { orderBy?: MetodoPagoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MetodoPagoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetodoPagoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MetodoPago.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MetodoPagoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    usuario<T extends UsuarioArgs= {}>(args?: Subset<T, UsuarioArgs>): Prisma__UsuarioClient<UsuarioGetPayload<T> | Null>;

    tipoPago<T extends TipoPagoArgs= {}>(args?: Subset<T, TipoPagoArgs>): Prisma__TipoPagoClient<TipoPagoGetPayload<T> | Null>;

    Compra<T extends MetodoPago$CompraArgs= {}>(args?: Subset<T, MetodoPago$CompraArgs>): Prisma.PrismaPromise<Array<CompraGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MetodoPago base type for findUnique actions
   */
  export type MetodoPagoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude | null
    /**
     * Filter, which MetodoPago to fetch.
     */
    where: MetodoPagoWhereUniqueInput
  }

  /**
   * MetodoPago findUnique
   */
  export interface MetodoPagoFindUniqueArgs extends MetodoPagoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MetodoPago findUniqueOrThrow
   */
  export type MetodoPagoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude | null
    /**
     * Filter, which MetodoPago to fetch.
     */
    where: MetodoPagoWhereUniqueInput
  }


  /**
   * MetodoPago base type for findFirst actions
   */
  export type MetodoPagoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude | null
    /**
     * Filter, which MetodoPago to fetch.
     */
    where?: MetodoPagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetodoPagos to fetch.
     */
    orderBy?: Enumerable<MetodoPagoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetodoPagos.
     */
    cursor?: MetodoPagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetodoPagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetodoPagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetodoPagos.
     */
    distinct?: Enumerable<MetodoPagoScalarFieldEnum>
  }

  /**
   * MetodoPago findFirst
   */
  export interface MetodoPagoFindFirstArgs extends MetodoPagoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MetodoPago findFirstOrThrow
   */
  export type MetodoPagoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude | null
    /**
     * Filter, which MetodoPago to fetch.
     */
    where?: MetodoPagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetodoPagos to fetch.
     */
    orderBy?: Enumerable<MetodoPagoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetodoPagos.
     */
    cursor?: MetodoPagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetodoPagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetodoPagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetodoPagos.
     */
    distinct?: Enumerable<MetodoPagoScalarFieldEnum>
  }


  /**
   * MetodoPago findMany
   */
  export type MetodoPagoFindManyArgs = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude | null
    /**
     * Filter, which MetodoPagos to fetch.
     */
    where?: MetodoPagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetodoPagos to fetch.
     */
    orderBy?: Enumerable<MetodoPagoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MetodoPagos.
     */
    cursor?: MetodoPagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetodoPagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetodoPagos.
     */
    skip?: number
    distinct?: Enumerable<MetodoPagoScalarFieldEnum>
  }


  /**
   * MetodoPago create
   */
  export type MetodoPagoCreateArgs = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude | null
    /**
     * The data needed to create a MetodoPago.
     */
    data: XOR<MetodoPagoCreateInput, MetodoPagoUncheckedCreateInput>
  }


  /**
   * MetodoPago createMany
   */
  export type MetodoPagoCreateManyArgs = {
    /**
     * The data used to create many MetodoPagos.
     */
    data: Enumerable<MetodoPagoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MetodoPago update
   */
  export type MetodoPagoUpdateArgs = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude | null
    /**
     * The data needed to update a MetodoPago.
     */
    data: XOR<MetodoPagoUpdateInput, MetodoPagoUncheckedUpdateInput>
    /**
     * Choose, which MetodoPago to update.
     */
    where: MetodoPagoWhereUniqueInput
  }


  /**
   * MetodoPago updateMany
   */
  export type MetodoPagoUpdateManyArgs = {
    /**
     * The data used to update MetodoPagos.
     */
    data: XOR<MetodoPagoUpdateManyMutationInput, MetodoPagoUncheckedUpdateManyInput>
    /**
     * Filter which MetodoPagos to update
     */
    where?: MetodoPagoWhereInput
  }


  /**
   * MetodoPago upsert
   */
  export type MetodoPagoUpsertArgs = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude | null
    /**
     * The filter to search for the MetodoPago to update in case it exists.
     */
    where: MetodoPagoWhereUniqueInput
    /**
     * In case the MetodoPago found by the `where` argument doesn't exist, create a new MetodoPago with this data.
     */
    create: XOR<MetodoPagoCreateInput, MetodoPagoUncheckedCreateInput>
    /**
     * In case the MetodoPago was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MetodoPagoUpdateInput, MetodoPagoUncheckedUpdateInput>
  }


  /**
   * MetodoPago delete
   */
  export type MetodoPagoDeleteArgs = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude | null
    /**
     * Filter which MetodoPago to delete.
     */
    where: MetodoPagoWhereUniqueInput
  }


  /**
   * MetodoPago deleteMany
   */
  export type MetodoPagoDeleteManyArgs = {
    /**
     * Filter which MetodoPagos to delete
     */
    where?: MetodoPagoWhereInput
  }


  /**
   * MetodoPago.Compra
   */
  export type MetodoPago$CompraArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    where?: CompraWhereInput
    orderBy?: Enumerable<CompraOrderByWithRelationInput>
    cursor?: CompraWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompraScalarFieldEnum>
  }


  /**
   * MetodoPago without action
   */
  export type MetodoPagoArgs = {
    /**
     * Select specific fields to fetch from the MetodoPago
     */
    select?: MetodoPagoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MetodoPagoInclude | null
  }



  /**
   * Model Direccion
   */


  export type AggregateDireccion = {
    _count: DireccionCountAggregateOutputType | null
    _avg: DireccionAvgAggregateOutputType | null
    _sum: DireccionSumAggregateOutputType | null
    _min: DireccionMinAggregateOutputType | null
    _max: DireccionMaxAggregateOutputType | null
  }

  export type DireccionAvgAggregateOutputType = {
    id: number | null
    UsuarioId: number | null
  }

  export type DireccionSumAggregateOutputType = {
    id: number | null
    UsuarioId: number | null
  }

  export type DireccionMinAggregateOutputType = {
    id: number | null
    UsuarioId: number | null
    Provincia: string | null
    Canton: string | null
    Distrito: string | null
    Detalle: string | null
    CodigoPostal: string | null
    Telefono: string | null
    Titulo: string | null
  }

  export type DireccionMaxAggregateOutputType = {
    id: number | null
    UsuarioId: number | null
    Provincia: string | null
    Canton: string | null
    Distrito: string | null
    Detalle: string | null
    CodigoPostal: string | null
    Telefono: string | null
    Titulo: string | null
  }

  export type DireccionCountAggregateOutputType = {
    id: number
    UsuarioId: number
    Provincia: number
    Canton: number
    Distrito: number
    Detalle: number
    CodigoPostal: number
    Telefono: number
    Titulo: number
    _all: number
  }


  export type DireccionAvgAggregateInputType = {
    id?: true
    UsuarioId?: true
  }

  export type DireccionSumAggregateInputType = {
    id?: true
    UsuarioId?: true
  }

  export type DireccionMinAggregateInputType = {
    id?: true
    UsuarioId?: true
    Provincia?: true
    Canton?: true
    Distrito?: true
    Detalle?: true
    CodigoPostal?: true
    Telefono?: true
    Titulo?: true
  }

  export type DireccionMaxAggregateInputType = {
    id?: true
    UsuarioId?: true
    Provincia?: true
    Canton?: true
    Distrito?: true
    Detalle?: true
    CodigoPostal?: true
    Telefono?: true
    Titulo?: true
  }

  export type DireccionCountAggregateInputType = {
    id?: true
    UsuarioId?: true
    Provincia?: true
    Canton?: true
    Distrito?: true
    Detalle?: true
    CodigoPostal?: true
    Telefono?: true
    Titulo?: true
    _all?: true
  }

  export type DireccionAggregateArgs = {
    /**
     * Filter which Direccion to aggregate.
     */
    where?: DireccionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Direccions to fetch.
     */
    orderBy?: Enumerable<DireccionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DireccionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Direccions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Direccions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Direccions
    **/
    _count?: true | DireccionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DireccionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DireccionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DireccionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DireccionMaxAggregateInputType
  }

  export type GetDireccionAggregateType<T extends DireccionAggregateArgs> = {
        [P in keyof T & keyof AggregateDireccion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDireccion[P]>
      : GetScalarType<T[P], AggregateDireccion[P]>
  }




  export type DireccionGroupByArgs = {
    where?: DireccionWhereInput
    orderBy?: Enumerable<DireccionOrderByWithAggregationInput>
    by: DireccionScalarFieldEnum[]
    having?: DireccionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DireccionCountAggregateInputType | true
    _avg?: DireccionAvgAggregateInputType
    _sum?: DireccionSumAggregateInputType
    _min?: DireccionMinAggregateInputType
    _max?: DireccionMaxAggregateInputType
  }


  export type DireccionGroupByOutputType = {
    id: number
    UsuarioId: number
    Provincia: string
    Canton: string
    Distrito: string
    Detalle: string
    CodigoPostal: string
    Telefono: string
    Titulo: string
    _count: DireccionCountAggregateOutputType | null
    _avg: DireccionAvgAggregateOutputType | null
    _sum: DireccionSumAggregateOutputType | null
    _min: DireccionMinAggregateOutputType | null
    _max: DireccionMaxAggregateOutputType | null
  }

  type GetDireccionGroupByPayload<T extends DireccionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DireccionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DireccionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DireccionGroupByOutputType[P]>
            : GetScalarType<T[P], DireccionGroupByOutputType[P]>
        }
      >
    >


  export type DireccionSelect = {
    id?: boolean
    UsuarioId?: boolean
    Provincia?: boolean
    Canton?: boolean
    Distrito?: boolean
    Detalle?: boolean
    CodigoPostal?: boolean
    Telefono?: boolean
    Titulo?: boolean
    usuario?: boolean | UsuarioArgs
    Compra?: boolean | Direccion$CompraArgs
    _count?: boolean | DireccionCountOutputTypeArgs
  }


  export type DireccionInclude = {
    usuario?: boolean | UsuarioArgs
    Compra?: boolean | Direccion$CompraArgs
    _count?: boolean | DireccionCountOutputTypeArgs
  }

  export type DireccionGetPayload<S extends boolean | null | undefined | DireccionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Direccion :
    S extends undefined ? never :
    S extends { include: any } & (DireccionArgs | DireccionFindManyArgs)
    ? Direccion  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'usuario' ? UsuarioGetPayload<S['include'][P]> :
        P extends 'Compra' ? Array < CompraGetPayload<S['include'][P]>>  :
        P extends '_count' ? DireccionCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (DireccionArgs | DireccionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'usuario' ? UsuarioGetPayload<S['select'][P]> :
        P extends 'Compra' ? Array < CompraGetPayload<S['select'][P]>>  :
        P extends '_count' ? DireccionCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Direccion ? Direccion[P] : never
  } 
      : Direccion


  type DireccionCountArgs = 
    Omit<DireccionFindManyArgs, 'select' | 'include'> & {
      select?: DireccionCountAggregateInputType | true
    }

  export interface DireccionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Direccion that matches the filter.
     * @param {DireccionFindUniqueArgs} args - Arguments to find a Direccion
     * @example
     * // Get one Direccion
     * const direccion = await prisma.direccion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DireccionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DireccionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Direccion'> extends True ? Prisma__DireccionClient<DireccionGetPayload<T>> : Prisma__DireccionClient<DireccionGetPayload<T> | null, null>

    /**
     * Find one Direccion that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DireccionFindUniqueOrThrowArgs} args - Arguments to find a Direccion
     * @example
     * // Get one Direccion
     * const direccion = await prisma.direccion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DireccionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DireccionFindUniqueOrThrowArgs>
    ): Prisma__DireccionClient<DireccionGetPayload<T>>

    /**
     * Find the first Direccion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireccionFindFirstArgs} args - Arguments to find a Direccion
     * @example
     * // Get one Direccion
     * const direccion = await prisma.direccion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DireccionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DireccionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Direccion'> extends True ? Prisma__DireccionClient<DireccionGetPayload<T>> : Prisma__DireccionClient<DireccionGetPayload<T> | null, null>

    /**
     * Find the first Direccion that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireccionFindFirstOrThrowArgs} args - Arguments to find a Direccion
     * @example
     * // Get one Direccion
     * const direccion = await prisma.direccion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DireccionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DireccionFindFirstOrThrowArgs>
    ): Prisma__DireccionClient<DireccionGetPayload<T>>

    /**
     * Find zero or more Direccions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireccionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Direccions
     * const direccions = await prisma.direccion.findMany()
     * 
     * // Get first 10 Direccions
     * const direccions = await prisma.direccion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const direccionWithIdOnly = await prisma.direccion.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DireccionFindManyArgs>(
      args?: SelectSubset<T, DireccionFindManyArgs>
    ): Prisma.PrismaPromise<Array<DireccionGetPayload<T>>>

    /**
     * Create a Direccion.
     * @param {DireccionCreateArgs} args - Arguments to create a Direccion.
     * @example
     * // Create one Direccion
     * const Direccion = await prisma.direccion.create({
     *   data: {
     *     // ... data to create a Direccion
     *   }
     * })
     * 
    **/
    create<T extends DireccionCreateArgs>(
      args: SelectSubset<T, DireccionCreateArgs>
    ): Prisma__DireccionClient<DireccionGetPayload<T>>

    /**
     * Create many Direccions.
     *     @param {DireccionCreateManyArgs} args - Arguments to create many Direccions.
     *     @example
     *     // Create many Direccions
     *     const direccion = await prisma.direccion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DireccionCreateManyArgs>(
      args?: SelectSubset<T, DireccionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Direccion.
     * @param {DireccionDeleteArgs} args - Arguments to delete one Direccion.
     * @example
     * // Delete one Direccion
     * const Direccion = await prisma.direccion.delete({
     *   where: {
     *     // ... filter to delete one Direccion
     *   }
     * })
     * 
    **/
    delete<T extends DireccionDeleteArgs>(
      args: SelectSubset<T, DireccionDeleteArgs>
    ): Prisma__DireccionClient<DireccionGetPayload<T>>

    /**
     * Update one Direccion.
     * @param {DireccionUpdateArgs} args - Arguments to update one Direccion.
     * @example
     * // Update one Direccion
     * const direccion = await prisma.direccion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DireccionUpdateArgs>(
      args: SelectSubset<T, DireccionUpdateArgs>
    ): Prisma__DireccionClient<DireccionGetPayload<T>>

    /**
     * Delete zero or more Direccions.
     * @param {DireccionDeleteManyArgs} args - Arguments to filter Direccions to delete.
     * @example
     * // Delete a few Direccions
     * const { count } = await prisma.direccion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DireccionDeleteManyArgs>(
      args?: SelectSubset<T, DireccionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Direccions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireccionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Direccions
     * const direccion = await prisma.direccion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DireccionUpdateManyArgs>(
      args: SelectSubset<T, DireccionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Direccion.
     * @param {DireccionUpsertArgs} args - Arguments to update or create a Direccion.
     * @example
     * // Update or create a Direccion
     * const direccion = await prisma.direccion.upsert({
     *   create: {
     *     // ... data to create a Direccion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Direccion we want to update
     *   }
     * })
    **/
    upsert<T extends DireccionUpsertArgs>(
      args: SelectSubset<T, DireccionUpsertArgs>
    ): Prisma__DireccionClient<DireccionGetPayload<T>>

    /**
     * Count the number of Direccions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireccionCountArgs} args - Arguments to filter Direccions to count.
     * @example
     * // Count the number of Direccions
     * const count = await prisma.direccion.count({
     *   where: {
     *     // ... the filter for the Direccions we want to count
     *   }
     * })
    **/
    count<T extends DireccionCountArgs>(
      args?: Subset<T, DireccionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DireccionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Direccion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireccionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DireccionAggregateArgs>(args: Subset<T, DireccionAggregateArgs>): Prisma.PrismaPromise<GetDireccionAggregateType<T>>

    /**
     * Group by Direccion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireccionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DireccionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DireccionGroupByArgs['orderBy'] }
        : { orderBy?: DireccionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DireccionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDireccionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Direccion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DireccionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    usuario<T extends UsuarioArgs= {}>(args?: Subset<T, UsuarioArgs>): Prisma__UsuarioClient<UsuarioGetPayload<T> | Null>;

    Compra<T extends Direccion$CompraArgs= {}>(args?: Subset<T, Direccion$CompraArgs>): Prisma.PrismaPromise<Array<CompraGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Direccion base type for findUnique actions
   */
  export type DireccionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Direccion
     */
    select?: DireccionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DireccionInclude | null
    /**
     * Filter, which Direccion to fetch.
     */
    where: DireccionWhereUniqueInput
  }

  /**
   * Direccion findUnique
   */
  export interface DireccionFindUniqueArgs extends DireccionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Direccion findUniqueOrThrow
   */
  export type DireccionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Direccion
     */
    select?: DireccionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DireccionInclude | null
    /**
     * Filter, which Direccion to fetch.
     */
    where: DireccionWhereUniqueInput
  }


  /**
   * Direccion base type for findFirst actions
   */
  export type DireccionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Direccion
     */
    select?: DireccionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DireccionInclude | null
    /**
     * Filter, which Direccion to fetch.
     */
    where?: DireccionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Direccions to fetch.
     */
    orderBy?: Enumerable<DireccionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Direccions.
     */
    cursor?: DireccionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Direccions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Direccions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Direccions.
     */
    distinct?: Enumerable<DireccionScalarFieldEnum>
  }

  /**
   * Direccion findFirst
   */
  export interface DireccionFindFirstArgs extends DireccionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Direccion findFirstOrThrow
   */
  export type DireccionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Direccion
     */
    select?: DireccionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DireccionInclude | null
    /**
     * Filter, which Direccion to fetch.
     */
    where?: DireccionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Direccions to fetch.
     */
    orderBy?: Enumerable<DireccionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Direccions.
     */
    cursor?: DireccionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Direccions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Direccions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Direccions.
     */
    distinct?: Enumerable<DireccionScalarFieldEnum>
  }


  /**
   * Direccion findMany
   */
  export type DireccionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Direccion
     */
    select?: DireccionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DireccionInclude | null
    /**
     * Filter, which Direccions to fetch.
     */
    where?: DireccionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Direccions to fetch.
     */
    orderBy?: Enumerable<DireccionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Direccions.
     */
    cursor?: DireccionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Direccions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Direccions.
     */
    skip?: number
    distinct?: Enumerable<DireccionScalarFieldEnum>
  }


  /**
   * Direccion create
   */
  export type DireccionCreateArgs = {
    /**
     * Select specific fields to fetch from the Direccion
     */
    select?: DireccionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DireccionInclude | null
    /**
     * The data needed to create a Direccion.
     */
    data: XOR<DireccionCreateInput, DireccionUncheckedCreateInput>
  }


  /**
   * Direccion createMany
   */
  export type DireccionCreateManyArgs = {
    /**
     * The data used to create many Direccions.
     */
    data: Enumerable<DireccionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Direccion update
   */
  export type DireccionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Direccion
     */
    select?: DireccionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DireccionInclude | null
    /**
     * The data needed to update a Direccion.
     */
    data: XOR<DireccionUpdateInput, DireccionUncheckedUpdateInput>
    /**
     * Choose, which Direccion to update.
     */
    where: DireccionWhereUniqueInput
  }


  /**
   * Direccion updateMany
   */
  export type DireccionUpdateManyArgs = {
    /**
     * The data used to update Direccions.
     */
    data: XOR<DireccionUpdateManyMutationInput, DireccionUncheckedUpdateManyInput>
    /**
     * Filter which Direccions to update
     */
    where?: DireccionWhereInput
  }


  /**
   * Direccion upsert
   */
  export type DireccionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Direccion
     */
    select?: DireccionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DireccionInclude | null
    /**
     * The filter to search for the Direccion to update in case it exists.
     */
    where: DireccionWhereUniqueInput
    /**
     * In case the Direccion found by the `where` argument doesn't exist, create a new Direccion with this data.
     */
    create: XOR<DireccionCreateInput, DireccionUncheckedCreateInput>
    /**
     * In case the Direccion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DireccionUpdateInput, DireccionUncheckedUpdateInput>
  }


  /**
   * Direccion delete
   */
  export type DireccionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Direccion
     */
    select?: DireccionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DireccionInclude | null
    /**
     * Filter which Direccion to delete.
     */
    where: DireccionWhereUniqueInput
  }


  /**
   * Direccion deleteMany
   */
  export type DireccionDeleteManyArgs = {
    /**
     * Filter which Direccions to delete
     */
    where?: DireccionWhereInput
  }


  /**
   * Direccion.Compra
   */
  export type Direccion$CompraArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    where?: CompraWhereInput
    orderBy?: Enumerable<CompraOrderByWithRelationInput>
    cursor?: CompraWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompraScalarFieldEnum>
  }


  /**
   * Direccion without action
   */
  export type DireccionArgs = {
    /**
     * Select specific fields to fetch from the Direccion
     */
    select?: DireccionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DireccionInclude | null
  }



  /**
   * Model Producto
   */


  export type AggregateProducto = {
    _count: ProductoCountAggregateOutputType | null
    _avg: ProductoAvgAggregateOutputType | null
    _sum: ProductoSumAggregateOutputType | null
    _min: ProductoMinAggregateOutputType | null
    _max: ProductoMaxAggregateOutputType | null
  }

  export type ProductoAvgAggregateOutputType = {
    id: number | null
    Precio: Decimal | null
    Cantidad: number | null
    CategoriaId: number | null
    EstadoId: number | null
    VendedorId: number | null
  }

  export type ProductoSumAggregateOutputType = {
    id: number | null
    Precio: Decimal | null
    Cantidad: number | null
    CategoriaId: number | null
    EstadoId: number | null
    VendedorId: number | null
  }

  export type ProductoMinAggregateOutputType = {
    id: number | null
    Nombre: string | null
    Descripcion: string | null
    Precio: Decimal | null
    Cantidad: number | null
    CategoriaId: number | null
    EstadoId: number | null
    VendedorId: number | null
    Borrado: boolean | null
  }

  export type ProductoMaxAggregateOutputType = {
    id: number | null
    Nombre: string | null
    Descripcion: string | null
    Precio: Decimal | null
    Cantidad: number | null
    CategoriaId: number | null
    EstadoId: number | null
    VendedorId: number | null
    Borrado: boolean | null
  }

  export type ProductoCountAggregateOutputType = {
    id: number
    Nombre: number
    Descripcion: number
    Precio: number
    Cantidad: number
    CategoriaId: number
    EstadoId: number
    VendedorId: number
    Borrado: number
    _all: number
  }


  export type ProductoAvgAggregateInputType = {
    id?: true
    Precio?: true
    Cantidad?: true
    CategoriaId?: true
    EstadoId?: true
    VendedorId?: true
  }

  export type ProductoSumAggregateInputType = {
    id?: true
    Precio?: true
    Cantidad?: true
    CategoriaId?: true
    EstadoId?: true
    VendedorId?: true
  }

  export type ProductoMinAggregateInputType = {
    id?: true
    Nombre?: true
    Descripcion?: true
    Precio?: true
    Cantidad?: true
    CategoriaId?: true
    EstadoId?: true
    VendedorId?: true
    Borrado?: true
  }

  export type ProductoMaxAggregateInputType = {
    id?: true
    Nombre?: true
    Descripcion?: true
    Precio?: true
    Cantidad?: true
    CategoriaId?: true
    EstadoId?: true
    VendedorId?: true
    Borrado?: true
  }

  export type ProductoCountAggregateInputType = {
    id?: true
    Nombre?: true
    Descripcion?: true
    Precio?: true
    Cantidad?: true
    CategoriaId?: true
    EstadoId?: true
    VendedorId?: true
    Borrado?: true
    _all?: true
  }

  export type ProductoAggregateArgs = {
    /**
     * Filter which Producto to aggregate.
     */
    where?: ProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     */
    orderBy?: Enumerable<ProductoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Productos
    **/
    _count?: true | ProductoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductoMaxAggregateInputType
  }

  export type GetProductoAggregateType<T extends ProductoAggregateArgs> = {
        [P in keyof T & keyof AggregateProducto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducto[P]>
      : GetScalarType<T[P], AggregateProducto[P]>
  }




  export type ProductoGroupByArgs = {
    where?: ProductoWhereInput
    orderBy?: Enumerable<ProductoOrderByWithAggregationInput>
    by: ProductoScalarFieldEnum[]
    having?: ProductoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductoCountAggregateInputType | true
    _avg?: ProductoAvgAggregateInputType
    _sum?: ProductoSumAggregateInputType
    _min?: ProductoMinAggregateInputType
    _max?: ProductoMaxAggregateInputType
  }


  export type ProductoGroupByOutputType = {
    id: number
    Nombre: string
    Descripcion: string
    Precio: Decimal
    Cantidad: number
    CategoriaId: number
    EstadoId: number
    VendedorId: number
    Borrado: boolean
    _count: ProductoCountAggregateOutputType | null
    _avg: ProductoAvgAggregateOutputType | null
    _sum: ProductoSumAggregateOutputType | null
    _min: ProductoMinAggregateOutputType | null
    _max: ProductoMaxAggregateOutputType | null
  }

  type GetProductoGroupByPayload<T extends ProductoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProductoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductoGroupByOutputType[P]>
            : GetScalarType<T[P], ProductoGroupByOutputType[P]>
        }
      >
    >


  export type ProductoSelect = {
    id?: boolean
    Nombre?: boolean
    Descripcion?: boolean
    Precio?: boolean
    Cantidad?: boolean
    CategoriaId?: boolean
    EstadoId?: boolean
    VendedorId?: boolean
    Borrado?: boolean
    categoria?: boolean | CategoriaArgs
    estado?: boolean | EstadoProductoArgs
    vendedor?: boolean | UsuarioArgs
    FotoProducto?: boolean | Producto$FotoProductoArgs
    Mensaje?: boolean | Producto$MensajeArgs
    CompraDetalle?: boolean | Producto$CompraDetalleArgs
    _count?: boolean | ProductoCountOutputTypeArgs
  }


  export type ProductoInclude = {
    categoria?: boolean | CategoriaArgs
    estado?: boolean | EstadoProductoArgs
    vendedor?: boolean | UsuarioArgs
    FotoProducto?: boolean | Producto$FotoProductoArgs
    Mensaje?: boolean | Producto$MensajeArgs
    CompraDetalle?: boolean | Producto$CompraDetalleArgs
    _count?: boolean | ProductoCountOutputTypeArgs
  }

  export type ProductoGetPayload<S extends boolean | null | undefined | ProductoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Producto :
    S extends undefined ? never :
    S extends { include: any } & (ProductoArgs | ProductoFindManyArgs)
    ? Producto  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'categoria' ? CategoriaGetPayload<S['include'][P]> :
        P extends 'estado' ? EstadoProductoGetPayload<S['include'][P]> :
        P extends 'vendedor' ? UsuarioGetPayload<S['include'][P]> :
        P extends 'FotoProducto' ? Array < FotoProductoGetPayload<S['include'][P]>>  :
        P extends 'Mensaje' ? Array < MensajeGetPayload<S['include'][P]>>  :
        P extends 'CompraDetalle' ? Array < CompraDetalleGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProductoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ProductoArgs | ProductoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'categoria' ? CategoriaGetPayload<S['select'][P]> :
        P extends 'estado' ? EstadoProductoGetPayload<S['select'][P]> :
        P extends 'vendedor' ? UsuarioGetPayload<S['select'][P]> :
        P extends 'FotoProducto' ? Array < FotoProductoGetPayload<S['select'][P]>>  :
        P extends 'Mensaje' ? Array < MensajeGetPayload<S['select'][P]>>  :
        P extends 'CompraDetalle' ? Array < CompraDetalleGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProductoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Producto ? Producto[P] : never
  } 
      : Producto


  type ProductoCountArgs = 
    Omit<ProductoFindManyArgs, 'select' | 'include'> & {
      select?: ProductoCountAggregateInputType | true
    }

  export interface ProductoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Producto that matches the filter.
     * @param {ProductoFindUniqueArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Producto'> extends True ? Prisma__ProductoClient<ProductoGetPayload<T>> : Prisma__ProductoClient<ProductoGetPayload<T> | null, null>

    /**
     * Find one Producto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductoFindUniqueOrThrowArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProductoFindUniqueOrThrowArgs>
    ): Prisma__ProductoClient<ProductoGetPayload<T>>

    /**
     * Find the first Producto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoFindFirstArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Producto'> extends True ? Prisma__ProductoClient<ProductoGetPayload<T>> : Prisma__ProductoClient<ProductoGetPayload<T> | null, null>

    /**
     * Find the first Producto that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoFindFirstOrThrowArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProductoFindFirstOrThrowArgs>
    ): Prisma__ProductoClient<ProductoGetPayload<T>>

    /**
     * Find zero or more Productos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Productos
     * const productos = await prisma.producto.findMany()
     * 
     * // Get first 10 Productos
     * const productos = await prisma.producto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productoWithIdOnly = await prisma.producto.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductoFindManyArgs>(
      args?: SelectSubset<T, ProductoFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProductoGetPayload<T>>>

    /**
     * Create a Producto.
     * @param {ProductoCreateArgs} args - Arguments to create a Producto.
     * @example
     * // Create one Producto
     * const Producto = await prisma.producto.create({
     *   data: {
     *     // ... data to create a Producto
     *   }
     * })
     * 
    **/
    create<T extends ProductoCreateArgs>(
      args: SelectSubset<T, ProductoCreateArgs>
    ): Prisma__ProductoClient<ProductoGetPayload<T>>

    /**
     * Create many Productos.
     *     @param {ProductoCreateManyArgs} args - Arguments to create many Productos.
     *     @example
     *     // Create many Productos
     *     const producto = await prisma.producto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductoCreateManyArgs>(
      args?: SelectSubset<T, ProductoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Producto.
     * @param {ProductoDeleteArgs} args - Arguments to delete one Producto.
     * @example
     * // Delete one Producto
     * const Producto = await prisma.producto.delete({
     *   where: {
     *     // ... filter to delete one Producto
     *   }
     * })
     * 
    **/
    delete<T extends ProductoDeleteArgs>(
      args: SelectSubset<T, ProductoDeleteArgs>
    ): Prisma__ProductoClient<ProductoGetPayload<T>>

    /**
     * Update one Producto.
     * @param {ProductoUpdateArgs} args - Arguments to update one Producto.
     * @example
     * // Update one Producto
     * const producto = await prisma.producto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductoUpdateArgs>(
      args: SelectSubset<T, ProductoUpdateArgs>
    ): Prisma__ProductoClient<ProductoGetPayload<T>>

    /**
     * Delete zero or more Productos.
     * @param {ProductoDeleteManyArgs} args - Arguments to filter Productos to delete.
     * @example
     * // Delete a few Productos
     * const { count } = await prisma.producto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductoDeleteManyArgs>(
      args?: SelectSubset<T, ProductoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Productos
     * const producto = await prisma.producto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductoUpdateManyArgs>(
      args: SelectSubset<T, ProductoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Producto.
     * @param {ProductoUpsertArgs} args - Arguments to update or create a Producto.
     * @example
     * // Update or create a Producto
     * const producto = await prisma.producto.upsert({
     *   create: {
     *     // ... data to create a Producto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Producto we want to update
     *   }
     * })
    **/
    upsert<T extends ProductoUpsertArgs>(
      args: SelectSubset<T, ProductoUpsertArgs>
    ): Prisma__ProductoClient<ProductoGetPayload<T>>

    /**
     * Count the number of Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoCountArgs} args - Arguments to filter Productos to count.
     * @example
     * // Count the number of Productos
     * const count = await prisma.producto.count({
     *   where: {
     *     // ... the filter for the Productos we want to count
     *   }
     * })
    **/
    count<T extends ProductoCountArgs>(
      args?: Subset<T, ProductoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Producto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductoAggregateArgs>(args: Subset<T, ProductoAggregateArgs>): Prisma.PrismaPromise<GetProductoAggregateType<T>>

    /**
     * Group by Producto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductoGroupByArgs['orderBy'] }
        : { orderBy?: ProductoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Producto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    categoria<T extends CategoriaArgs= {}>(args?: Subset<T, CategoriaArgs>): Prisma__CategoriaClient<CategoriaGetPayload<T> | Null>;

    estado<T extends EstadoProductoArgs= {}>(args?: Subset<T, EstadoProductoArgs>): Prisma__EstadoProductoClient<EstadoProductoGetPayload<T> | Null>;

    vendedor<T extends UsuarioArgs= {}>(args?: Subset<T, UsuarioArgs>): Prisma__UsuarioClient<UsuarioGetPayload<T> | Null>;

    FotoProducto<T extends Producto$FotoProductoArgs= {}>(args?: Subset<T, Producto$FotoProductoArgs>): Prisma.PrismaPromise<Array<FotoProductoGetPayload<T>>| Null>;

    Mensaje<T extends Producto$MensajeArgs= {}>(args?: Subset<T, Producto$MensajeArgs>): Prisma.PrismaPromise<Array<MensajeGetPayload<T>>| Null>;

    CompraDetalle<T extends Producto$CompraDetalleArgs= {}>(args?: Subset<T, Producto$CompraDetalleArgs>): Prisma.PrismaPromise<Array<CompraDetalleGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Producto base type for findUnique actions
   */
  export type ProductoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductoInclude | null
    /**
     * Filter, which Producto to fetch.
     */
    where: ProductoWhereUniqueInput
  }

  /**
   * Producto findUnique
   */
  export interface ProductoFindUniqueArgs extends ProductoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Producto findUniqueOrThrow
   */
  export type ProductoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductoInclude | null
    /**
     * Filter, which Producto to fetch.
     */
    where: ProductoWhereUniqueInput
  }


  /**
   * Producto base type for findFirst actions
   */
  export type ProductoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductoInclude | null
    /**
     * Filter, which Producto to fetch.
     */
    where?: ProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     */
    orderBy?: Enumerable<ProductoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Productos.
     */
    cursor?: ProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Productos.
     */
    distinct?: Enumerable<ProductoScalarFieldEnum>
  }

  /**
   * Producto findFirst
   */
  export interface ProductoFindFirstArgs extends ProductoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Producto findFirstOrThrow
   */
  export type ProductoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductoInclude | null
    /**
     * Filter, which Producto to fetch.
     */
    where?: ProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     */
    orderBy?: Enumerable<ProductoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Productos.
     */
    cursor?: ProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Productos.
     */
    distinct?: Enumerable<ProductoScalarFieldEnum>
  }


  /**
   * Producto findMany
   */
  export type ProductoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductoInclude | null
    /**
     * Filter, which Productos to fetch.
     */
    where?: ProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     */
    orderBy?: Enumerable<ProductoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Productos.
     */
    cursor?: ProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     */
    skip?: number
    distinct?: Enumerable<ProductoScalarFieldEnum>
  }


  /**
   * Producto create
   */
  export type ProductoCreateArgs = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductoInclude | null
    /**
     * The data needed to create a Producto.
     */
    data: XOR<ProductoCreateInput, ProductoUncheckedCreateInput>
  }


  /**
   * Producto createMany
   */
  export type ProductoCreateManyArgs = {
    /**
     * The data used to create many Productos.
     */
    data: Enumerable<ProductoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Producto update
   */
  export type ProductoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductoInclude | null
    /**
     * The data needed to update a Producto.
     */
    data: XOR<ProductoUpdateInput, ProductoUncheckedUpdateInput>
    /**
     * Choose, which Producto to update.
     */
    where: ProductoWhereUniqueInput
  }


  /**
   * Producto updateMany
   */
  export type ProductoUpdateManyArgs = {
    /**
     * The data used to update Productos.
     */
    data: XOR<ProductoUpdateManyMutationInput, ProductoUncheckedUpdateManyInput>
    /**
     * Filter which Productos to update
     */
    where?: ProductoWhereInput
  }


  /**
   * Producto upsert
   */
  export type ProductoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductoInclude | null
    /**
     * The filter to search for the Producto to update in case it exists.
     */
    where: ProductoWhereUniqueInput
    /**
     * In case the Producto found by the `where` argument doesn't exist, create a new Producto with this data.
     */
    create: XOR<ProductoCreateInput, ProductoUncheckedCreateInput>
    /**
     * In case the Producto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductoUpdateInput, ProductoUncheckedUpdateInput>
  }


  /**
   * Producto delete
   */
  export type ProductoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductoInclude | null
    /**
     * Filter which Producto to delete.
     */
    where: ProductoWhereUniqueInput
  }


  /**
   * Producto deleteMany
   */
  export type ProductoDeleteManyArgs = {
    /**
     * Filter which Productos to delete
     */
    where?: ProductoWhereInput
  }


  /**
   * Producto.FotoProducto
   */
  export type Producto$FotoProductoArgs = {
    /**
     * Select specific fields to fetch from the FotoProducto
     */
    select?: FotoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FotoProductoInclude | null
    where?: FotoProductoWhereInput
    orderBy?: Enumerable<FotoProductoOrderByWithRelationInput>
    cursor?: FotoProductoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FotoProductoScalarFieldEnum>
  }


  /**
   * Producto.Mensaje
   */
  export type Producto$MensajeArgs = {
    /**
     * Select specific fields to fetch from the Mensaje
     */
    select?: MensajeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensajeInclude | null
    where?: MensajeWhereInput
    orderBy?: Enumerable<MensajeOrderByWithRelationInput>
    cursor?: MensajeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MensajeScalarFieldEnum>
  }


  /**
   * Producto.CompraDetalle
   */
  export type Producto$CompraDetalleArgs = {
    /**
     * Select specific fields to fetch from the CompraDetalle
     */
    select?: CompraDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraDetalleInclude | null
    where?: CompraDetalleWhereInput
    orderBy?: Enumerable<CompraDetalleOrderByWithRelationInput>
    cursor?: CompraDetalleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompraDetalleScalarFieldEnum>
  }


  /**
   * Producto without action
   */
  export type ProductoArgs = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductoInclude | null
  }



  /**
   * Model Categoria
   */


  export type AggregateCategoria = {
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  export type CategoriaAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriaSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriaMinAggregateOutputType = {
    id: number | null
    Descripcion: string | null
    Borrado: boolean | null
  }

  export type CategoriaMaxAggregateOutputType = {
    id: number | null
    Descripcion: string | null
    Borrado: boolean | null
  }

  export type CategoriaCountAggregateOutputType = {
    id: number
    Descripcion: number
    Borrado: number
    _all: number
  }


  export type CategoriaAvgAggregateInputType = {
    id?: true
  }

  export type CategoriaSumAggregateInputType = {
    id?: true
  }

  export type CategoriaMinAggregateInputType = {
    id?: true
    Descripcion?: true
    Borrado?: true
  }

  export type CategoriaMaxAggregateInputType = {
    id?: true
    Descripcion?: true
    Borrado?: true
  }

  export type CategoriaCountAggregateInputType = {
    id?: true
    Descripcion?: true
    Borrado?: true
    _all?: true
  }

  export type CategoriaAggregateArgs = {
    /**
     * Filter which Categoria to aggregate.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: Enumerable<CategoriaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categorias
    **/
    _count?: true | CategoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaMaxAggregateInputType
  }

  export type GetCategoriaAggregateType<T extends CategoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoria[P]>
      : GetScalarType<T[P], AggregateCategoria[P]>
  }




  export type CategoriaGroupByArgs = {
    where?: CategoriaWhereInput
    orderBy?: Enumerable<CategoriaOrderByWithAggregationInput>
    by: CategoriaScalarFieldEnum[]
    having?: CategoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaCountAggregateInputType | true
    _avg?: CategoriaAvgAggregateInputType
    _sum?: CategoriaSumAggregateInputType
    _min?: CategoriaMinAggregateInputType
    _max?: CategoriaMaxAggregateInputType
  }


  export type CategoriaGroupByOutputType = {
    id: number
    Descripcion: string
    Borrado: boolean
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  type GetCategoriaGroupByPayload<T extends CategoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CategoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
        }
      >
    >


  export type CategoriaSelect = {
    id?: boolean
    Descripcion?: boolean
    Borrado?: boolean
    Producto?: boolean | Categoria$ProductoArgs
    _count?: boolean | CategoriaCountOutputTypeArgs
  }


  export type CategoriaInclude = {
    Producto?: boolean | Categoria$ProductoArgs
    _count?: boolean | CategoriaCountOutputTypeArgs
  }

  export type CategoriaGetPayload<S extends boolean | null | undefined | CategoriaArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Categoria :
    S extends undefined ? never :
    S extends { include: any } & (CategoriaArgs | CategoriaFindManyArgs)
    ? Categoria  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Producto' ? Array < ProductoGetPayload<S['include'][P]>>  :
        P extends '_count' ? CategoriaCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CategoriaArgs | CategoriaFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Producto' ? Array < ProductoGetPayload<S['select'][P]>>  :
        P extends '_count' ? CategoriaCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Categoria ? Categoria[P] : never
  } 
      : Categoria


  type CategoriaCountArgs = 
    Omit<CategoriaFindManyArgs, 'select' | 'include'> & {
      select?: CategoriaCountAggregateInputType | true
    }

  export interface CategoriaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Categoria that matches the filter.
     * @param {CategoriaFindUniqueArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoriaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoriaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Categoria'> extends True ? Prisma__CategoriaClient<CategoriaGetPayload<T>> : Prisma__CategoriaClient<CategoriaGetPayload<T> | null, null>

    /**
     * Find one Categoria that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoriaFindUniqueOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoriaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategoriaFindUniqueOrThrowArgs>
    ): Prisma__CategoriaClient<CategoriaGetPayload<T>>

    /**
     * Find the first Categoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoriaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoriaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Categoria'> extends True ? Prisma__CategoriaClient<CategoriaGetPayload<T>> : Prisma__CategoriaClient<CategoriaGetPayload<T> | null, null>

    /**
     * Find the first Categoria that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoriaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategoriaFindFirstOrThrowArgs>
    ): Prisma__CategoriaClient<CategoriaGetPayload<T>>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categoria.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categoria.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriaWithIdOnly = await prisma.categoria.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoriaFindManyArgs>(
      args?: SelectSubset<T, CategoriaFindManyArgs>
    ): Prisma.PrismaPromise<Array<CategoriaGetPayload<T>>>

    /**
     * Create a Categoria.
     * @param {CategoriaCreateArgs} args - Arguments to create a Categoria.
     * @example
     * // Create one Categoria
     * const Categoria = await prisma.categoria.create({
     *   data: {
     *     // ... data to create a Categoria
     *   }
     * })
     * 
    **/
    create<T extends CategoriaCreateArgs>(
      args: SelectSubset<T, CategoriaCreateArgs>
    ): Prisma__CategoriaClient<CategoriaGetPayload<T>>

    /**
     * Create many Categorias.
     *     @param {CategoriaCreateManyArgs} args - Arguments to create many Categorias.
     *     @example
     *     // Create many Categorias
     *     const categoria = await prisma.categoria.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoriaCreateManyArgs>(
      args?: SelectSubset<T, CategoriaCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categoria.
     * @param {CategoriaDeleteArgs} args - Arguments to delete one Categoria.
     * @example
     * // Delete one Categoria
     * const Categoria = await prisma.categoria.delete({
     *   where: {
     *     // ... filter to delete one Categoria
     *   }
     * })
     * 
    **/
    delete<T extends CategoriaDeleteArgs>(
      args: SelectSubset<T, CategoriaDeleteArgs>
    ): Prisma__CategoriaClient<CategoriaGetPayload<T>>

    /**
     * Update one Categoria.
     * @param {CategoriaUpdateArgs} args - Arguments to update one Categoria.
     * @example
     * // Update one Categoria
     * const categoria = await prisma.categoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoriaUpdateArgs>(
      args: SelectSubset<T, CategoriaUpdateArgs>
    ): Prisma__CategoriaClient<CategoriaGetPayload<T>>

    /**
     * Delete zero or more Categorias.
     * @param {CategoriaDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoriaDeleteManyArgs>(
      args?: SelectSubset<T, CategoriaDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categoria = await prisma.categoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoriaUpdateManyArgs>(
      args: SelectSubset<T, CategoriaUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categoria.
     * @param {CategoriaUpsertArgs} args - Arguments to update or create a Categoria.
     * @example
     * // Update or create a Categoria
     * const categoria = await prisma.categoria.upsert({
     *   create: {
     *     // ... data to create a Categoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categoria we want to update
     *   }
     * })
    **/
    upsert<T extends CategoriaUpsertArgs>(
      args: SelectSubset<T, CategoriaUpsertArgs>
    ): Prisma__CategoriaClient<CategoriaGetPayload<T>>

    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categoria.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends CategoriaCountArgs>(
      args?: Subset<T, CategoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaAggregateArgs>(args: Subset<T, CategoriaAggregateArgs>): Prisma.PrismaPromise<GetCategoriaAggregateType<T>>

    /**
     * Group by Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriaGroupByArgs['orderBy'] }
        : { orderBy?: CategoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Categoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoriaClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Producto<T extends Categoria$ProductoArgs= {}>(args?: Subset<T, Categoria$ProductoArgs>): Prisma.PrismaPromise<Array<ProductoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Categoria base type for findUnique actions
   */
  export type CategoriaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria findUnique
   */
  export interface CategoriaFindUniqueArgs extends CategoriaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Categoria findUniqueOrThrow
   */
  export type CategoriaFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
  }


  /**
   * Categoria base type for findFirst actions
   */
  export type CategoriaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: Enumerable<CategoriaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: Enumerable<CategoriaScalarFieldEnum>
  }

  /**
   * Categoria findFirst
   */
  export interface CategoriaFindFirstArgs extends CategoriaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Categoria findFirstOrThrow
   */
  export type CategoriaFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: Enumerable<CategoriaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: Enumerable<CategoriaScalarFieldEnum>
  }


  /**
   * Categoria findMany
   */
  export type CategoriaFindManyArgs = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude | null
    /**
     * Filter, which Categorias to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: Enumerable<CategoriaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    distinct?: Enumerable<CategoriaScalarFieldEnum>
  }


  /**
   * Categoria create
   */
  export type CategoriaCreateArgs = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude | null
    /**
     * The data needed to create a Categoria.
     */
    data: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
  }


  /**
   * Categoria createMany
   */
  export type CategoriaCreateManyArgs = {
    /**
     * The data used to create many Categorias.
     */
    data: Enumerable<CategoriaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Categoria update
   */
  export type CategoriaUpdateArgs = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude | null
    /**
     * The data needed to update a Categoria.
     */
    data: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
    /**
     * Choose, which Categoria to update.
     */
    where: CategoriaWhereUniqueInput
  }


  /**
   * Categoria updateMany
   */
  export type CategoriaUpdateManyArgs = {
    /**
     * The data used to update Categorias.
     */
    data: XOR<CategoriaUpdateManyMutationInput, CategoriaUncheckedUpdateManyInput>
    /**
     * Filter which Categorias to update
     */
    where?: CategoriaWhereInput
  }


  /**
   * Categoria upsert
   */
  export type CategoriaUpsertArgs = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude | null
    /**
     * The filter to search for the Categoria to update in case it exists.
     */
    where: CategoriaWhereUniqueInput
    /**
     * In case the Categoria found by the `where` argument doesn't exist, create a new Categoria with this data.
     */
    create: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
    /**
     * In case the Categoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
  }


  /**
   * Categoria delete
   */
  export type CategoriaDeleteArgs = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude | null
    /**
     * Filter which Categoria to delete.
     */
    where: CategoriaWhereUniqueInput
  }


  /**
   * Categoria deleteMany
   */
  export type CategoriaDeleteManyArgs = {
    /**
     * Filter which Categorias to delete
     */
    where?: CategoriaWhereInput
  }


  /**
   * Categoria.Producto
   */
  export type Categoria$ProductoArgs = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductoInclude | null
    where?: ProductoWhereInput
    orderBy?: Enumerable<ProductoOrderByWithRelationInput>
    cursor?: ProductoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductoScalarFieldEnum>
  }


  /**
   * Categoria without action
   */
  export type CategoriaArgs = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude | null
  }



  /**
   * Model EstadoProducto
   */


  export type AggregateEstadoProducto = {
    _count: EstadoProductoCountAggregateOutputType | null
    _avg: EstadoProductoAvgAggregateOutputType | null
    _sum: EstadoProductoSumAggregateOutputType | null
    _min: EstadoProductoMinAggregateOutputType | null
    _max: EstadoProductoMaxAggregateOutputType | null
  }

  export type EstadoProductoAvgAggregateOutputType = {
    id: number | null
  }

  export type EstadoProductoSumAggregateOutputType = {
    id: number | null
  }

  export type EstadoProductoMinAggregateOutputType = {
    id: number | null
    Descripcion: string | null
    Borrado: boolean | null
  }

  export type EstadoProductoMaxAggregateOutputType = {
    id: number | null
    Descripcion: string | null
    Borrado: boolean | null
  }

  export type EstadoProductoCountAggregateOutputType = {
    id: number
    Descripcion: number
    Borrado: number
    _all: number
  }


  export type EstadoProductoAvgAggregateInputType = {
    id?: true
  }

  export type EstadoProductoSumAggregateInputType = {
    id?: true
  }

  export type EstadoProductoMinAggregateInputType = {
    id?: true
    Descripcion?: true
    Borrado?: true
  }

  export type EstadoProductoMaxAggregateInputType = {
    id?: true
    Descripcion?: true
    Borrado?: true
  }

  export type EstadoProductoCountAggregateInputType = {
    id?: true
    Descripcion?: true
    Borrado?: true
    _all?: true
  }

  export type EstadoProductoAggregateArgs = {
    /**
     * Filter which EstadoProducto to aggregate.
     */
    where?: EstadoProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstadoProductos to fetch.
     */
    orderBy?: Enumerable<EstadoProductoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EstadoProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstadoProductos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstadoProductos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EstadoProductos
    **/
    _count?: true | EstadoProductoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EstadoProductoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EstadoProductoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EstadoProductoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EstadoProductoMaxAggregateInputType
  }

  export type GetEstadoProductoAggregateType<T extends EstadoProductoAggregateArgs> = {
        [P in keyof T & keyof AggregateEstadoProducto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEstadoProducto[P]>
      : GetScalarType<T[P], AggregateEstadoProducto[P]>
  }




  export type EstadoProductoGroupByArgs = {
    where?: EstadoProductoWhereInput
    orderBy?: Enumerable<EstadoProductoOrderByWithAggregationInput>
    by: EstadoProductoScalarFieldEnum[]
    having?: EstadoProductoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EstadoProductoCountAggregateInputType | true
    _avg?: EstadoProductoAvgAggregateInputType
    _sum?: EstadoProductoSumAggregateInputType
    _min?: EstadoProductoMinAggregateInputType
    _max?: EstadoProductoMaxAggregateInputType
  }


  export type EstadoProductoGroupByOutputType = {
    id: number
    Descripcion: string
    Borrado: boolean
    _count: EstadoProductoCountAggregateOutputType | null
    _avg: EstadoProductoAvgAggregateOutputType | null
    _sum: EstadoProductoSumAggregateOutputType | null
    _min: EstadoProductoMinAggregateOutputType | null
    _max: EstadoProductoMaxAggregateOutputType | null
  }

  type GetEstadoProductoGroupByPayload<T extends EstadoProductoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EstadoProductoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EstadoProductoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EstadoProductoGroupByOutputType[P]>
            : GetScalarType<T[P], EstadoProductoGroupByOutputType[P]>
        }
      >
    >


  export type EstadoProductoSelect = {
    id?: boolean
    Descripcion?: boolean
    Borrado?: boolean
    Producto?: boolean | EstadoProducto$ProductoArgs
    _count?: boolean | EstadoProductoCountOutputTypeArgs
  }


  export type EstadoProductoInclude = {
    Producto?: boolean | EstadoProducto$ProductoArgs
    _count?: boolean | EstadoProductoCountOutputTypeArgs
  }

  export type EstadoProductoGetPayload<S extends boolean | null | undefined | EstadoProductoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? EstadoProducto :
    S extends undefined ? never :
    S extends { include: any } & (EstadoProductoArgs | EstadoProductoFindManyArgs)
    ? EstadoProducto  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Producto' ? Array < ProductoGetPayload<S['include'][P]>>  :
        P extends '_count' ? EstadoProductoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EstadoProductoArgs | EstadoProductoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Producto' ? Array < ProductoGetPayload<S['select'][P]>>  :
        P extends '_count' ? EstadoProductoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof EstadoProducto ? EstadoProducto[P] : never
  } 
      : EstadoProducto


  type EstadoProductoCountArgs = 
    Omit<EstadoProductoFindManyArgs, 'select' | 'include'> & {
      select?: EstadoProductoCountAggregateInputType | true
    }

  export interface EstadoProductoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one EstadoProducto that matches the filter.
     * @param {EstadoProductoFindUniqueArgs} args - Arguments to find a EstadoProducto
     * @example
     * // Get one EstadoProducto
     * const estadoProducto = await prisma.estadoProducto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EstadoProductoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EstadoProductoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'EstadoProducto'> extends True ? Prisma__EstadoProductoClient<EstadoProductoGetPayload<T>> : Prisma__EstadoProductoClient<EstadoProductoGetPayload<T> | null, null>

    /**
     * Find one EstadoProducto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EstadoProductoFindUniqueOrThrowArgs} args - Arguments to find a EstadoProducto
     * @example
     * // Get one EstadoProducto
     * const estadoProducto = await prisma.estadoProducto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EstadoProductoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EstadoProductoFindUniqueOrThrowArgs>
    ): Prisma__EstadoProductoClient<EstadoProductoGetPayload<T>>

    /**
     * Find the first EstadoProducto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoProductoFindFirstArgs} args - Arguments to find a EstadoProducto
     * @example
     * // Get one EstadoProducto
     * const estadoProducto = await prisma.estadoProducto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EstadoProductoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EstadoProductoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'EstadoProducto'> extends True ? Prisma__EstadoProductoClient<EstadoProductoGetPayload<T>> : Prisma__EstadoProductoClient<EstadoProductoGetPayload<T> | null, null>

    /**
     * Find the first EstadoProducto that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoProductoFindFirstOrThrowArgs} args - Arguments to find a EstadoProducto
     * @example
     * // Get one EstadoProducto
     * const estadoProducto = await prisma.estadoProducto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EstadoProductoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EstadoProductoFindFirstOrThrowArgs>
    ): Prisma__EstadoProductoClient<EstadoProductoGetPayload<T>>

    /**
     * Find zero or more EstadoProductos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoProductoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EstadoProductos
     * const estadoProductos = await prisma.estadoProducto.findMany()
     * 
     * // Get first 10 EstadoProductos
     * const estadoProductos = await prisma.estadoProducto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const estadoProductoWithIdOnly = await prisma.estadoProducto.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EstadoProductoFindManyArgs>(
      args?: SelectSubset<T, EstadoProductoFindManyArgs>
    ): Prisma.PrismaPromise<Array<EstadoProductoGetPayload<T>>>

    /**
     * Create a EstadoProducto.
     * @param {EstadoProductoCreateArgs} args - Arguments to create a EstadoProducto.
     * @example
     * // Create one EstadoProducto
     * const EstadoProducto = await prisma.estadoProducto.create({
     *   data: {
     *     // ... data to create a EstadoProducto
     *   }
     * })
     * 
    **/
    create<T extends EstadoProductoCreateArgs>(
      args: SelectSubset<T, EstadoProductoCreateArgs>
    ): Prisma__EstadoProductoClient<EstadoProductoGetPayload<T>>

    /**
     * Create many EstadoProductos.
     *     @param {EstadoProductoCreateManyArgs} args - Arguments to create many EstadoProductos.
     *     @example
     *     // Create many EstadoProductos
     *     const estadoProducto = await prisma.estadoProducto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EstadoProductoCreateManyArgs>(
      args?: SelectSubset<T, EstadoProductoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EstadoProducto.
     * @param {EstadoProductoDeleteArgs} args - Arguments to delete one EstadoProducto.
     * @example
     * // Delete one EstadoProducto
     * const EstadoProducto = await prisma.estadoProducto.delete({
     *   where: {
     *     // ... filter to delete one EstadoProducto
     *   }
     * })
     * 
    **/
    delete<T extends EstadoProductoDeleteArgs>(
      args: SelectSubset<T, EstadoProductoDeleteArgs>
    ): Prisma__EstadoProductoClient<EstadoProductoGetPayload<T>>

    /**
     * Update one EstadoProducto.
     * @param {EstadoProductoUpdateArgs} args - Arguments to update one EstadoProducto.
     * @example
     * // Update one EstadoProducto
     * const estadoProducto = await prisma.estadoProducto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EstadoProductoUpdateArgs>(
      args: SelectSubset<T, EstadoProductoUpdateArgs>
    ): Prisma__EstadoProductoClient<EstadoProductoGetPayload<T>>

    /**
     * Delete zero or more EstadoProductos.
     * @param {EstadoProductoDeleteManyArgs} args - Arguments to filter EstadoProductos to delete.
     * @example
     * // Delete a few EstadoProductos
     * const { count } = await prisma.estadoProducto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EstadoProductoDeleteManyArgs>(
      args?: SelectSubset<T, EstadoProductoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EstadoProductos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoProductoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EstadoProductos
     * const estadoProducto = await prisma.estadoProducto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EstadoProductoUpdateManyArgs>(
      args: SelectSubset<T, EstadoProductoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EstadoProducto.
     * @param {EstadoProductoUpsertArgs} args - Arguments to update or create a EstadoProducto.
     * @example
     * // Update or create a EstadoProducto
     * const estadoProducto = await prisma.estadoProducto.upsert({
     *   create: {
     *     // ... data to create a EstadoProducto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EstadoProducto we want to update
     *   }
     * })
    **/
    upsert<T extends EstadoProductoUpsertArgs>(
      args: SelectSubset<T, EstadoProductoUpsertArgs>
    ): Prisma__EstadoProductoClient<EstadoProductoGetPayload<T>>

    /**
     * Count the number of EstadoProductos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoProductoCountArgs} args - Arguments to filter EstadoProductos to count.
     * @example
     * // Count the number of EstadoProductos
     * const count = await prisma.estadoProducto.count({
     *   where: {
     *     // ... the filter for the EstadoProductos we want to count
     *   }
     * })
    **/
    count<T extends EstadoProductoCountArgs>(
      args?: Subset<T, EstadoProductoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EstadoProductoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EstadoProducto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoProductoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EstadoProductoAggregateArgs>(args: Subset<T, EstadoProductoAggregateArgs>): Prisma.PrismaPromise<GetEstadoProductoAggregateType<T>>

    /**
     * Group by EstadoProducto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoProductoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EstadoProductoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EstadoProductoGroupByArgs['orderBy'] }
        : { orderBy?: EstadoProductoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EstadoProductoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEstadoProductoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for EstadoProducto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EstadoProductoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Producto<T extends EstadoProducto$ProductoArgs= {}>(args?: Subset<T, EstadoProducto$ProductoArgs>): Prisma.PrismaPromise<Array<ProductoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * EstadoProducto base type for findUnique actions
   */
  export type EstadoProductoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the EstadoProducto
     */
    select?: EstadoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoProductoInclude | null
    /**
     * Filter, which EstadoProducto to fetch.
     */
    where: EstadoProductoWhereUniqueInput
  }

  /**
   * EstadoProducto findUnique
   */
  export interface EstadoProductoFindUniqueArgs extends EstadoProductoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EstadoProducto findUniqueOrThrow
   */
  export type EstadoProductoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the EstadoProducto
     */
    select?: EstadoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoProductoInclude | null
    /**
     * Filter, which EstadoProducto to fetch.
     */
    where: EstadoProductoWhereUniqueInput
  }


  /**
   * EstadoProducto base type for findFirst actions
   */
  export type EstadoProductoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the EstadoProducto
     */
    select?: EstadoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoProductoInclude | null
    /**
     * Filter, which EstadoProducto to fetch.
     */
    where?: EstadoProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstadoProductos to fetch.
     */
    orderBy?: Enumerable<EstadoProductoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EstadoProductos.
     */
    cursor?: EstadoProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstadoProductos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstadoProductos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EstadoProductos.
     */
    distinct?: Enumerable<EstadoProductoScalarFieldEnum>
  }

  /**
   * EstadoProducto findFirst
   */
  export interface EstadoProductoFindFirstArgs extends EstadoProductoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EstadoProducto findFirstOrThrow
   */
  export type EstadoProductoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the EstadoProducto
     */
    select?: EstadoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoProductoInclude | null
    /**
     * Filter, which EstadoProducto to fetch.
     */
    where?: EstadoProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstadoProductos to fetch.
     */
    orderBy?: Enumerable<EstadoProductoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EstadoProductos.
     */
    cursor?: EstadoProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstadoProductos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstadoProductos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EstadoProductos.
     */
    distinct?: Enumerable<EstadoProductoScalarFieldEnum>
  }


  /**
   * EstadoProducto findMany
   */
  export type EstadoProductoFindManyArgs = {
    /**
     * Select specific fields to fetch from the EstadoProducto
     */
    select?: EstadoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoProductoInclude | null
    /**
     * Filter, which EstadoProductos to fetch.
     */
    where?: EstadoProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstadoProductos to fetch.
     */
    orderBy?: Enumerable<EstadoProductoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EstadoProductos.
     */
    cursor?: EstadoProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstadoProductos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstadoProductos.
     */
    skip?: number
    distinct?: Enumerable<EstadoProductoScalarFieldEnum>
  }


  /**
   * EstadoProducto create
   */
  export type EstadoProductoCreateArgs = {
    /**
     * Select specific fields to fetch from the EstadoProducto
     */
    select?: EstadoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoProductoInclude | null
    /**
     * The data needed to create a EstadoProducto.
     */
    data: XOR<EstadoProductoCreateInput, EstadoProductoUncheckedCreateInput>
  }


  /**
   * EstadoProducto createMany
   */
  export type EstadoProductoCreateManyArgs = {
    /**
     * The data used to create many EstadoProductos.
     */
    data: Enumerable<EstadoProductoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * EstadoProducto update
   */
  export type EstadoProductoUpdateArgs = {
    /**
     * Select specific fields to fetch from the EstadoProducto
     */
    select?: EstadoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoProductoInclude | null
    /**
     * The data needed to update a EstadoProducto.
     */
    data: XOR<EstadoProductoUpdateInput, EstadoProductoUncheckedUpdateInput>
    /**
     * Choose, which EstadoProducto to update.
     */
    where: EstadoProductoWhereUniqueInput
  }


  /**
   * EstadoProducto updateMany
   */
  export type EstadoProductoUpdateManyArgs = {
    /**
     * The data used to update EstadoProductos.
     */
    data: XOR<EstadoProductoUpdateManyMutationInput, EstadoProductoUncheckedUpdateManyInput>
    /**
     * Filter which EstadoProductos to update
     */
    where?: EstadoProductoWhereInput
  }


  /**
   * EstadoProducto upsert
   */
  export type EstadoProductoUpsertArgs = {
    /**
     * Select specific fields to fetch from the EstadoProducto
     */
    select?: EstadoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoProductoInclude | null
    /**
     * The filter to search for the EstadoProducto to update in case it exists.
     */
    where: EstadoProductoWhereUniqueInput
    /**
     * In case the EstadoProducto found by the `where` argument doesn't exist, create a new EstadoProducto with this data.
     */
    create: XOR<EstadoProductoCreateInput, EstadoProductoUncheckedCreateInput>
    /**
     * In case the EstadoProducto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EstadoProductoUpdateInput, EstadoProductoUncheckedUpdateInput>
  }


  /**
   * EstadoProducto delete
   */
  export type EstadoProductoDeleteArgs = {
    /**
     * Select specific fields to fetch from the EstadoProducto
     */
    select?: EstadoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoProductoInclude | null
    /**
     * Filter which EstadoProducto to delete.
     */
    where: EstadoProductoWhereUniqueInput
  }


  /**
   * EstadoProducto deleteMany
   */
  export type EstadoProductoDeleteManyArgs = {
    /**
     * Filter which EstadoProductos to delete
     */
    where?: EstadoProductoWhereInput
  }


  /**
   * EstadoProducto.Producto
   */
  export type EstadoProducto$ProductoArgs = {
    /**
     * Select specific fields to fetch from the Producto
     */
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductoInclude | null
    where?: ProductoWhereInput
    orderBy?: Enumerable<ProductoOrderByWithRelationInput>
    cursor?: ProductoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductoScalarFieldEnum>
  }


  /**
   * EstadoProducto without action
   */
  export type EstadoProductoArgs = {
    /**
     * Select specific fields to fetch from the EstadoProducto
     */
    select?: EstadoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoProductoInclude | null
  }



  /**
   * Model FotoProducto
   */


  export type AggregateFotoProducto = {
    _count: FotoProductoCountAggregateOutputType | null
    _avg: FotoProductoAvgAggregateOutputType | null
    _sum: FotoProductoSumAggregateOutputType | null
    _min: FotoProductoMinAggregateOutputType | null
    _max: FotoProductoMaxAggregateOutputType | null
  }

  export type FotoProductoAvgAggregateOutputType = {
    id: number | null
    ProductoId: number | null
  }

  export type FotoProductoSumAggregateOutputType = {
    id: number | null
    ProductoId: number | null
  }

  export type FotoProductoMinAggregateOutputType = {
    id: number | null
    ProductoId: number | null
    Foto: string | null
    Borrado: boolean | null
  }

  export type FotoProductoMaxAggregateOutputType = {
    id: number | null
    ProductoId: number | null
    Foto: string | null
    Borrado: boolean | null
  }

  export type FotoProductoCountAggregateOutputType = {
    id: number
    ProductoId: number
    Foto: number
    Borrado: number
    _all: number
  }


  export type FotoProductoAvgAggregateInputType = {
    id?: true
    ProductoId?: true
  }

  export type FotoProductoSumAggregateInputType = {
    id?: true
    ProductoId?: true
  }

  export type FotoProductoMinAggregateInputType = {
    id?: true
    ProductoId?: true
    Foto?: true
    Borrado?: true
  }

  export type FotoProductoMaxAggregateInputType = {
    id?: true
    ProductoId?: true
    Foto?: true
    Borrado?: true
  }

  export type FotoProductoCountAggregateInputType = {
    id?: true
    ProductoId?: true
    Foto?: true
    Borrado?: true
    _all?: true
  }

  export type FotoProductoAggregateArgs = {
    /**
     * Filter which FotoProducto to aggregate.
     */
    where?: FotoProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FotoProductos to fetch.
     */
    orderBy?: Enumerable<FotoProductoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FotoProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FotoProductos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FotoProductos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FotoProductos
    **/
    _count?: true | FotoProductoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FotoProductoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FotoProductoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FotoProductoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FotoProductoMaxAggregateInputType
  }

  export type GetFotoProductoAggregateType<T extends FotoProductoAggregateArgs> = {
        [P in keyof T & keyof AggregateFotoProducto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFotoProducto[P]>
      : GetScalarType<T[P], AggregateFotoProducto[P]>
  }




  export type FotoProductoGroupByArgs = {
    where?: FotoProductoWhereInput
    orderBy?: Enumerable<FotoProductoOrderByWithAggregationInput>
    by: FotoProductoScalarFieldEnum[]
    having?: FotoProductoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FotoProductoCountAggregateInputType | true
    _avg?: FotoProductoAvgAggregateInputType
    _sum?: FotoProductoSumAggregateInputType
    _min?: FotoProductoMinAggregateInputType
    _max?: FotoProductoMaxAggregateInputType
  }


  export type FotoProductoGroupByOutputType = {
    id: number
    ProductoId: number
    Foto: string
    Borrado: boolean
    _count: FotoProductoCountAggregateOutputType | null
    _avg: FotoProductoAvgAggregateOutputType | null
    _sum: FotoProductoSumAggregateOutputType | null
    _min: FotoProductoMinAggregateOutputType | null
    _max: FotoProductoMaxAggregateOutputType | null
  }

  type GetFotoProductoGroupByPayload<T extends FotoProductoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FotoProductoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FotoProductoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FotoProductoGroupByOutputType[P]>
            : GetScalarType<T[P], FotoProductoGroupByOutputType[P]>
        }
      >
    >


  export type FotoProductoSelect = {
    id?: boolean
    ProductoId?: boolean
    Foto?: boolean
    Borrado?: boolean
    producto?: boolean | ProductoArgs
  }


  export type FotoProductoInclude = {
    producto?: boolean | ProductoArgs
  }

  export type FotoProductoGetPayload<S extends boolean | null | undefined | FotoProductoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FotoProducto :
    S extends undefined ? never :
    S extends { include: any } & (FotoProductoArgs | FotoProductoFindManyArgs)
    ? FotoProducto  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'producto' ? ProductoGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FotoProductoArgs | FotoProductoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'producto' ? ProductoGetPayload<S['select'][P]> :  P extends keyof FotoProducto ? FotoProducto[P] : never
  } 
      : FotoProducto


  type FotoProductoCountArgs = 
    Omit<FotoProductoFindManyArgs, 'select' | 'include'> & {
      select?: FotoProductoCountAggregateInputType | true
    }

  export interface FotoProductoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FotoProducto that matches the filter.
     * @param {FotoProductoFindUniqueArgs} args - Arguments to find a FotoProducto
     * @example
     * // Get one FotoProducto
     * const fotoProducto = await prisma.fotoProducto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FotoProductoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FotoProductoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FotoProducto'> extends True ? Prisma__FotoProductoClient<FotoProductoGetPayload<T>> : Prisma__FotoProductoClient<FotoProductoGetPayload<T> | null, null>

    /**
     * Find one FotoProducto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FotoProductoFindUniqueOrThrowArgs} args - Arguments to find a FotoProducto
     * @example
     * // Get one FotoProducto
     * const fotoProducto = await prisma.fotoProducto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FotoProductoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FotoProductoFindUniqueOrThrowArgs>
    ): Prisma__FotoProductoClient<FotoProductoGetPayload<T>>

    /**
     * Find the first FotoProducto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotoProductoFindFirstArgs} args - Arguments to find a FotoProducto
     * @example
     * // Get one FotoProducto
     * const fotoProducto = await prisma.fotoProducto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FotoProductoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FotoProductoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FotoProducto'> extends True ? Prisma__FotoProductoClient<FotoProductoGetPayload<T>> : Prisma__FotoProductoClient<FotoProductoGetPayload<T> | null, null>

    /**
     * Find the first FotoProducto that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotoProductoFindFirstOrThrowArgs} args - Arguments to find a FotoProducto
     * @example
     * // Get one FotoProducto
     * const fotoProducto = await prisma.fotoProducto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FotoProductoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FotoProductoFindFirstOrThrowArgs>
    ): Prisma__FotoProductoClient<FotoProductoGetPayload<T>>

    /**
     * Find zero or more FotoProductos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotoProductoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FotoProductos
     * const fotoProductos = await prisma.fotoProducto.findMany()
     * 
     * // Get first 10 FotoProductos
     * const fotoProductos = await prisma.fotoProducto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fotoProductoWithIdOnly = await prisma.fotoProducto.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FotoProductoFindManyArgs>(
      args?: SelectSubset<T, FotoProductoFindManyArgs>
    ): Prisma.PrismaPromise<Array<FotoProductoGetPayload<T>>>

    /**
     * Create a FotoProducto.
     * @param {FotoProductoCreateArgs} args - Arguments to create a FotoProducto.
     * @example
     * // Create one FotoProducto
     * const FotoProducto = await prisma.fotoProducto.create({
     *   data: {
     *     // ... data to create a FotoProducto
     *   }
     * })
     * 
    **/
    create<T extends FotoProductoCreateArgs>(
      args: SelectSubset<T, FotoProductoCreateArgs>
    ): Prisma__FotoProductoClient<FotoProductoGetPayload<T>>

    /**
     * Create many FotoProductos.
     *     @param {FotoProductoCreateManyArgs} args - Arguments to create many FotoProductos.
     *     @example
     *     // Create many FotoProductos
     *     const fotoProducto = await prisma.fotoProducto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FotoProductoCreateManyArgs>(
      args?: SelectSubset<T, FotoProductoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FotoProducto.
     * @param {FotoProductoDeleteArgs} args - Arguments to delete one FotoProducto.
     * @example
     * // Delete one FotoProducto
     * const FotoProducto = await prisma.fotoProducto.delete({
     *   where: {
     *     // ... filter to delete one FotoProducto
     *   }
     * })
     * 
    **/
    delete<T extends FotoProductoDeleteArgs>(
      args: SelectSubset<T, FotoProductoDeleteArgs>
    ): Prisma__FotoProductoClient<FotoProductoGetPayload<T>>

    /**
     * Update one FotoProducto.
     * @param {FotoProductoUpdateArgs} args - Arguments to update one FotoProducto.
     * @example
     * // Update one FotoProducto
     * const fotoProducto = await prisma.fotoProducto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FotoProductoUpdateArgs>(
      args: SelectSubset<T, FotoProductoUpdateArgs>
    ): Prisma__FotoProductoClient<FotoProductoGetPayload<T>>

    /**
     * Delete zero or more FotoProductos.
     * @param {FotoProductoDeleteManyArgs} args - Arguments to filter FotoProductos to delete.
     * @example
     * // Delete a few FotoProductos
     * const { count } = await prisma.fotoProducto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FotoProductoDeleteManyArgs>(
      args?: SelectSubset<T, FotoProductoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FotoProductos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotoProductoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FotoProductos
     * const fotoProducto = await prisma.fotoProducto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FotoProductoUpdateManyArgs>(
      args: SelectSubset<T, FotoProductoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FotoProducto.
     * @param {FotoProductoUpsertArgs} args - Arguments to update or create a FotoProducto.
     * @example
     * // Update or create a FotoProducto
     * const fotoProducto = await prisma.fotoProducto.upsert({
     *   create: {
     *     // ... data to create a FotoProducto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FotoProducto we want to update
     *   }
     * })
    **/
    upsert<T extends FotoProductoUpsertArgs>(
      args: SelectSubset<T, FotoProductoUpsertArgs>
    ): Prisma__FotoProductoClient<FotoProductoGetPayload<T>>

    /**
     * Count the number of FotoProductos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotoProductoCountArgs} args - Arguments to filter FotoProductos to count.
     * @example
     * // Count the number of FotoProductos
     * const count = await prisma.fotoProducto.count({
     *   where: {
     *     // ... the filter for the FotoProductos we want to count
     *   }
     * })
    **/
    count<T extends FotoProductoCountArgs>(
      args?: Subset<T, FotoProductoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FotoProductoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FotoProducto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotoProductoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FotoProductoAggregateArgs>(args: Subset<T, FotoProductoAggregateArgs>): Prisma.PrismaPromise<GetFotoProductoAggregateType<T>>

    /**
     * Group by FotoProducto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotoProductoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FotoProductoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FotoProductoGroupByArgs['orderBy'] }
        : { orderBy?: FotoProductoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FotoProductoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFotoProductoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FotoProducto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FotoProductoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    producto<T extends ProductoArgs= {}>(args?: Subset<T, ProductoArgs>): Prisma__ProductoClient<ProductoGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FotoProducto base type for findUnique actions
   */
  export type FotoProductoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FotoProducto
     */
    select?: FotoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FotoProductoInclude | null
    /**
     * Filter, which FotoProducto to fetch.
     */
    where: FotoProductoWhereUniqueInput
  }

  /**
   * FotoProducto findUnique
   */
  export interface FotoProductoFindUniqueArgs extends FotoProductoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FotoProducto findUniqueOrThrow
   */
  export type FotoProductoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FotoProducto
     */
    select?: FotoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FotoProductoInclude | null
    /**
     * Filter, which FotoProducto to fetch.
     */
    where: FotoProductoWhereUniqueInput
  }


  /**
   * FotoProducto base type for findFirst actions
   */
  export type FotoProductoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FotoProducto
     */
    select?: FotoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FotoProductoInclude | null
    /**
     * Filter, which FotoProducto to fetch.
     */
    where?: FotoProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FotoProductos to fetch.
     */
    orderBy?: Enumerable<FotoProductoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FotoProductos.
     */
    cursor?: FotoProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FotoProductos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FotoProductos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FotoProductos.
     */
    distinct?: Enumerable<FotoProductoScalarFieldEnum>
  }

  /**
   * FotoProducto findFirst
   */
  export interface FotoProductoFindFirstArgs extends FotoProductoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FotoProducto findFirstOrThrow
   */
  export type FotoProductoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FotoProducto
     */
    select?: FotoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FotoProductoInclude | null
    /**
     * Filter, which FotoProducto to fetch.
     */
    where?: FotoProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FotoProductos to fetch.
     */
    orderBy?: Enumerable<FotoProductoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FotoProductos.
     */
    cursor?: FotoProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FotoProductos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FotoProductos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FotoProductos.
     */
    distinct?: Enumerable<FotoProductoScalarFieldEnum>
  }


  /**
   * FotoProducto findMany
   */
  export type FotoProductoFindManyArgs = {
    /**
     * Select specific fields to fetch from the FotoProducto
     */
    select?: FotoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FotoProductoInclude | null
    /**
     * Filter, which FotoProductos to fetch.
     */
    where?: FotoProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FotoProductos to fetch.
     */
    orderBy?: Enumerable<FotoProductoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FotoProductos.
     */
    cursor?: FotoProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FotoProductos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FotoProductos.
     */
    skip?: number
    distinct?: Enumerable<FotoProductoScalarFieldEnum>
  }


  /**
   * FotoProducto create
   */
  export type FotoProductoCreateArgs = {
    /**
     * Select specific fields to fetch from the FotoProducto
     */
    select?: FotoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FotoProductoInclude | null
    /**
     * The data needed to create a FotoProducto.
     */
    data: XOR<FotoProductoCreateInput, FotoProductoUncheckedCreateInput>
  }


  /**
   * FotoProducto createMany
   */
  export type FotoProductoCreateManyArgs = {
    /**
     * The data used to create many FotoProductos.
     */
    data: Enumerable<FotoProductoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FotoProducto update
   */
  export type FotoProductoUpdateArgs = {
    /**
     * Select specific fields to fetch from the FotoProducto
     */
    select?: FotoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FotoProductoInclude | null
    /**
     * The data needed to update a FotoProducto.
     */
    data: XOR<FotoProductoUpdateInput, FotoProductoUncheckedUpdateInput>
    /**
     * Choose, which FotoProducto to update.
     */
    where: FotoProductoWhereUniqueInput
  }


  /**
   * FotoProducto updateMany
   */
  export type FotoProductoUpdateManyArgs = {
    /**
     * The data used to update FotoProductos.
     */
    data: XOR<FotoProductoUpdateManyMutationInput, FotoProductoUncheckedUpdateManyInput>
    /**
     * Filter which FotoProductos to update
     */
    where?: FotoProductoWhereInput
  }


  /**
   * FotoProducto upsert
   */
  export type FotoProductoUpsertArgs = {
    /**
     * Select specific fields to fetch from the FotoProducto
     */
    select?: FotoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FotoProductoInclude | null
    /**
     * The filter to search for the FotoProducto to update in case it exists.
     */
    where: FotoProductoWhereUniqueInput
    /**
     * In case the FotoProducto found by the `where` argument doesn't exist, create a new FotoProducto with this data.
     */
    create: XOR<FotoProductoCreateInput, FotoProductoUncheckedCreateInput>
    /**
     * In case the FotoProducto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FotoProductoUpdateInput, FotoProductoUncheckedUpdateInput>
  }


  /**
   * FotoProducto delete
   */
  export type FotoProductoDeleteArgs = {
    /**
     * Select specific fields to fetch from the FotoProducto
     */
    select?: FotoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FotoProductoInclude | null
    /**
     * Filter which FotoProducto to delete.
     */
    where: FotoProductoWhereUniqueInput
  }


  /**
   * FotoProducto deleteMany
   */
  export type FotoProductoDeleteManyArgs = {
    /**
     * Filter which FotoProductos to delete
     */
    where?: FotoProductoWhereInput
  }


  /**
   * FotoProducto without action
   */
  export type FotoProductoArgs = {
    /**
     * Select specific fields to fetch from the FotoProducto
     */
    select?: FotoProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FotoProductoInclude | null
  }



  /**
   * Model Mensaje
   */


  export type AggregateMensaje = {
    _count: MensajeCountAggregateOutputType | null
    _avg: MensajeAvgAggregateOutputType | null
    _sum: MensajeSumAggregateOutputType | null
    _min: MensajeMinAggregateOutputType | null
    _max: MensajeMaxAggregateOutputType | null
  }

  export type MensajeAvgAggregateOutputType = {
    id: number | null
    ClienteId: number | null
    ProductoId: number | null
  }

  export type MensajeSumAggregateOutputType = {
    id: number | null
    ClienteId: number | null
    ProductoId: number | null
  }

  export type MensajeMinAggregateOutputType = {
    id: number | null
    ClienteId: number | null
    ProductoId: number | null
    Pregunta: string | null
    Respuesta: string | null
    Borrado: boolean | null
    Fecha: Date | null
  }

  export type MensajeMaxAggregateOutputType = {
    id: number | null
    ClienteId: number | null
    ProductoId: number | null
    Pregunta: string | null
    Respuesta: string | null
    Borrado: boolean | null
    Fecha: Date | null
  }

  export type MensajeCountAggregateOutputType = {
    id: number
    ClienteId: number
    ProductoId: number
    Pregunta: number
    Respuesta: number
    Borrado: number
    Fecha: number
    _all: number
  }


  export type MensajeAvgAggregateInputType = {
    id?: true
    ClienteId?: true
    ProductoId?: true
  }

  export type MensajeSumAggregateInputType = {
    id?: true
    ClienteId?: true
    ProductoId?: true
  }

  export type MensajeMinAggregateInputType = {
    id?: true
    ClienteId?: true
    ProductoId?: true
    Pregunta?: true
    Respuesta?: true
    Borrado?: true
    Fecha?: true
  }

  export type MensajeMaxAggregateInputType = {
    id?: true
    ClienteId?: true
    ProductoId?: true
    Pregunta?: true
    Respuesta?: true
    Borrado?: true
    Fecha?: true
  }

  export type MensajeCountAggregateInputType = {
    id?: true
    ClienteId?: true
    ProductoId?: true
    Pregunta?: true
    Respuesta?: true
    Borrado?: true
    Fecha?: true
    _all?: true
  }

  export type MensajeAggregateArgs = {
    /**
     * Filter which Mensaje to aggregate.
     */
    where?: MensajeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensajes to fetch.
     */
    orderBy?: Enumerable<MensajeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MensajeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensajes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensajes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Mensajes
    **/
    _count?: true | MensajeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MensajeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MensajeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MensajeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MensajeMaxAggregateInputType
  }

  export type GetMensajeAggregateType<T extends MensajeAggregateArgs> = {
        [P in keyof T & keyof AggregateMensaje]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMensaje[P]>
      : GetScalarType<T[P], AggregateMensaje[P]>
  }




  export type MensajeGroupByArgs = {
    where?: MensajeWhereInput
    orderBy?: Enumerable<MensajeOrderByWithAggregationInput>
    by: MensajeScalarFieldEnum[]
    having?: MensajeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MensajeCountAggregateInputType | true
    _avg?: MensajeAvgAggregateInputType
    _sum?: MensajeSumAggregateInputType
    _min?: MensajeMinAggregateInputType
    _max?: MensajeMaxAggregateInputType
  }


  export type MensajeGroupByOutputType = {
    id: number
    ClienteId: number
    ProductoId: number
    Pregunta: string
    Respuesta: string | null
    Borrado: boolean
    Fecha: Date
    _count: MensajeCountAggregateOutputType | null
    _avg: MensajeAvgAggregateOutputType | null
    _sum: MensajeSumAggregateOutputType | null
    _min: MensajeMinAggregateOutputType | null
    _max: MensajeMaxAggregateOutputType | null
  }

  type GetMensajeGroupByPayload<T extends MensajeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MensajeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MensajeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MensajeGroupByOutputType[P]>
            : GetScalarType<T[P], MensajeGroupByOutputType[P]>
        }
      >
    >


  export type MensajeSelect = {
    id?: boolean
    ClienteId?: boolean
    ProductoId?: boolean
    Pregunta?: boolean
    Respuesta?: boolean
    Borrado?: boolean
    Fecha?: boolean
    cliente?: boolean | UsuarioArgs
    producto?: boolean | ProductoArgs
  }


  export type MensajeInclude = {
    cliente?: boolean | UsuarioArgs
    producto?: boolean | ProductoArgs
  }

  export type MensajeGetPayload<S extends boolean | null | undefined | MensajeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Mensaje :
    S extends undefined ? never :
    S extends { include: any } & (MensajeArgs | MensajeFindManyArgs)
    ? Mensaje  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'cliente' ? UsuarioGetPayload<S['include'][P]> :
        P extends 'producto' ? ProductoGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MensajeArgs | MensajeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'cliente' ? UsuarioGetPayload<S['select'][P]> :
        P extends 'producto' ? ProductoGetPayload<S['select'][P]> :  P extends keyof Mensaje ? Mensaje[P] : never
  } 
      : Mensaje


  type MensajeCountArgs = 
    Omit<MensajeFindManyArgs, 'select' | 'include'> & {
      select?: MensajeCountAggregateInputType | true
    }

  export interface MensajeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Mensaje that matches the filter.
     * @param {MensajeFindUniqueArgs} args - Arguments to find a Mensaje
     * @example
     * // Get one Mensaje
     * const mensaje = await prisma.mensaje.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MensajeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MensajeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Mensaje'> extends True ? Prisma__MensajeClient<MensajeGetPayload<T>> : Prisma__MensajeClient<MensajeGetPayload<T> | null, null>

    /**
     * Find one Mensaje that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MensajeFindUniqueOrThrowArgs} args - Arguments to find a Mensaje
     * @example
     * // Get one Mensaje
     * const mensaje = await prisma.mensaje.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MensajeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MensajeFindUniqueOrThrowArgs>
    ): Prisma__MensajeClient<MensajeGetPayload<T>>

    /**
     * Find the first Mensaje that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensajeFindFirstArgs} args - Arguments to find a Mensaje
     * @example
     * // Get one Mensaje
     * const mensaje = await prisma.mensaje.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MensajeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MensajeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Mensaje'> extends True ? Prisma__MensajeClient<MensajeGetPayload<T>> : Prisma__MensajeClient<MensajeGetPayload<T> | null, null>

    /**
     * Find the first Mensaje that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensajeFindFirstOrThrowArgs} args - Arguments to find a Mensaje
     * @example
     * // Get one Mensaje
     * const mensaje = await prisma.mensaje.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MensajeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MensajeFindFirstOrThrowArgs>
    ): Prisma__MensajeClient<MensajeGetPayload<T>>

    /**
     * Find zero or more Mensajes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensajeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mensajes
     * const mensajes = await prisma.mensaje.findMany()
     * 
     * // Get first 10 Mensajes
     * const mensajes = await prisma.mensaje.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mensajeWithIdOnly = await prisma.mensaje.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MensajeFindManyArgs>(
      args?: SelectSubset<T, MensajeFindManyArgs>
    ): Prisma.PrismaPromise<Array<MensajeGetPayload<T>>>

    /**
     * Create a Mensaje.
     * @param {MensajeCreateArgs} args - Arguments to create a Mensaje.
     * @example
     * // Create one Mensaje
     * const Mensaje = await prisma.mensaje.create({
     *   data: {
     *     // ... data to create a Mensaje
     *   }
     * })
     * 
    **/
    create<T extends MensajeCreateArgs>(
      args: SelectSubset<T, MensajeCreateArgs>
    ): Prisma__MensajeClient<MensajeGetPayload<T>>

    /**
     * Create many Mensajes.
     *     @param {MensajeCreateManyArgs} args - Arguments to create many Mensajes.
     *     @example
     *     // Create many Mensajes
     *     const mensaje = await prisma.mensaje.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MensajeCreateManyArgs>(
      args?: SelectSubset<T, MensajeCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Mensaje.
     * @param {MensajeDeleteArgs} args - Arguments to delete one Mensaje.
     * @example
     * // Delete one Mensaje
     * const Mensaje = await prisma.mensaje.delete({
     *   where: {
     *     // ... filter to delete one Mensaje
     *   }
     * })
     * 
    **/
    delete<T extends MensajeDeleteArgs>(
      args: SelectSubset<T, MensajeDeleteArgs>
    ): Prisma__MensajeClient<MensajeGetPayload<T>>

    /**
     * Update one Mensaje.
     * @param {MensajeUpdateArgs} args - Arguments to update one Mensaje.
     * @example
     * // Update one Mensaje
     * const mensaje = await prisma.mensaje.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MensajeUpdateArgs>(
      args: SelectSubset<T, MensajeUpdateArgs>
    ): Prisma__MensajeClient<MensajeGetPayload<T>>

    /**
     * Delete zero or more Mensajes.
     * @param {MensajeDeleteManyArgs} args - Arguments to filter Mensajes to delete.
     * @example
     * // Delete a few Mensajes
     * const { count } = await prisma.mensaje.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MensajeDeleteManyArgs>(
      args?: SelectSubset<T, MensajeDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mensajes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensajeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mensajes
     * const mensaje = await prisma.mensaje.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MensajeUpdateManyArgs>(
      args: SelectSubset<T, MensajeUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mensaje.
     * @param {MensajeUpsertArgs} args - Arguments to update or create a Mensaje.
     * @example
     * // Update or create a Mensaje
     * const mensaje = await prisma.mensaje.upsert({
     *   create: {
     *     // ... data to create a Mensaje
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mensaje we want to update
     *   }
     * })
    **/
    upsert<T extends MensajeUpsertArgs>(
      args: SelectSubset<T, MensajeUpsertArgs>
    ): Prisma__MensajeClient<MensajeGetPayload<T>>

    /**
     * Count the number of Mensajes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensajeCountArgs} args - Arguments to filter Mensajes to count.
     * @example
     * // Count the number of Mensajes
     * const count = await prisma.mensaje.count({
     *   where: {
     *     // ... the filter for the Mensajes we want to count
     *   }
     * })
    **/
    count<T extends MensajeCountArgs>(
      args?: Subset<T, MensajeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MensajeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mensaje.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensajeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MensajeAggregateArgs>(args: Subset<T, MensajeAggregateArgs>): Prisma.PrismaPromise<GetMensajeAggregateType<T>>

    /**
     * Group by Mensaje.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensajeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MensajeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MensajeGroupByArgs['orderBy'] }
        : { orderBy?: MensajeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MensajeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMensajeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Mensaje.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MensajeClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    cliente<T extends UsuarioArgs= {}>(args?: Subset<T, UsuarioArgs>): Prisma__UsuarioClient<UsuarioGetPayload<T> | Null>;

    producto<T extends ProductoArgs= {}>(args?: Subset<T, ProductoArgs>): Prisma__ProductoClient<ProductoGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Mensaje base type for findUnique actions
   */
  export type MensajeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Mensaje
     */
    select?: MensajeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensajeInclude | null
    /**
     * Filter, which Mensaje to fetch.
     */
    where: MensajeWhereUniqueInput
  }

  /**
   * Mensaje findUnique
   */
  export interface MensajeFindUniqueArgs extends MensajeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Mensaje findUniqueOrThrow
   */
  export type MensajeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Mensaje
     */
    select?: MensajeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensajeInclude | null
    /**
     * Filter, which Mensaje to fetch.
     */
    where: MensajeWhereUniqueInput
  }


  /**
   * Mensaje base type for findFirst actions
   */
  export type MensajeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Mensaje
     */
    select?: MensajeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensajeInclude | null
    /**
     * Filter, which Mensaje to fetch.
     */
    where?: MensajeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensajes to fetch.
     */
    orderBy?: Enumerable<MensajeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mensajes.
     */
    cursor?: MensajeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensajes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensajes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mensajes.
     */
    distinct?: Enumerable<MensajeScalarFieldEnum>
  }

  /**
   * Mensaje findFirst
   */
  export interface MensajeFindFirstArgs extends MensajeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Mensaje findFirstOrThrow
   */
  export type MensajeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Mensaje
     */
    select?: MensajeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensajeInclude | null
    /**
     * Filter, which Mensaje to fetch.
     */
    where?: MensajeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensajes to fetch.
     */
    orderBy?: Enumerable<MensajeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mensajes.
     */
    cursor?: MensajeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensajes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensajes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mensajes.
     */
    distinct?: Enumerable<MensajeScalarFieldEnum>
  }


  /**
   * Mensaje findMany
   */
  export type MensajeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Mensaje
     */
    select?: MensajeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensajeInclude | null
    /**
     * Filter, which Mensajes to fetch.
     */
    where?: MensajeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensajes to fetch.
     */
    orderBy?: Enumerable<MensajeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Mensajes.
     */
    cursor?: MensajeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensajes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensajes.
     */
    skip?: number
    distinct?: Enumerable<MensajeScalarFieldEnum>
  }


  /**
   * Mensaje create
   */
  export type MensajeCreateArgs = {
    /**
     * Select specific fields to fetch from the Mensaje
     */
    select?: MensajeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensajeInclude | null
    /**
     * The data needed to create a Mensaje.
     */
    data: XOR<MensajeCreateInput, MensajeUncheckedCreateInput>
  }


  /**
   * Mensaje createMany
   */
  export type MensajeCreateManyArgs = {
    /**
     * The data used to create many Mensajes.
     */
    data: Enumerable<MensajeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Mensaje update
   */
  export type MensajeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Mensaje
     */
    select?: MensajeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensajeInclude | null
    /**
     * The data needed to update a Mensaje.
     */
    data: XOR<MensajeUpdateInput, MensajeUncheckedUpdateInput>
    /**
     * Choose, which Mensaje to update.
     */
    where: MensajeWhereUniqueInput
  }


  /**
   * Mensaje updateMany
   */
  export type MensajeUpdateManyArgs = {
    /**
     * The data used to update Mensajes.
     */
    data: XOR<MensajeUpdateManyMutationInput, MensajeUncheckedUpdateManyInput>
    /**
     * Filter which Mensajes to update
     */
    where?: MensajeWhereInput
  }


  /**
   * Mensaje upsert
   */
  export type MensajeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Mensaje
     */
    select?: MensajeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensajeInclude | null
    /**
     * The filter to search for the Mensaje to update in case it exists.
     */
    where: MensajeWhereUniqueInput
    /**
     * In case the Mensaje found by the `where` argument doesn't exist, create a new Mensaje with this data.
     */
    create: XOR<MensajeCreateInput, MensajeUncheckedCreateInput>
    /**
     * In case the Mensaje was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MensajeUpdateInput, MensajeUncheckedUpdateInput>
  }


  /**
   * Mensaje delete
   */
  export type MensajeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Mensaje
     */
    select?: MensajeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensajeInclude | null
    /**
     * Filter which Mensaje to delete.
     */
    where: MensajeWhereUniqueInput
  }


  /**
   * Mensaje deleteMany
   */
  export type MensajeDeleteManyArgs = {
    /**
     * Filter which Mensajes to delete
     */
    where?: MensajeWhereInput
  }


  /**
   * Mensaje without action
   */
  export type MensajeArgs = {
    /**
     * Select specific fields to fetch from the Mensaje
     */
    select?: MensajeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensajeInclude | null
  }



  /**
   * Model EstadoCompra
   */


  export type AggregateEstadoCompra = {
    _count: EstadoCompraCountAggregateOutputType | null
    _avg: EstadoCompraAvgAggregateOutputType | null
    _sum: EstadoCompraSumAggregateOutputType | null
    _min: EstadoCompraMinAggregateOutputType | null
    _max: EstadoCompraMaxAggregateOutputType | null
  }

  export type EstadoCompraAvgAggregateOutputType = {
    id: number | null
  }

  export type EstadoCompraSumAggregateOutputType = {
    id: number | null
  }

  export type EstadoCompraMinAggregateOutputType = {
    id: number | null
    Descripcion: string | null
    Borrado: boolean | null
  }

  export type EstadoCompraMaxAggregateOutputType = {
    id: number | null
    Descripcion: string | null
    Borrado: boolean | null
  }

  export type EstadoCompraCountAggregateOutputType = {
    id: number
    Descripcion: number
    Borrado: number
    _all: number
  }


  export type EstadoCompraAvgAggregateInputType = {
    id?: true
  }

  export type EstadoCompraSumAggregateInputType = {
    id?: true
  }

  export type EstadoCompraMinAggregateInputType = {
    id?: true
    Descripcion?: true
    Borrado?: true
  }

  export type EstadoCompraMaxAggregateInputType = {
    id?: true
    Descripcion?: true
    Borrado?: true
  }

  export type EstadoCompraCountAggregateInputType = {
    id?: true
    Descripcion?: true
    Borrado?: true
    _all?: true
  }

  export type EstadoCompraAggregateArgs = {
    /**
     * Filter which EstadoCompra to aggregate.
     */
    where?: EstadoCompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstadoCompras to fetch.
     */
    orderBy?: Enumerable<EstadoCompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EstadoCompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstadoCompras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstadoCompras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EstadoCompras
    **/
    _count?: true | EstadoCompraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EstadoCompraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EstadoCompraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EstadoCompraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EstadoCompraMaxAggregateInputType
  }

  export type GetEstadoCompraAggregateType<T extends EstadoCompraAggregateArgs> = {
        [P in keyof T & keyof AggregateEstadoCompra]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEstadoCompra[P]>
      : GetScalarType<T[P], AggregateEstadoCompra[P]>
  }




  export type EstadoCompraGroupByArgs = {
    where?: EstadoCompraWhereInput
    orderBy?: Enumerable<EstadoCompraOrderByWithAggregationInput>
    by: EstadoCompraScalarFieldEnum[]
    having?: EstadoCompraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EstadoCompraCountAggregateInputType | true
    _avg?: EstadoCompraAvgAggregateInputType
    _sum?: EstadoCompraSumAggregateInputType
    _min?: EstadoCompraMinAggregateInputType
    _max?: EstadoCompraMaxAggregateInputType
  }


  export type EstadoCompraGroupByOutputType = {
    id: number
    Descripcion: string
    Borrado: boolean
    _count: EstadoCompraCountAggregateOutputType | null
    _avg: EstadoCompraAvgAggregateOutputType | null
    _sum: EstadoCompraSumAggregateOutputType | null
    _min: EstadoCompraMinAggregateOutputType | null
    _max: EstadoCompraMaxAggregateOutputType | null
  }

  type GetEstadoCompraGroupByPayload<T extends EstadoCompraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EstadoCompraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EstadoCompraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EstadoCompraGroupByOutputType[P]>
            : GetScalarType<T[P], EstadoCompraGroupByOutputType[P]>
        }
      >
    >


  export type EstadoCompraSelect = {
    id?: boolean
    Descripcion?: boolean
    Borrado?: boolean
    CompraDetalle?: boolean | EstadoCompra$CompraDetalleArgs
    _count?: boolean | EstadoCompraCountOutputTypeArgs
  }


  export type EstadoCompraInclude = {
    CompraDetalle?: boolean | EstadoCompra$CompraDetalleArgs
    _count?: boolean | EstadoCompraCountOutputTypeArgs
  }

  export type EstadoCompraGetPayload<S extends boolean | null | undefined | EstadoCompraArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? EstadoCompra :
    S extends undefined ? never :
    S extends { include: any } & (EstadoCompraArgs | EstadoCompraFindManyArgs)
    ? EstadoCompra  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'CompraDetalle' ? Array < CompraDetalleGetPayload<S['include'][P]>>  :
        P extends '_count' ? EstadoCompraCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EstadoCompraArgs | EstadoCompraFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'CompraDetalle' ? Array < CompraDetalleGetPayload<S['select'][P]>>  :
        P extends '_count' ? EstadoCompraCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof EstadoCompra ? EstadoCompra[P] : never
  } 
      : EstadoCompra


  type EstadoCompraCountArgs = 
    Omit<EstadoCompraFindManyArgs, 'select' | 'include'> & {
      select?: EstadoCompraCountAggregateInputType | true
    }

  export interface EstadoCompraDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one EstadoCompra that matches the filter.
     * @param {EstadoCompraFindUniqueArgs} args - Arguments to find a EstadoCompra
     * @example
     * // Get one EstadoCompra
     * const estadoCompra = await prisma.estadoCompra.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EstadoCompraFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EstadoCompraFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'EstadoCompra'> extends True ? Prisma__EstadoCompraClient<EstadoCompraGetPayload<T>> : Prisma__EstadoCompraClient<EstadoCompraGetPayload<T> | null, null>

    /**
     * Find one EstadoCompra that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EstadoCompraFindUniqueOrThrowArgs} args - Arguments to find a EstadoCompra
     * @example
     * // Get one EstadoCompra
     * const estadoCompra = await prisma.estadoCompra.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EstadoCompraFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EstadoCompraFindUniqueOrThrowArgs>
    ): Prisma__EstadoCompraClient<EstadoCompraGetPayload<T>>

    /**
     * Find the first EstadoCompra that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCompraFindFirstArgs} args - Arguments to find a EstadoCompra
     * @example
     * // Get one EstadoCompra
     * const estadoCompra = await prisma.estadoCompra.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EstadoCompraFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EstadoCompraFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'EstadoCompra'> extends True ? Prisma__EstadoCompraClient<EstadoCompraGetPayload<T>> : Prisma__EstadoCompraClient<EstadoCompraGetPayload<T> | null, null>

    /**
     * Find the first EstadoCompra that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCompraFindFirstOrThrowArgs} args - Arguments to find a EstadoCompra
     * @example
     * // Get one EstadoCompra
     * const estadoCompra = await prisma.estadoCompra.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EstadoCompraFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EstadoCompraFindFirstOrThrowArgs>
    ): Prisma__EstadoCompraClient<EstadoCompraGetPayload<T>>

    /**
     * Find zero or more EstadoCompras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCompraFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EstadoCompras
     * const estadoCompras = await prisma.estadoCompra.findMany()
     * 
     * // Get first 10 EstadoCompras
     * const estadoCompras = await prisma.estadoCompra.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const estadoCompraWithIdOnly = await prisma.estadoCompra.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EstadoCompraFindManyArgs>(
      args?: SelectSubset<T, EstadoCompraFindManyArgs>
    ): Prisma.PrismaPromise<Array<EstadoCompraGetPayload<T>>>

    /**
     * Create a EstadoCompra.
     * @param {EstadoCompraCreateArgs} args - Arguments to create a EstadoCompra.
     * @example
     * // Create one EstadoCompra
     * const EstadoCompra = await prisma.estadoCompra.create({
     *   data: {
     *     // ... data to create a EstadoCompra
     *   }
     * })
     * 
    **/
    create<T extends EstadoCompraCreateArgs>(
      args: SelectSubset<T, EstadoCompraCreateArgs>
    ): Prisma__EstadoCompraClient<EstadoCompraGetPayload<T>>

    /**
     * Create many EstadoCompras.
     *     @param {EstadoCompraCreateManyArgs} args - Arguments to create many EstadoCompras.
     *     @example
     *     // Create many EstadoCompras
     *     const estadoCompra = await prisma.estadoCompra.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EstadoCompraCreateManyArgs>(
      args?: SelectSubset<T, EstadoCompraCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EstadoCompra.
     * @param {EstadoCompraDeleteArgs} args - Arguments to delete one EstadoCompra.
     * @example
     * // Delete one EstadoCompra
     * const EstadoCompra = await prisma.estadoCompra.delete({
     *   where: {
     *     // ... filter to delete one EstadoCompra
     *   }
     * })
     * 
    **/
    delete<T extends EstadoCompraDeleteArgs>(
      args: SelectSubset<T, EstadoCompraDeleteArgs>
    ): Prisma__EstadoCompraClient<EstadoCompraGetPayload<T>>

    /**
     * Update one EstadoCompra.
     * @param {EstadoCompraUpdateArgs} args - Arguments to update one EstadoCompra.
     * @example
     * // Update one EstadoCompra
     * const estadoCompra = await prisma.estadoCompra.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EstadoCompraUpdateArgs>(
      args: SelectSubset<T, EstadoCompraUpdateArgs>
    ): Prisma__EstadoCompraClient<EstadoCompraGetPayload<T>>

    /**
     * Delete zero or more EstadoCompras.
     * @param {EstadoCompraDeleteManyArgs} args - Arguments to filter EstadoCompras to delete.
     * @example
     * // Delete a few EstadoCompras
     * const { count } = await prisma.estadoCompra.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EstadoCompraDeleteManyArgs>(
      args?: SelectSubset<T, EstadoCompraDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EstadoCompras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCompraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EstadoCompras
     * const estadoCompra = await prisma.estadoCompra.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EstadoCompraUpdateManyArgs>(
      args: SelectSubset<T, EstadoCompraUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EstadoCompra.
     * @param {EstadoCompraUpsertArgs} args - Arguments to update or create a EstadoCompra.
     * @example
     * // Update or create a EstadoCompra
     * const estadoCompra = await prisma.estadoCompra.upsert({
     *   create: {
     *     // ... data to create a EstadoCompra
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EstadoCompra we want to update
     *   }
     * })
    **/
    upsert<T extends EstadoCompraUpsertArgs>(
      args: SelectSubset<T, EstadoCompraUpsertArgs>
    ): Prisma__EstadoCompraClient<EstadoCompraGetPayload<T>>

    /**
     * Count the number of EstadoCompras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCompraCountArgs} args - Arguments to filter EstadoCompras to count.
     * @example
     * // Count the number of EstadoCompras
     * const count = await prisma.estadoCompra.count({
     *   where: {
     *     // ... the filter for the EstadoCompras we want to count
     *   }
     * })
    **/
    count<T extends EstadoCompraCountArgs>(
      args?: Subset<T, EstadoCompraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EstadoCompraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EstadoCompra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCompraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EstadoCompraAggregateArgs>(args: Subset<T, EstadoCompraAggregateArgs>): Prisma.PrismaPromise<GetEstadoCompraAggregateType<T>>

    /**
     * Group by EstadoCompra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCompraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EstadoCompraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EstadoCompraGroupByArgs['orderBy'] }
        : { orderBy?: EstadoCompraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EstadoCompraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEstadoCompraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for EstadoCompra.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EstadoCompraClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    CompraDetalle<T extends EstadoCompra$CompraDetalleArgs= {}>(args?: Subset<T, EstadoCompra$CompraDetalleArgs>): Prisma.PrismaPromise<Array<CompraDetalleGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * EstadoCompra base type for findUnique actions
   */
  export type EstadoCompraFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the EstadoCompra
     */
    select?: EstadoCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoCompraInclude | null
    /**
     * Filter, which EstadoCompra to fetch.
     */
    where: EstadoCompraWhereUniqueInput
  }

  /**
   * EstadoCompra findUnique
   */
  export interface EstadoCompraFindUniqueArgs extends EstadoCompraFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EstadoCompra findUniqueOrThrow
   */
  export type EstadoCompraFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the EstadoCompra
     */
    select?: EstadoCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoCompraInclude | null
    /**
     * Filter, which EstadoCompra to fetch.
     */
    where: EstadoCompraWhereUniqueInput
  }


  /**
   * EstadoCompra base type for findFirst actions
   */
  export type EstadoCompraFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the EstadoCompra
     */
    select?: EstadoCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoCompraInclude | null
    /**
     * Filter, which EstadoCompra to fetch.
     */
    where?: EstadoCompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstadoCompras to fetch.
     */
    orderBy?: Enumerable<EstadoCompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EstadoCompras.
     */
    cursor?: EstadoCompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstadoCompras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstadoCompras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EstadoCompras.
     */
    distinct?: Enumerable<EstadoCompraScalarFieldEnum>
  }

  /**
   * EstadoCompra findFirst
   */
  export interface EstadoCompraFindFirstArgs extends EstadoCompraFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EstadoCompra findFirstOrThrow
   */
  export type EstadoCompraFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the EstadoCompra
     */
    select?: EstadoCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoCompraInclude | null
    /**
     * Filter, which EstadoCompra to fetch.
     */
    where?: EstadoCompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstadoCompras to fetch.
     */
    orderBy?: Enumerable<EstadoCompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EstadoCompras.
     */
    cursor?: EstadoCompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstadoCompras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstadoCompras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EstadoCompras.
     */
    distinct?: Enumerable<EstadoCompraScalarFieldEnum>
  }


  /**
   * EstadoCompra findMany
   */
  export type EstadoCompraFindManyArgs = {
    /**
     * Select specific fields to fetch from the EstadoCompra
     */
    select?: EstadoCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoCompraInclude | null
    /**
     * Filter, which EstadoCompras to fetch.
     */
    where?: EstadoCompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstadoCompras to fetch.
     */
    orderBy?: Enumerable<EstadoCompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EstadoCompras.
     */
    cursor?: EstadoCompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstadoCompras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstadoCompras.
     */
    skip?: number
    distinct?: Enumerable<EstadoCompraScalarFieldEnum>
  }


  /**
   * EstadoCompra create
   */
  export type EstadoCompraCreateArgs = {
    /**
     * Select specific fields to fetch from the EstadoCompra
     */
    select?: EstadoCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoCompraInclude | null
    /**
     * The data needed to create a EstadoCompra.
     */
    data: XOR<EstadoCompraCreateInput, EstadoCompraUncheckedCreateInput>
  }


  /**
   * EstadoCompra createMany
   */
  export type EstadoCompraCreateManyArgs = {
    /**
     * The data used to create many EstadoCompras.
     */
    data: Enumerable<EstadoCompraCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * EstadoCompra update
   */
  export type EstadoCompraUpdateArgs = {
    /**
     * Select specific fields to fetch from the EstadoCompra
     */
    select?: EstadoCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoCompraInclude | null
    /**
     * The data needed to update a EstadoCompra.
     */
    data: XOR<EstadoCompraUpdateInput, EstadoCompraUncheckedUpdateInput>
    /**
     * Choose, which EstadoCompra to update.
     */
    where: EstadoCompraWhereUniqueInput
  }


  /**
   * EstadoCompra updateMany
   */
  export type EstadoCompraUpdateManyArgs = {
    /**
     * The data used to update EstadoCompras.
     */
    data: XOR<EstadoCompraUpdateManyMutationInput, EstadoCompraUncheckedUpdateManyInput>
    /**
     * Filter which EstadoCompras to update
     */
    where?: EstadoCompraWhereInput
  }


  /**
   * EstadoCompra upsert
   */
  export type EstadoCompraUpsertArgs = {
    /**
     * Select specific fields to fetch from the EstadoCompra
     */
    select?: EstadoCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoCompraInclude | null
    /**
     * The filter to search for the EstadoCompra to update in case it exists.
     */
    where: EstadoCompraWhereUniqueInput
    /**
     * In case the EstadoCompra found by the `where` argument doesn't exist, create a new EstadoCompra with this data.
     */
    create: XOR<EstadoCompraCreateInput, EstadoCompraUncheckedCreateInput>
    /**
     * In case the EstadoCompra was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EstadoCompraUpdateInput, EstadoCompraUncheckedUpdateInput>
  }


  /**
   * EstadoCompra delete
   */
  export type EstadoCompraDeleteArgs = {
    /**
     * Select specific fields to fetch from the EstadoCompra
     */
    select?: EstadoCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoCompraInclude | null
    /**
     * Filter which EstadoCompra to delete.
     */
    where: EstadoCompraWhereUniqueInput
  }


  /**
   * EstadoCompra deleteMany
   */
  export type EstadoCompraDeleteManyArgs = {
    /**
     * Filter which EstadoCompras to delete
     */
    where?: EstadoCompraWhereInput
  }


  /**
   * EstadoCompra.CompraDetalle
   */
  export type EstadoCompra$CompraDetalleArgs = {
    /**
     * Select specific fields to fetch from the CompraDetalle
     */
    select?: CompraDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraDetalleInclude | null
    where?: CompraDetalleWhereInput
    orderBy?: Enumerable<CompraDetalleOrderByWithRelationInput>
    cursor?: CompraDetalleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompraDetalleScalarFieldEnum>
  }


  /**
   * EstadoCompra without action
   */
  export type EstadoCompraArgs = {
    /**
     * Select specific fields to fetch from the EstadoCompra
     */
    select?: EstadoCompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoCompraInclude | null
  }



  /**
   * Model Compra
   */


  export type AggregateCompra = {
    _count: CompraCountAggregateOutputType | null
    _avg: CompraAvgAggregateOutputType | null
    _sum: CompraSumAggregateOutputType | null
    _min: CompraMinAggregateOutputType | null
    _max: CompraMaxAggregateOutputType | null
  }

  export type CompraAvgAggregateOutputType = {
    id: number | null
    ClienteId: number | null
    DireccionId: number | null
    MetodoPagoId: number | null
    Subtotal: Decimal | null
    Total: Decimal | null
  }

  export type CompraSumAggregateOutputType = {
    id: number | null
    ClienteId: number | null
    DireccionId: number | null
    MetodoPagoId: number | null
    Subtotal: Decimal | null
    Total: Decimal | null
  }

  export type CompraMinAggregateOutputType = {
    id: number | null
    ClienteId: number | null
    DireccionId: number | null
    MetodoPagoId: number | null
    Subtotal: Decimal | null
    Total: Decimal | null
    Fecha: Date | null
    Borrado: boolean | null
  }

  export type CompraMaxAggregateOutputType = {
    id: number | null
    ClienteId: number | null
    DireccionId: number | null
    MetodoPagoId: number | null
    Subtotal: Decimal | null
    Total: Decimal | null
    Fecha: Date | null
    Borrado: boolean | null
  }

  export type CompraCountAggregateOutputType = {
    id: number
    ClienteId: number
    DireccionId: number
    MetodoPagoId: number
    Subtotal: number
    Total: number
    Fecha: number
    Borrado: number
    _all: number
  }


  export type CompraAvgAggregateInputType = {
    id?: true
    ClienteId?: true
    DireccionId?: true
    MetodoPagoId?: true
    Subtotal?: true
    Total?: true
  }

  export type CompraSumAggregateInputType = {
    id?: true
    ClienteId?: true
    DireccionId?: true
    MetodoPagoId?: true
    Subtotal?: true
    Total?: true
  }

  export type CompraMinAggregateInputType = {
    id?: true
    ClienteId?: true
    DireccionId?: true
    MetodoPagoId?: true
    Subtotal?: true
    Total?: true
    Fecha?: true
    Borrado?: true
  }

  export type CompraMaxAggregateInputType = {
    id?: true
    ClienteId?: true
    DireccionId?: true
    MetodoPagoId?: true
    Subtotal?: true
    Total?: true
    Fecha?: true
    Borrado?: true
  }

  export type CompraCountAggregateInputType = {
    id?: true
    ClienteId?: true
    DireccionId?: true
    MetodoPagoId?: true
    Subtotal?: true
    Total?: true
    Fecha?: true
    Borrado?: true
    _all?: true
  }

  export type CompraAggregateArgs = {
    /**
     * Filter which Compra to aggregate.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: Enumerable<CompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Compras
    **/
    _count?: true | CompraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompraMaxAggregateInputType
  }

  export type GetCompraAggregateType<T extends CompraAggregateArgs> = {
        [P in keyof T & keyof AggregateCompra]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompra[P]>
      : GetScalarType<T[P], AggregateCompra[P]>
  }




  export type CompraGroupByArgs = {
    where?: CompraWhereInput
    orderBy?: Enumerable<CompraOrderByWithAggregationInput>
    by: CompraScalarFieldEnum[]
    having?: CompraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompraCountAggregateInputType | true
    _avg?: CompraAvgAggregateInputType
    _sum?: CompraSumAggregateInputType
    _min?: CompraMinAggregateInputType
    _max?: CompraMaxAggregateInputType
  }


  export type CompraGroupByOutputType = {
    id: number
    ClienteId: number
    DireccionId: number
    MetodoPagoId: number
    Subtotal: Decimal
    Total: Decimal
    Fecha: Date
    Borrado: boolean
    _count: CompraCountAggregateOutputType | null
    _avg: CompraAvgAggregateOutputType | null
    _sum: CompraSumAggregateOutputType | null
    _min: CompraMinAggregateOutputType | null
    _max: CompraMaxAggregateOutputType | null
  }

  type GetCompraGroupByPayload<T extends CompraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CompraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompraGroupByOutputType[P]>
            : GetScalarType<T[P], CompraGroupByOutputType[P]>
        }
      >
    >


  export type CompraSelect = {
    id?: boolean
    ClienteId?: boolean
    DireccionId?: boolean
    MetodoPagoId?: boolean
    Subtotal?: boolean
    Total?: boolean
    Fecha?: boolean
    Borrado?: boolean
    cliente?: boolean | UsuarioArgs
    direccion?: boolean | DireccionArgs
    metodoPago?: boolean | MetodoPagoArgs
    CompraDetalle?: boolean | Compra$CompraDetalleArgs
    Evaluacion?: boolean | Compra$EvaluacionArgs
    _count?: boolean | CompraCountOutputTypeArgs
  }


  export type CompraInclude = {
    cliente?: boolean | UsuarioArgs
    direccion?: boolean | DireccionArgs
    metodoPago?: boolean | MetodoPagoArgs
    CompraDetalle?: boolean | Compra$CompraDetalleArgs
    Evaluacion?: boolean | Compra$EvaluacionArgs
    _count?: boolean | CompraCountOutputTypeArgs
  }

  export type CompraGetPayload<S extends boolean | null | undefined | CompraArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Compra :
    S extends undefined ? never :
    S extends { include: any } & (CompraArgs | CompraFindManyArgs)
    ? Compra  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'cliente' ? UsuarioGetPayload<S['include'][P]> :
        P extends 'direccion' ? DireccionGetPayload<S['include'][P]> :
        P extends 'metodoPago' ? MetodoPagoGetPayload<S['include'][P]> :
        P extends 'CompraDetalle' ? Array < CompraDetalleGetPayload<S['include'][P]>>  :
        P extends 'Evaluacion' ? Array < EvaluacionGetPayload<S['include'][P]>>  :
        P extends '_count' ? CompraCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CompraArgs | CompraFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'cliente' ? UsuarioGetPayload<S['select'][P]> :
        P extends 'direccion' ? DireccionGetPayload<S['select'][P]> :
        P extends 'metodoPago' ? MetodoPagoGetPayload<S['select'][P]> :
        P extends 'CompraDetalle' ? Array < CompraDetalleGetPayload<S['select'][P]>>  :
        P extends 'Evaluacion' ? Array < EvaluacionGetPayload<S['select'][P]>>  :
        P extends '_count' ? CompraCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Compra ? Compra[P] : never
  } 
      : Compra


  type CompraCountArgs = 
    Omit<CompraFindManyArgs, 'select' | 'include'> & {
      select?: CompraCountAggregateInputType | true
    }

  export interface CompraDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Compra that matches the filter.
     * @param {CompraFindUniqueArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompraFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CompraFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Compra'> extends True ? Prisma__CompraClient<CompraGetPayload<T>> : Prisma__CompraClient<CompraGetPayload<T> | null, null>

    /**
     * Find one Compra that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompraFindUniqueOrThrowArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompraFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CompraFindUniqueOrThrowArgs>
    ): Prisma__CompraClient<CompraGetPayload<T>>

    /**
     * Find the first Compra that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraFindFirstArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompraFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CompraFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Compra'> extends True ? Prisma__CompraClient<CompraGetPayload<T>> : Prisma__CompraClient<CompraGetPayload<T> | null, null>

    /**
     * Find the first Compra that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraFindFirstOrThrowArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompraFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CompraFindFirstOrThrowArgs>
    ): Prisma__CompraClient<CompraGetPayload<T>>

    /**
     * Find zero or more Compras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compras
     * const compras = await prisma.compra.findMany()
     * 
     * // Get first 10 Compras
     * const compras = await prisma.compra.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compraWithIdOnly = await prisma.compra.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompraFindManyArgs>(
      args?: SelectSubset<T, CompraFindManyArgs>
    ): Prisma.PrismaPromise<Array<CompraGetPayload<T>>>

    /**
     * Create a Compra.
     * @param {CompraCreateArgs} args - Arguments to create a Compra.
     * @example
     * // Create one Compra
     * const Compra = await prisma.compra.create({
     *   data: {
     *     // ... data to create a Compra
     *   }
     * })
     * 
    **/
    create<T extends CompraCreateArgs>(
      args: SelectSubset<T, CompraCreateArgs>
    ): Prisma__CompraClient<CompraGetPayload<T>>

    /**
     * Create many Compras.
     *     @param {CompraCreateManyArgs} args - Arguments to create many Compras.
     *     @example
     *     // Create many Compras
     *     const compra = await prisma.compra.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompraCreateManyArgs>(
      args?: SelectSubset<T, CompraCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Compra.
     * @param {CompraDeleteArgs} args - Arguments to delete one Compra.
     * @example
     * // Delete one Compra
     * const Compra = await prisma.compra.delete({
     *   where: {
     *     // ... filter to delete one Compra
     *   }
     * })
     * 
    **/
    delete<T extends CompraDeleteArgs>(
      args: SelectSubset<T, CompraDeleteArgs>
    ): Prisma__CompraClient<CompraGetPayload<T>>

    /**
     * Update one Compra.
     * @param {CompraUpdateArgs} args - Arguments to update one Compra.
     * @example
     * // Update one Compra
     * const compra = await prisma.compra.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompraUpdateArgs>(
      args: SelectSubset<T, CompraUpdateArgs>
    ): Prisma__CompraClient<CompraGetPayload<T>>

    /**
     * Delete zero or more Compras.
     * @param {CompraDeleteManyArgs} args - Arguments to filter Compras to delete.
     * @example
     * // Delete a few Compras
     * const { count } = await prisma.compra.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompraDeleteManyArgs>(
      args?: SelectSubset<T, CompraDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compras
     * const compra = await prisma.compra.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompraUpdateManyArgs>(
      args: SelectSubset<T, CompraUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Compra.
     * @param {CompraUpsertArgs} args - Arguments to update or create a Compra.
     * @example
     * // Update or create a Compra
     * const compra = await prisma.compra.upsert({
     *   create: {
     *     // ... data to create a Compra
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Compra we want to update
     *   }
     * })
    **/
    upsert<T extends CompraUpsertArgs>(
      args: SelectSubset<T, CompraUpsertArgs>
    ): Prisma__CompraClient<CompraGetPayload<T>>

    /**
     * Count the number of Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraCountArgs} args - Arguments to filter Compras to count.
     * @example
     * // Count the number of Compras
     * const count = await prisma.compra.count({
     *   where: {
     *     // ... the filter for the Compras we want to count
     *   }
     * })
    **/
    count<T extends CompraCountArgs>(
      args?: Subset<T, CompraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompraAggregateArgs>(args: Subset<T, CompraAggregateArgs>): Prisma.PrismaPromise<GetCompraAggregateType<T>>

    /**
     * Group by Compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompraGroupByArgs['orderBy'] }
        : { orderBy?: CompraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Compra.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CompraClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    cliente<T extends UsuarioArgs= {}>(args?: Subset<T, UsuarioArgs>): Prisma__UsuarioClient<UsuarioGetPayload<T> | Null>;

    direccion<T extends DireccionArgs= {}>(args?: Subset<T, DireccionArgs>): Prisma__DireccionClient<DireccionGetPayload<T> | Null>;

    metodoPago<T extends MetodoPagoArgs= {}>(args?: Subset<T, MetodoPagoArgs>): Prisma__MetodoPagoClient<MetodoPagoGetPayload<T> | Null>;

    CompraDetalle<T extends Compra$CompraDetalleArgs= {}>(args?: Subset<T, Compra$CompraDetalleArgs>): Prisma.PrismaPromise<Array<CompraDetalleGetPayload<T>>| Null>;

    Evaluacion<T extends Compra$EvaluacionArgs= {}>(args?: Subset<T, Compra$EvaluacionArgs>): Prisma.PrismaPromise<Array<EvaluacionGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Compra base type for findUnique actions
   */
  export type CompraFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * Filter, which Compra to fetch.
     */
    where: CompraWhereUniqueInput
  }

  /**
   * Compra findUnique
   */
  export interface CompraFindUniqueArgs extends CompraFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Compra findUniqueOrThrow
   */
  export type CompraFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * Filter, which Compra to fetch.
     */
    where: CompraWhereUniqueInput
  }


  /**
   * Compra base type for findFirst actions
   */
  export type CompraFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * Filter, which Compra to fetch.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: Enumerable<CompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compras.
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compras.
     */
    distinct?: Enumerable<CompraScalarFieldEnum>
  }

  /**
   * Compra findFirst
   */
  export interface CompraFindFirstArgs extends CompraFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Compra findFirstOrThrow
   */
  export type CompraFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * Filter, which Compra to fetch.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: Enumerable<CompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compras.
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compras.
     */
    distinct?: Enumerable<CompraScalarFieldEnum>
  }


  /**
   * Compra findMany
   */
  export type CompraFindManyArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * Filter, which Compras to fetch.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: Enumerable<CompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Compras.
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    distinct?: Enumerable<CompraScalarFieldEnum>
  }


  /**
   * Compra create
   */
  export type CompraCreateArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * The data needed to create a Compra.
     */
    data: XOR<CompraCreateInput, CompraUncheckedCreateInput>
  }


  /**
   * Compra createMany
   */
  export type CompraCreateManyArgs = {
    /**
     * The data used to create many Compras.
     */
    data: Enumerable<CompraCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Compra update
   */
  export type CompraUpdateArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * The data needed to update a Compra.
     */
    data: XOR<CompraUpdateInput, CompraUncheckedUpdateInput>
    /**
     * Choose, which Compra to update.
     */
    where: CompraWhereUniqueInput
  }


  /**
   * Compra updateMany
   */
  export type CompraUpdateManyArgs = {
    /**
     * The data used to update Compras.
     */
    data: XOR<CompraUpdateManyMutationInput, CompraUncheckedUpdateManyInput>
    /**
     * Filter which Compras to update
     */
    where?: CompraWhereInput
  }


  /**
   * Compra upsert
   */
  export type CompraUpsertArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * The filter to search for the Compra to update in case it exists.
     */
    where: CompraWhereUniqueInput
    /**
     * In case the Compra found by the `where` argument doesn't exist, create a new Compra with this data.
     */
    create: XOR<CompraCreateInput, CompraUncheckedCreateInput>
    /**
     * In case the Compra was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompraUpdateInput, CompraUncheckedUpdateInput>
  }


  /**
   * Compra delete
   */
  export type CompraDeleteArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * Filter which Compra to delete.
     */
    where: CompraWhereUniqueInput
  }


  /**
   * Compra deleteMany
   */
  export type CompraDeleteManyArgs = {
    /**
     * Filter which Compras to delete
     */
    where?: CompraWhereInput
  }


  /**
   * Compra.CompraDetalle
   */
  export type Compra$CompraDetalleArgs = {
    /**
     * Select specific fields to fetch from the CompraDetalle
     */
    select?: CompraDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraDetalleInclude | null
    where?: CompraDetalleWhereInput
    orderBy?: Enumerable<CompraDetalleOrderByWithRelationInput>
    cursor?: CompraDetalleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompraDetalleScalarFieldEnum>
  }


  /**
   * Compra.Evaluacion
   */
  export type Compra$EvaluacionArgs = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EvaluacionInclude | null
    where?: EvaluacionWhereInput
    orderBy?: Enumerable<EvaluacionOrderByWithRelationInput>
    cursor?: EvaluacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EvaluacionScalarFieldEnum>
  }


  /**
   * Compra without action
   */
  export type CompraArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
  }



  /**
   * Model CompraDetalle
   */


  export type AggregateCompraDetalle = {
    _count: CompraDetalleCountAggregateOutputType | null
    _avg: CompraDetalleAvgAggregateOutputType | null
    _sum: CompraDetalleSumAggregateOutputType | null
    _min: CompraDetalleMinAggregateOutputType | null
    _max: CompraDetalleMaxAggregateOutputType | null
  }

  export type CompraDetalleAvgAggregateOutputType = {
    id: number | null
    CompraId: number | null
    ProductoId: number | null
    Cantidad: number | null
    Subtotal: Decimal | null
    EstadoCompraId: number | null
  }

  export type CompraDetalleSumAggregateOutputType = {
    id: number | null
    CompraId: number | null
    ProductoId: number | null
    Cantidad: number | null
    Subtotal: Decimal | null
    EstadoCompraId: number | null
  }

  export type CompraDetalleMinAggregateOutputType = {
    id: number | null
    CompraId: number | null
    ProductoId: number | null
    Cantidad: number | null
    Subtotal: Decimal | null
    EstadoCompraId: number | null
    Borrado: boolean | null
  }

  export type CompraDetalleMaxAggregateOutputType = {
    id: number | null
    CompraId: number | null
    ProductoId: number | null
    Cantidad: number | null
    Subtotal: Decimal | null
    EstadoCompraId: number | null
    Borrado: boolean | null
  }

  export type CompraDetalleCountAggregateOutputType = {
    id: number
    CompraId: number
    ProductoId: number
    Cantidad: number
    Subtotal: number
    EstadoCompraId: number
    Borrado: number
    _all: number
  }


  export type CompraDetalleAvgAggregateInputType = {
    id?: true
    CompraId?: true
    ProductoId?: true
    Cantidad?: true
    Subtotal?: true
    EstadoCompraId?: true
  }

  export type CompraDetalleSumAggregateInputType = {
    id?: true
    CompraId?: true
    ProductoId?: true
    Cantidad?: true
    Subtotal?: true
    EstadoCompraId?: true
  }

  export type CompraDetalleMinAggregateInputType = {
    id?: true
    CompraId?: true
    ProductoId?: true
    Cantidad?: true
    Subtotal?: true
    EstadoCompraId?: true
    Borrado?: true
  }

  export type CompraDetalleMaxAggregateInputType = {
    id?: true
    CompraId?: true
    ProductoId?: true
    Cantidad?: true
    Subtotal?: true
    EstadoCompraId?: true
    Borrado?: true
  }

  export type CompraDetalleCountAggregateInputType = {
    id?: true
    CompraId?: true
    ProductoId?: true
    Cantidad?: true
    Subtotal?: true
    EstadoCompraId?: true
    Borrado?: true
    _all?: true
  }

  export type CompraDetalleAggregateArgs = {
    /**
     * Filter which CompraDetalle to aggregate.
     */
    where?: CompraDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompraDetalles to fetch.
     */
    orderBy?: Enumerable<CompraDetalleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompraDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompraDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompraDetalles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompraDetalles
    **/
    _count?: true | CompraDetalleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompraDetalleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompraDetalleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompraDetalleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompraDetalleMaxAggregateInputType
  }

  export type GetCompraDetalleAggregateType<T extends CompraDetalleAggregateArgs> = {
        [P in keyof T & keyof AggregateCompraDetalle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompraDetalle[P]>
      : GetScalarType<T[P], AggregateCompraDetalle[P]>
  }




  export type CompraDetalleGroupByArgs = {
    where?: CompraDetalleWhereInput
    orderBy?: Enumerable<CompraDetalleOrderByWithAggregationInput>
    by: CompraDetalleScalarFieldEnum[]
    having?: CompraDetalleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompraDetalleCountAggregateInputType | true
    _avg?: CompraDetalleAvgAggregateInputType
    _sum?: CompraDetalleSumAggregateInputType
    _min?: CompraDetalleMinAggregateInputType
    _max?: CompraDetalleMaxAggregateInputType
  }


  export type CompraDetalleGroupByOutputType = {
    id: number
    CompraId: number
    ProductoId: number
    Cantidad: number
    Subtotal: Decimal
    EstadoCompraId: number
    Borrado: boolean
    _count: CompraDetalleCountAggregateOutputType | null
    _avg: CompraDetalleAvgAggregateOutputType | null
    _sum: CompraDetalleSumAggregateOutputType | null
    _min: CompraDetalleMinAggregateOutputType | null
    _max: CompraDetalleMaxAggregateOutputType | null
  }

  type GetCompraDetalleGroupByPayload<T extends CompraDetalleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CompraDetalleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompraDetalleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompraDetalleGroupByOutputType[P]>
            : GetScalarType<T[P], CompraDetalleGroupByOutputType[P]>
        }
      >
    >


  export type CompraDetalleSelect = {
    id?: boolean
    CompraId?: boolean
    ProductoId?: boolean
    Cantidad?: boolean
    Subtotal?: boolean
    EstadoCompraId?: boolean
    Borrado?: boolean
    compra?: boolean | CompraArgs
    producto?: boolean | ProductoArgs
    estadoCompra?: boolean | EstadoCompraArgs
  }


  export type CompraDetalleInclude = {
    compra?: boolean | CompraArgs
    producto?: boolean | ProductoArgs
    estadoCompra?: boolean | EstadoCompraArgs
  }

  export type CompraDetalleGetPayload<S extends boolean | null | undefined | CompraDetalleArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CompraDetalle :
    S extends undefined ? never :
    S extends { include: any } & (CompraDetalleArgs | CompraDetalleFindManyArgs)
    ? CompraDetalle  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'compra' ? CompraGetPayload<S['include'][P]> :
        P extends 'producto' ? ProductoGetPayload<S['include'][P]> :
        P extends 'estadoCompra' ? EstadoCompraGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CompraDetalleArgs | CompraDetalleFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'compra' ? CompraGetPayload<S['select'][P]> :
        P extends 'producto' ? ProductoGetPayload<S['select'][P]> :
        P extends 'estadoCompra' ? EstadoCompraGetPayload<S['select'][P]> :  P extends keyof CompraDetalle ? CompraDetalle[P] : never
  } 
      : CompraDetalle


  type CompraDetalleCountArgs = 
    Omit<CompraDetalleFindManyArgs, 'select' | 'include'> & {
      select?: CompraDetalleCountAggregateInputType | true
    }

  export interface CompraDetalleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one CompraDetalle that matches the filter.
     * @param {CompraDetalleFindUniqueArgs} args - Arguments to find a CompraDetalle
     * @example
     * // Get one CompraDetalle
     * const compraDetalle = await prisma.compraDetalle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompraDetalleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CompraDetalleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CompraDetalle'> extends True ? Prisma__CompraDetalleClient<CompraDetalleGetPayload<T>> : Prisma__CompraDetalleClient<CompraDetalleGetPayload<T> | null, null>

    /**
     * Find one CompraDetalle that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompraDetalleFindUniqueOrThrowArgs} args - Arguments to find a CompraDetalle
     * @example
     * // Get one CompraDetalle
     * const compraDetalle = await prisma.compraDetalle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompraDetalleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CompraDetalleFindUniqueOrThrowArgs>
    ): Prisma__CompraDetalleClient<CompraDetalleGetPayload<T>>

    /**
     * Find the first CompraDetalle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraDetalleFindFirstArgs} args - Arguments to find a CompraDetalle
     * @example
     * // Get one CompraDetalle
     * const compraDetalle = await prisma.compraDetalle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompraDetalleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CompraDetalleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CompraDetalle'> extends True ? Prisma__CompraDetalleClient<CompraDetalleGetPayload<T>> : Prisma__CompraDetalleClient<CompraDetalleGetPayload<T> | null, null>

    /**
     * Find the first CompraDetalle that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraDetalleFindFirstOrThrowArgs} args - Arguments to find a CompraDetalle
     * @example
     * // Get one CompraDetalle
     * const compraDetalle = await prisma.compraDetalle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompraDetalleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CompraDetalleFindFirstOrThrowArgs>
    ): Prisma__CompraDetalleClient<CompraDetalleGetPayload<T>>

    /**
     * Find zero or more CompraDetalles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraDetalleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompraDetalles
     * const compraDetalles = await prisma.compraDetalle.findMany()
     * 
     * // Get first 10 CompraDetalles
     * const compraDetalles = await prisma.compraDetalle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compraDetalleWithIdOnly = await prisma.compraDetalle.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompraDetalleFindManyArgs>(
      args?: SelectSubset<T, CompraDetalleFindManyArgs>
    ): Prisma.PrismaPromise<Array<CompraDetalleGetPayload<T>>>

    /**
     * Create a CompraDetalle.
     * @param {CompraDetalleCreateArgs} args - Arguments to create a CompraDetalle.
     * @example
     * // Create one CompraDetalle
     * const CompraDetalle = await prisma.compraDetalle.create({
     *   data: {
     *     // ... data to create a CompraDetalle
     *   }
     * })
     * 
    **/
    create<T extends CompraDetalleCreateArgs>(
      args: SelectSubset<T, CompraDetalleCreateArgs>
    ): Prisma__CompraDetalleClient<CompraDetalleGetPayload<T>>

    /**
     * Create many CompraDetalles.
     *     @param {CompraDetalleCreateManyArgs} args - Arguments to create many CompraDetalles.
     *     @example
     *     // Create many CompraDetalles
     *     const compraDetalle = await prisma.compraDetalle.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompraDetalleCreateManyArgs>(
      args?: SelectSubset<T, CompraDetalleCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CompraDetalle.
     * @param {CompraDetalleDeleteArgs} args - Arguments to delete one CompraDetalle.
     * @example
     * // Delete one CompraDetalle
     * const CompraDetalle = await prisma.compraDetalle.delete({
     *   where: {
     *     // ... filter to delete one CompraDetalle
     *   }
     * })
     * 
    **/
    delete<T extends CompraDetalleDeleteArgs>(
      args: SelectSubset<T, CompraDetalleDeleteArgs>
    ): Prisma__CompraDetalleClient<CompraDetalleGetPayload<T>>

    /**
     * Update one CompraDetalle.
     * @param {CompraDetalleUpdateArgs} args - Arguments to update one CompraDetalle.
     * @example
     * // Update one CompraDetalle
     * const compraDetalle = await prisma.compraDetalle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompraDetalleUpdateArgs>(
      args: SelectSubset<T, CompraDetalleUpdateArgs>
    ): Prisma__CompraDetalleClient<CompraDetalleGetPayload<T>>

    /**
     * Delete zero or more CompraDetalles.
     * @param {CompraDetalleDeleteManyArgs} args - Arguments to filter CompraDetalles to delete.
     * @example
     * // Delete a few CompraDetalles
     * const { count } = await prisma.compraDetalle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompraDetalleDeleteManyArgs>(
      args?: SelectSubset<T, CompraDetalleDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompraDetalles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraDetalleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompraDetalles
     * const compraDetalle = await prisma.compraDetalle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompraDetalleUpdateManyArgs>(
      args: SelectSubset<T, CompraDetalleUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CompraDetalle.
     * @param {CompraDetalleUpsertArgs} args - Arguments to update or create a CompraDetalle.
     * @example
     * // Update or create a CompraDetalle
     * const compraDetalle = await prisma.compraDetalle.upsert({
     *   create: {
     *     // ... data to create a CompraDetalle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompraDetalle we want to update
     *   }
     * })
    **/
    upsert<T extends CompraDetalleUpsertArgs>(
      args: SelectSubset<T, CompraDetalleUpsertArgs>
    ): Prisma__CompraDetalleClient<CompraDetalleGetPayload<T>>

    /**
     * Count the number of CompraDetalles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraDetalleCountArgs} args - Arguments to filter CompraDetalles to count.
     * @example
     * // Count the number of CompraDetalles
     * const count = await prisma.compraDetalle.count({
     *   where: {
     *     // ... the filter for the CompraDetalles we want to count
     *   }
     * })
    **/
    count<T extends CompraDetalleCountArgs>(
      args?: Subset<T, CompraDetalleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompraDetalleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompraDetalle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraDetalleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompraDetalleAggregateArgs>(args: Subset<T, CompraDetalleAggregateArgs>): Prisma.PrismaPromise<GetCompraDetalleAggregateType<T>>

    /**
     * Group by CompraDetalle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraDetalleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompraDetalleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompraDetalleGroupByArgs['orderBy'] }
        : { orderBy?: CompraDetalleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompraDetalleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompraDetalleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CompraDetalle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CompraDetalleClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    compra<T extends CompraArgs= {}>(args?: Subset<T, CompraArgs>): Prisma__CompraClient<CompraGetPayload<T> | Null>;

    producto<T extends ProductoArgs= {}>(args?: Subset<T, ProductoArgs>): Prisma__ProductoClient<ProductoGetPayload<T> | Null>;

    estadoCompra<T extends EstadoCompraArgs= {}>(args?: Subset<T, EstadoCompraArgs>): Prisma__EstadoCompraClient<EstadoCompraGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CompraDetalle base type for findUnique actions
   */
  export type CompraDetalleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the CompraDetalle
     */
    select?: CompraDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraDetalleInclude | null
    /**
     * Filter, which CompraDetalle to fetch.
     */
    where: CompraDetalleWhereUniqueInput
  }

  /**
   * CompraDetalle findUnique
   */
  export interface CompraDetalleFindUniqueArgs extends CompraDetalleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CompraDetalle findUniqueOrThrow
   */
  export type CompraDetalleFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the CompraDetalle
     */
    select?: CompraDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraDetalleInclude | null
    /**
     * Filter, which CompraDetalle to fetch.
     */
    where: CompraDetalleWhereUniqueInput
  }


  /**
   * CompraDetalle base type for findFirst actions
   */
  export type CompraDetalleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the CompraDetalle
     */
    select?: CompraDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraDetalleInclude | null
    /**
     * Filter, which CompraDetalle to fetch.
     */
    where?: CompraDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompraDetalles to fetch.
     */
    orderBy?: Enumerable<CompraDetalleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompraDetalles.
     */
    cursor?: CompraDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompraDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompraDetalles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompraDetalles.
     */
    distinct?: Enumerable<CompraDetalleScalarFieldEnum>
  }

  /**
   * CompraDetalle findFirst
   */
  export interface CompraDetalleFindFirstArgs extends CompraDetalleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CompraDetalle findFirstOrThrow
   */
  export type CompraDetalleFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the CompraDetalle
     */
    select?: CompraDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraDetalleInclude | null
    /**
     * Filter, which CompraDetalle to fetch.
     */
    where?: CompraDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompraDetalles to fetch.
     */
    orderBy?: Enumerable<CompraDetalleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompraDetalles.
     */
    cursor?: CompraDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompraDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompraDetalles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompraDetalles.
     */
    distinct?: Enumerable<CompraDetalleScalarFieldEnum>
  }


  /**
   * CompraDetalle findMany
   */
  export type CompraDetalleFindManyArgs = {
    /**
     * Select specific fields to fetch from the CompraDetalle
     */
    select?: CompraDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraDetalleInclude | null
    /**
     * Filter, which CompraDetalles to fetch.
     */
    where?: CompraDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompraDetalles to fetch.
     */
    orderBy?: Enumerable<CompraDetalleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompraDetalles.
     */
    cursor?: CompraDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompraDetalles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompraDetalles.
     */
    skip?: number
    distinct?: Enumerable<CompraDetalleScalarFieldEnum>
  }


  /**
   * CompraDetalle create
   */
  export type CompraDetalleCreateArgs = {
    /**
     * Select specific fields to fetch from the CompraDetalle
     */
    select?: CompraDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraDetalleInclude | null
    /**
     * The data needed to create a CompraDetalle.
     */
    data: XOR<CompraDetalleCreateInput, CompraDetalleUncheckedCreateInput>
  }


  /**
   * CompraDetalle createMany
   */
  export type CompraDetalleCreateManyArgs = {
    /**
     * The data used to create many CompraDetalles.
     */
    data: Enumerable<CompraDetalleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CompraDetalle update
   */
  export type CompraDetalleUpdateArgs = {
    /**
     * Select specific fields to fetch from the CompraDetalle
     */
    select?: CompraDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraDetalleInclude | null
    /**
     * The data needed to update a CompraDetalle.
     */
    data: XOR<CompraDetalleUpdateInput, CompraDetalleUncheckedUpdateInput>
    /**
     * Choose, which CompraDetalle to update.
     */
    where: CompraDetalleWhereUniqueInput
  }


  /**
   * CompraDetalle updateMany
   */
  export type CompraDetalleUpdateManyArgs = {
    /**
     * The data used to update CompraDetalles.
     */
    data: XOR<CompraDetalleUpdateManyMutationInput, CompraDetalleUncheckedUpdateManyInput>
    /**
     * Filter which CompraDetalles to update
     */
    where?: CompraDetalleWhereInput
  }


  /**
   * CompraDetalle upsert
   */
  export type CompraDetalleUpsertArgs = {
    /**
     * Select specific fields to fetch from the CompraDetalle
     */
    select?: CompraDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraDetalleInclude | null
    /**
     * The filter to search for the CompraDetalle to update in case it exists.
     */
    where: CompraDetalleWhereUniqueInput
    /**
     * In case the CompraDetalle found by the `where` argument doesn't exist, create a new CompraDetalle with this data.
     */
    create: XOR<CompraDetalleCreateInput, CompraDetalleUncheckedCreateInput>
    /**
     * In case the CompraDetalle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompraDetalleUpdateInput, CompraDetalleUncheckedUpdateInput>
  }


  /**
   * CompraDetalle delete
   */
  export type CompraDetalleDeleteArgs = {
    /**
     * Select specific fields to fetch from the CompraDetalle
     */
    select?: CompraDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraDetalleInclude | null
    /**
     * Filter which CompraDetalle to delete.
     */
    where: CompraDetalleWhereUniqueInput
  }


  /**
   * CompraDetalle deleteMany
   */
  export type CompraDetalleDeleteManyArgs = {
    /**
     * Filter which CompraDetalles to delete
     */
    where?: CompraDetalleWhereInput
  }


  /**
   * CompraDetalle without action
   */
  export type CompraDetalleArgs = {
    /**
     * Select specific fields to fetch from the CompraDetalle
     */
    select?: CompraDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraDetalleInclude | null
  }



  /**
   * Model Evaluacion
   */


  export type AggregateEvaluacion = {
    _count: EvaluacionCountAggregateOutputType | null
    _avg: EvaluacionAvgAggregateOutputType | null
    _sum: EvaluacionSumAggregateOutputType | null
    _min: EvaluacionMinAggregateOutputType | null
    _max: EvaluacionMaxAggregateOutputType | null
  }

  export type EvaluacionAvgAggregateOutputType = {
    id: number | null
    CompraId: number | null
    EvaluadorId: number | null
    EvaluadoId: number | null
    Calificacion: number | null
  }

  export type EvaluacionSumAggregateOutputType = {
    id: number | null
    CompraId: number | null
    EvaluadorId: number | null
    EvaluadoId: number | null
    Calificacion: number | null
  }

  export type EvaluacionMinAggregateOutputType = {
    id: number | null
    CompraId: number | null
    EvaluadorId: number | null
    EvaluadoId: number | null
    Calificacion: number | null
    Borrado: boolean | null
  }

  export type EvaluacionMaxAggregateOutputType = {
    id: number | null
    CompraId: number | null
    EvaluadorId: number | null
    EvaluadoId: number | null
    Calificacion: number | null
    Borrado: boolean | null
  }

  export type EvaluacionCountAggregateOutputType = {
    id: number
    CompraId: number
    EvaluadorId: number
    EvaluadoId: number
    Calificacion: number
    Borrado: number
    _all: number
  }


  export type EvaluacionAvgAggregateInputType = {
    id?: true
    CompraId?: true
    EvaluadorId?: true
    EvaluadoId?: true
    Calificacion?: true
  }

  export type EvaluacionSumAggregateInputType = {
    id?: true
    CompraId?: true
    EvaluadorId?: true
    EvaluadoId?: true
    Calificacion?: true
  }

  export type EvaluacionMinAggregateInputType = {
    id?: true
    CompraId?: true
    EvaluadorId?: true
    EvaluadoId?: true
    Calificacion?: true
    Borrado?: true
  }

  export type EvaluacionMaxAggregateInputType = {
    id?: true
    CompraId?: true
    EvaluadorId?: true
    EvaluadoId?: true
    Calificacion?: true
    Borrado?: true
  }

  export type EvaluacionCountAggregateInputType = {
    id?: true
    CompraId?: true
    EvaluadorId?: true
    EvaluadoId?: true
    Calificacion?: true
    Borrado?: true
    _all?: true
  }

  export type EvaluacionAggregateArgs = {
    /**
     * Filter which Evaluacion to aggregate.
     */
    where?: EvaluacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evaluacions to fetch.
     */
    orderBy?: Enumerable<EvaluacionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EvaluacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evaluacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evaluacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Evaluacions
    **/
    _count?: true | EvaluacionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EvaluacionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EvaluacionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EvaluacionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EvaluacionMaxAggregateInputType
  }

  export type GetEvaluacionAggregateType<T extends EvaluacionAggregateArgs> = {
        [P in keyof T & keyof AggregateEvaluacion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvaluacion[P]>
      : GetScalarType<T[P], AggregateEvaluacion[P]>
  }




  export type EvaluacionGroupByArgs = {
    where?: EvaluacionWhereInput
    orderBy?: Enumerable<EvaluacionOrderByWithAggregationInput>
    by: EvaluacionScalarFieldEnum[]
    having?: EvaluacionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EvaluacionCountAggregateInputType | true
    _avg?: EvaluacionAvgAggregateInputType
    _sum?: EvaluacionSumAggregateInputType
    _min?: EvaluacionMinAggregateInputType
    _max?: EvaluacionMaxAggregateInputType
  }


  export type EvaluacionGroupByOutputType = {
    id: number
    CompraId: number
    EvaluadorId: number
    EvaluadoId: number
    Calificacion: number
    Borrado: boolean
    _count: EvaluacionCountAggregateOutputType | null
    _avg: EvaluacionAvgAggregateOutputType | null
    _sum: EvaluacionSumAggregateOutputType | null
    _min: EvaluacionMinAggregateOutputType | null
    _max: EvaluacionMaxAggregateOutputType | null
  }

  type GetEvaluacionGroupByPayload<T extends EvaluacionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EvaluacionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EvaluacionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EvaluacionGroupByOutputType[P]>
            : GetScalarType<T[P], EvaluacionGroupByOutputType[P]>
        }
      >
    >


  export type EvaluacionSelect = {
    id?: boolean
    CompraId?: boolean
    EvaluadorId?: boolean
    EvaluadoId?: boolean
    Calificacion?: boolean
    Borrado?: boolean
    compra?: boolean | CompraArgs
    evaluador?: boolean | UsuarioArgs
    evaluado?: boolean | UsuarioArgs
  }


  export type EvaluacionInclude = {
    compra?: boolean | CompraArgs
    evaluador?: boolean | UsuarioArgs
    evaluado?: boolean | UsuarioArgs
  }

  export type EvaluacionGetPayload<S extends boolean | null | undefined | EvaluacionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Evaluacion :
    S extends undefined ? never :
    S extends { include: any } & (EvaluacionArgs | EvaluacionFindManyArgs)
    ? Evaluacion  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'compra' ? CompraGetPayload<S['include'][P]> :
        P extends 'evaluador' ? UsuarioGetPayload<S['include'][P]> :
        P extends 'evaluado' ? UsuarioGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EvaluacionArgs | EvaluacionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'compra' ? CompraGetPayload<S['select'][P]> :
        P extends 'evaluador' ? UsuarioGetPayload<S['select'][P]> :
        P extends 'evaluado' ? UsuarioGetPayload<S['select'][P]> :  P extends keyof Evaluacion ? Evaluacion[P] : never
  } 
      : Evaluacion


  type EvaluacionCountArgs = 
    Omit<EvaluacionFindManyArgs, 'select' | 'include'> & {
      select?: EvaluacionCountAggregateInputType | true
    }

  export interface EvaluacionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Evaluacion that matches the filter.
     * @param {EvaluacionFindUniqueArgs} args - Arguments to find a Evaluacion
     * @example
     * // Get one Evaluacion
     * const evaluacion = await prisma.evaluacion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EvaluacionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EvaluacionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Evaluacion'> extends True ? Prisma__EvaluacionClient<EvaluacionGetPayload<T>> : Prisma__EvaluacionClient<EvaluacionGetPayload<T> | null, null>

    /**
     * Find one Evaluacion that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EvaluacionFindUniqueOrThrowArgs} args - Arguments to find a Evaluacion
     * @example
     * // Get one Evaluacion
     * const evaluacion = await prisma.evaluacion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EvaluacionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EvaluacionFindUniqueOrThrowArgs>
    ): Prisma__EvaluacionClient<EvaluacionGetPayload<T>>

    /**
     * Find the first Evaluacion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluacionFindFirstArgs} args - Arguments to find a Evaluacion
     * @example
     * // Get one Evaluacion
     * const evaluacion = await prisma.evaluacion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EvaluacionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EvaluacionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Evaluacion'> extends True ? Prisma__EvaluacionClient<EvaluacionGetPayload<T>> : Prisma__EvaluacionClient<EvaluacionGetPayload<T> | null, null>

    /**
     * Find the first Evaluacion that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluacionFindFirstOrThrowArgs} args - Arguments to find a Evaluacion
     * @example
     * // Get one Evaluacion
     * const evaluacion = await prisma.evaluacion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EvaluacionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EvaluacionFindFirstOrThrowArgs>
    ): Prisma__EvaluacionClient<EvaluacionGetPayload<T>>

    /**
     * Find zero or more Evaluacions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluacionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Evaluacions
     * const evaluacions = await prisma.evaluacion.findMany()
     * 
     * // Get first 10 Evaluacions
     * const evaluacions = await prisma.evaluacion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const evaluacionWithIdOnly = await prisma.evaluacion.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EvaluacionFindManyArgs>(
      args?: SelectSubset<T, EvaluacionFindManyArgs>
    ): Prisma.PrismaPromise<Array<EvaluacionGetPayload<T>>>

    /**
     * Create a Evaluacion.
     * @param {EvaluacionCreateArgs} args - Arguments to create a Evaluacion.
     * @example
     * // Create one Evaluacion
     * const Evaluacion = await prisma.evaluacion.create({
     *   data: {
     *     // ... data to create a Evaluacion
     *   }
     * })
     * 
    **/
    create<T extends EvaluacionCreateArgs>(
      args: SelectSubset<T, EvaluacionCreateArgs>
    ): Prisma__EvaluacionClient<EvaluacionGetPayload<T>>

    /**
     * Create many Evaluacions.
     *     @param {EvaluacionCreateManyArgs} args - Arguments to create many Evaluacions.
     *     @example
     *     // Create many Evaluacions
     *     const evaluacion = await prisma.evaluacion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EvaluacionCreateManyArgs>(
      args?: SelectSubset<T, EvaluacionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Evaluacion.
     * @param {EvaluacionDeleteArgs} args - Arguments to delete one Evaluacion.
     * @example
     * // Delete one Evaluacion
     * const Evaluacion = await prisma.evaluacion.delete({
     *   where: {
     *     // ... filter to delete one Evaluacion
     *   }
     * })
     * 
    **/
    delete<T extends EvaluacionDeleteArgs>(
      args: SelectSubset<T, EvaluacionDeleteArgs>
    ): Prisma__EvaluacionClient<EvaluacionGetPayload<T>>

    /**
     * Update one Evaluacion.
     * @param {EvaluacionUpdateArgs} args - Arguments to update one Evaluacion.
     * @example
     * // Update one Evaluacion
     * const evaluacion = await prisma.evaluacion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EvaluacionUpdateArgs>(
      args: SelectSubset<T, EvaluacionUpdateArgs>
    ): Prisma__EvaluacionClient<EvaluacionGetPayload<T>>

    /**
     * Delete zero or more Evaluacions.
     * @param {EvaluacionDeleteManyArgs} args - Arguments to filter Evaluacions to delete.
     * @example
     * // Delete a few Evaluacions
     * const { count } = await prisma.evaluacion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EvaluacionDeleteManyArgs>(
      args?: SelectSubset<T, EvaluacionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Evaluacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluacionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Evaluacions
     * const evaluacion = await prisma.evaluacion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EvaluacionUpdateManyArgs>(
      args: SelectSubset<T, EvaluacionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Evaluacion.
     * @param {EvaluacionUpsertArgs} args - Arguments to update or create a Evaluacion.
     * @example
     * // Update or create a Evaluacion
     * const evaluacion = await prisma.evaluacion.upsert({
     *   create: {
     *     // ... data to create a Evaluacion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Evaluacion we want to update
     *   }
     * })
    **/
    upsert<T extends EvaluacionUpsertArgs>(
      args: SelectSubset<T, EvaluacionUpsertArgs>
    ): Prisma__EvaluacionClient<EvaluacionGetPayload<T>>

    /**
     * Count the number of Evaluacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluacionCountArgs} args - Arguments to filter Evaluacions to count.
     * @example
     * // Count the number of Evaluacions
     * const count = await prisma.evaluacion.count({
     *   where: {
     *     // ... the filter for the Evaluacions we want to count
     *   }
     * })
    **/
    count<T extends EvaluacionCountArgs>(
      args?: Subset<T, EvaluacionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EvaluacionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Evaluacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluacionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EvaluacionAggregateArgs>(args: Subset<T, EvaluacionAggregateArgs>): Prisma.PrismaPromise<GetEvaluacionAggregateType<T>>

    /**
     * Group by Evaluacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluacionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EvaluacionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EvaluacionGroupByArgs['orderBy'] }
        : { orderBy?: EvaluacionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EvaluacionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEvaluacionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Evaluacion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EvaluacionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    compra<T extends CompraArgs= {}>(args?: Subset<T, CompraArgs>): Prisma__CompraClient<CompraGetPayload<T> | Null>;

    evaluador<T extends UsuarioArgs= {}>(args?: Subset<T, UsuarioArgs>): Prisma__UsuarioClient<UsuarioGetPayload<T> | Null>;

    evaluado<T extends UsuarioArgs= {}>(args?: Subset<T, UsuarioArgs>): Prisma__UsuarioClient<UsuarioGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Evaluacion base type for findUnique actions
   */
  export type EvaluacionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EvaluacionInclude | null
    /**
     * Filter, which Evaluacion to fetch.
     */
    where: EvaluacionWhereUniqueInput
  }

  /**
   * Evaluacion findUnique
   */
  export interface EvaluacionFindUniqueArgs extends EvaluacionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Evaluacion findUniqueOrThrow
   */
  export type EvaluacionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EvaluacionInclude | null
    /**
     * Filter, which Evaluacion to fetch.
     */
    where: EvaluacionWhereUniqueInput
  }


  /**
   * Evaluacion base type for findFirst actions
   */
  export type EvaluacionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EvaluacionInclude | null
    /**
     * Filter, which Evaluacion to fetch.
     */
    where?: EvaluacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evaluacions to fetch.
     */
    orderBy?: Enumerable<EvaluacionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Evaluacions.
     */
    cursor?: EvaluacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evaluacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evaluacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Evaluacions.
     */
    distinct?: Enumerable<EvaluacionScalarFieldEnum>
  }

  /**
   * Evaluacion findFirst
   */
  export interface EvaluacionFindFirstArgs extends EvaluacionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Evaluacion findFirstOrThrow
   */
  export type EvaluacionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EvaluacionInclude | null
    /**
     * Filter, which Evaluacion to fetch.
     */
    where?: EvaluacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evaluacions to fetch.
     */
    orderBy?: Enumerable<EvaluacionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Evaluacions.
     */
    cursor?: EvaluacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evaluacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evaluacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Evaluacions.
     */
    distinct?: Enumerable<EvaluacionScalarFieldEnum>
  }


  /**
   * Evaluacion findMany
   */
  export type EvaluacionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EvaluacionInclude | null
    /**
     * Filter, which Evaluacions to fetch.
     */
    where?: EvaluacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evaluacions to fetch.
     */
    orderBy?: Enumerable<EvaluacionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Evaluacions.
     */
    cursor?: EvaluacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evaluacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evaluacions.
     */
    skip?: number
    distinct?: Enumerable<EvaluacionScalarFieldEnum>
  }


  /**
   * Evaluacion create
   */
  export type EvaluacionCreateArgs = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EvaluacionInclude | null
    /**
     * The data needed to create a Evaluacion.
     */
    data: XOR<EvaluacionCreateInput, EvaluacionUncheckedCreateInput>
  }


  /**
   * Evaluacion createMany
   */
  export type EvaluacionCreateManyArgs = {
    /**
     * The data used to create many Evaluacions.
     */
    data: Enumerable<EvaluacionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Evaluacion update
   */
  export type EvaluacionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EvaluacionInclude | null
    /**
     * The data needed to update a Evaluacion.
     */
    data: XOR<EvaluacionUpdateInput, EvaluacionUncheckedUpdateInput>
    /**
     * Choose, which Evaluacion to update.
     */
    where: EvaluacionWhereUniqueInput
  }


  /**
   * Evaluacion updateMany
   */
  export type EvaluacionUpdateManyArgs = {
    /**
     * The data used to update Evaluacions.
     */
    data: XOR<EvaluacionUpdateManyMutationInput, EvaluacionUncheckedUpdateManyInput>
    /**
     * Filter which Evaluacions to update
     */
    where?: EvaluacionWhereInput
  }


  /**
   * Evaluacion upsert
   */
  export type EvaluacionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EvaluacionInclude | null
    /**
     * The filter to search for the Evaluacion to update in case it exists.
     */
    where: EvaluacionWhereUniqueInput
    /**
     * In case the Evaluacion found by the `where` argument doesn't exist, create a new Evaluacion with this data.
     */
    create: XOR<EvaluacionCreateInput, EvaluacionUncheckedCreateInput>
    /**
     * In case the Evaluacion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EvaluacionUpdateInput, EvaluacionUncheckedUpdateInput>
  }


  /**
   * Evaluacion delete
   */
  export type EvaluacionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EvaluacionInclude | null
    /**
     * Filter which Evaluacion to delete.
     */
    where: EvaluacionWhereUniqueInput
  }


  /**
   * Evaluacion deleteMany
   */
  export type EvaluacionDeleteManyArgs = {
    /**
     * Filter which Evaluacions to delete
     */
    where?: EvaluacionWhereInput
  }


  /**
   * Evaluacion without action
   */
  export type EvaluacionArgs = {
    /**
     * Select specific fields to fetch from the Evaluacion
     */
    select?: EvaluacionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EvaluacionInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CategoriaScalarFieldEnum: {
    id: 'id',
    Descripcion: 'Descripcion',
    Borrado: 'Borrado'
  };

  export type CategoriaScalarFieldEnum = (typeof CategoriaScalarFieldEnum)[keyof typeof CategoriaScalarFieldEnum]


  export const CompraDetalleScalarFieldEnum: {
    id: 'id',
    CompraId: 'CompraId',
    ProductoId: 'ProductoId',
    Cantidad: 'Cantidad',
    Subtotal: 'Subtotal',
    EstadoCompraId: 'EstadoCompraId',
    Borrado: 'Borrado'
  };

  export type CompraDetalleScalarFieldEnum = (typeof CompraDetalleScalarFieldEnum)[keyof typeof CompraDetalleScalarFieldEnum]


  export const CompraScalarFieldEnum: {
    id: 'id',
    ClienteId: 'ClienteId',
    DireccionId: 'DireccionId',
    MetodoPagoId: 'MetodoPagoId',
    Subtotal: 'Subtotal',
    Total: 'Total',
    Fecha: 'Fecha',
    Borrado: 'Borrado'
  };

  export type CompraScalarFieldEnum = (typeof CompraScalarFieldEnum)[keyof typeof CompraScalarFieldEnum]


  export const DireccionScalarFieldEnum: {
    id: 'id',
    UsuarioId: 'UsuarioId',
    Provincia: 'Provincia',
    Canton: 'Canton',
    Distrito: 'Distrito',
    Detalle: 'Detalle',
    CodigoPostal: 'CodigoPostal',
    Telefono: 'Telefono',
    Titulo: 'Titulo'
  };

  export type DireccionScalarFieldEnum = (typeof DireccionScalarFieldEnum)[keyof typeof DireccionScalarFieldEnum]


  export const EstadoCompraScalarFieldEnum: {
    id: 'id',
    Descripcion: 'Descripcion',
    Borrado: 'Borrado'
  };

  export type EstadoCompraScalarFieldEnum = (typeof EstadoCompraScalarFieldEnum)[keyof typeof EstadoCompraScalarFieldEnum]


  export const EstadoProductoScalarFieldEnum: {
    id: 'id',
    Descripcion: 'Descripcion',
    Borrado: 'Borrado'
  };

  export type EstadoProductoScalarFieldEnum = (typeof EstadoProductoScalarFieldEnum)[keyof typeof EstadoProductoScalarFieldEnum]


  export const EvaluacionScalarFieldEnum: {
    id: 'id',
    CompraId: 'CompraId',
    EvaluadorId: 'EvaluadorId',
    EvaluadoId: 'EvaluadoId',
    Calificacion: 'Calificacion',
    Borrado: 'Borrado'
  };

  export type EvaluacionScalarFieldEnum = (typeof EvaluacionScalarFieldEnum)[keyof typeof EvaluacionScalarFieldEnum]


  export const FotoProductoScalarFieldEnum: {
    id: 'id',
    ProductoId: 'ProductoId',
    Foto: 'Foto',
    Borrado: 'Borrado'
  };

  export type FotoProductoScalarFieldEnum = (typeof FotoProductoScalarFieldEnum)[keyof typeof FotoProductoScalarFieldEnum]


  export const MensajeScalarFieldEnum: {
    id: 'id',
    ClienteId: 'ClienteId',
    ProductoId: 'ProductoId',
    Pregunta: 'Pregunta',
    Respuesta: 'Respuesta',
    Borrado: 'Borrado',
    Fecha: 'Fecha'
  };

  export type MensajeScalarFieldEnum = (typeof MensajeScalarFieldEnum)[keyof typeof MensajeScalarFieldEnum]


  export const MetodoPagoScalarFieldEnum: {
    id: 'id',
    UsuarioId: 'UsuarioId',
    TipoPagoId: 'TipoPagoId',
    NumeroCuenta: 'NumeroCuenta',
    Expiracion: 'Expiracion',
    Titulo: 'Titulo',
    Borrado: 'Borrado'
  };

  export type MetodoPagoScalarFieldEnum = (typeof MetodoPagoScalarFieldEnum)[keyof typeof MetodoPagoScalarFieldEnum]


  export const ProductoScalarFieldEnum: {
    id: 'id',
    Nombre: 'Nombre',
    Descripcion: 'Descripcion',
    Precio: 'Precio',
    Cantidad: 'Cantidad',
    CategoriaId: 'CategoriaId',
    EstadoId: 'EstadoId',
    VendedorId: 'VendedorId',
    Borrado: 'Borrado'
  };

  export type ProductoScalarFieldEnum = (typeof ProductoScalarFieldEnum)[keyof typeof ProductoScalarFieldEnum]


  export const RolOnUsuarioScalarFieldEnum: {
    RolId: 'RolId',
    UsuarioId: 'UsuarioId'
  };

  export type RolOnUsuarioScalarFieldEnum = (typeof RolOnUsuarioScalarFieldEnum)[keyof typeof RolOnUsuarioScalarFieldEnum]


  export const RolScalarFieldEnum: {
    id: 'id',
    Descripcion: 'Descripcion',
    Borrado: 'Borrado'
  };

  export type RolScalarFieldEnum = (typeof RolScalarFieldEnum)[keyof typeof RolScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TipoPagoScalarFieldEnum: {
    id: 'id',
    Descripcion: 'Descripcion',
    Borrado: 'Borrado'
  };

  export type TipoPagoScalarFieldEnum = (typeof TipoPagoScalarFieldEnum)[keyof typeof TipoPagoScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    Nombre: 'Nombre',
    Apellido: 'Apellido',
    NombreVendedor: 'NombreVendedor',
    Telefono: 'Telefono',
    Email: 'Email',
    Identificacion: 'Identificacion',
    Contrasenna: 'Contrasenna',
    Calificacion: 'Calificacion',
    Deshabilitado: 'Deshabilitado'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: Enumerable<UsuarioWhereInput>
    OR?: Enumerable<UsuarioWhereInput>
    NOT?: Enumerable<UsuarioWhereInput>
    id?: IntFilter | number
    Nombre?: StringFilter | string
    Apellido?: StringFilter | string
    NombreVendedor?: StringNullableFilter | string | null
    Telefono?: StringFilter | string
    Email?: StringFilter | string
    Identificacion?: StringFilter | string
    Contrasenna?: StringFilter | string
    Calificacion?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFilter | boolean
    Roles?: RolOnUsuarioListRelationFilter
    MetodoPago?: MetodoPagoListRelationFilter
    Direccion?: DireccionListRelationFilter
    Producto?: ProductoListRelationFilter
    Mensaje?: MensajeListRelationFilter
    Compra?: CompraListRelationFilter
    Evaluadores?: EvaluacionListRelationFilter
    Evaluados?: EvaluacionListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Apellido?: SortOrder
    NombreVendedor?: SortOrder
    Telefono?: SortOrder
    Email?: SortOrder
    Identificacion?: SortOrder
    Contrasenna?: SortOrder
    Calificacion?: SortOrder
    Deshabilitado?: SortOrder
    Roles?: RolOnUsuarioOrderByRelationAggregateInput
    MetodoPago?: MetodoPagoOrderByRelationAggregateInput
    Direccion?: DireccionOrderByRelationAggregateInput
    Producto?: ProductoOrderByRelationAggregateInput
    Mensaje?: MensajeOrderByRelationAggregateInput
    Compra?: CompraOrderByRelationAggregateInput
    Evaluadores?: EvaluacionOrderByRelationAggregateInput
    Evaluados?: EvaluacionOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = {
    id?: number
    Email?: string
  }

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Apellido?: SortOrder
    NombreVendedor?: SortOrder
    Telefono?: SortOrder
    Email?: SortOrder
    Identificacion?: SortOrder
    Contrasenna?: SortOrder
    Calificacion?: SortOrder
    Deshabilitado?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    Nombre?: StringWithAggregatesFilter | string
    Apellido?: StringWithAggregatesFilter | string
    NombreVendedor?: StringNullableWithAggregatesFilter | string | null
    Telefono?: StringWithAggregatesFilter | string
    Email?: StringWithAggregatesFilter | string
    Identificacion?: StringWithAggregatesFilter | string
    Contrasenna?: StringWithAggregatesFilter | string
    Calificacion?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolWithAggregatesFilter | boolean
  }

  export type RolWhereInput = {
    AND?: Enumerable<RolWhereInput>
    OR?: Enumerable<RolWhereInput>
    NOT?: Enumerable<RolWhereInput>
    id?: IntFilter | number
    Descripcion?: StringFilter | string
    Borrado?: BoolFilter | boolean
    Usuarios?: RolOnUsuarioListRelationFilter
  }

  export type RolOrderByWithRelationInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
    Usuarios?: RolOnUsuarioOrderByRelationAggregateInput
  }

  export type RolWhereUniqueInput = {
    id?: number
  }

  export type RolOrderByWithAggregationInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
    _count?: RolCountOrderByAggregateInput
    _avg?: RolAvgOrderByAggregateInput
    _max?: RolMaxOrderByAggregateInput
    _min?: RolMinOrderByAggregateInput
    _sum?: RolSumOrderByAggregateInput
  }

  export type RolScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RolScalarWhereWithAggregatesInput>
    OR?: Enumerable<RolScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RolScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    Descripcion?: StringWithAggregatesFilter | string
    Borrado?: BoolWithAggregatesFilter | boolean
  }

  export type RolOnUsuarioWhereInput = {
    AND?: Enumerable<RolOnUsuarioWhereInput>
    OR?: Enumerable<RolOnUsuarioWhereInput>
    NOT?: Enumerable<RolOnUsuarioWhereInput>
    RolId?: IntFilter | number
    UsuarioId?: IntFilter | number
    rol?: XOR<RolRelationFilter, RolWhereInput>
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type RolOnUsuarioOrderByWithRelationInput = {
    RolId?: SortOrder
    UsuarioId?: SortOrder
    rol?: RolOrderByWithRelationInput
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type RolOnUsuarioWhereUniqueInput = {
    RolId_UsuarioId?: RolOnUsuarioRolIdUsuarioIdCompoundUniqueInput
  }

  export type RolOnUsuarioOrderByWithAggregationInput = {
    RolId?: SortOrder
    UsuarioId?: SortOrder
    _count?: RolOnUsuarioCountOrderByAggregateInput
    _avg?: RolOnUsuarioAvgOrderByAggregateInput
    _max?: RolOnUsuarioMaxOrderByAggregateInput
    _min?: RolOnUsuarioMinOrderByAggregateInput
    _sum?: RolOnUsuarioSumOrderByAggregateInput
  }

  export type RolOnUsuarioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RolOnUsuarioScalarWhereWithAggregatesInput>
    OR?: Enumerable<RolOnUsuarioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RolOnUsuarioScalarWhereWithAggregatesInput>
    RolId?: IntWithAggregatesFilter | number
    UsuarioId?: IntWithAggregatesFilter | number
  }

  export type TipoPagoWhereInput = {
    AND?: Enumerable<TipoPagoWhereInput>
    OR?: Enumerable<TipoPagoWhereInput>
    NOT?: Enumerable<TipoPagoWhereInput>
    id?: IntFilter | number
    Descripcion?: StringFilter | string
    Borrado?: BoolFilter | boolean
    MetodoPago?: MetodoPagoListRelationFilter
  }

  export type TipoPagoOrderByWithRelationInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
    MetodoPago?: MetodoPagoOrderByRelationAggregateInput
  }

  export type TipoPagoWhereUniqueInput = {
    id?: number
  }

  export type TipoPagoOrderByWithAggregationInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
    _count?: TipoPagoCountOrderByAggregateInput
    _avg?: TipoPagoAvgOrderByAggregateInput
    _max?: TipoPagoMaxOrderByAggregateInput
    _min?: TipoPagoMinOrderByAggregateInput
    _sum?: TipoPagoSumOrderByAggregateInput
  }

  export type TipoPagoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TipoPagoScalarWhereWithAggregatesInput>
    OR?: Enumerable<TipoPagoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TipoPagoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    Descripcion?: StringWithAggregatesFilter | string
    Borrado?: BoolWithAggregatesFilter | boolean
  }

  export type MetodoPagoWhereInput = {
    AND?: Enumerable<MetodoPagoWhereInput>
    OR?: Enumerable<MetodoPagoWhereInput>
    NOT?: Enumerable<MetodoPagoWhereInput>
    id?: IntFilter | number
    UsuarioId?: IntFilter | number
    TipoPagoId?: IntFilter | number
    NumeroCuenta?: StringFilter | string
    Expiracion?: DateTimeFilter | Date | string
    Titulo?: StringFilter | string
    Borrado?: BoolFilter | boolean
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    tipoPago?: XOR<TipoPagoRelationFilter, TipoPagoWhereInput>
    Compra?: CompraListRelationFilter
  }

  export type MetodoPagoOrderByWithRelationInput = {
    id?: SortOrder
    UsuarioId?: SortOrder
    TipoPagoId?: SortOrder
    NumeroCuenta?: SortOrder
    Expiracion?: SortOrder
    Titulo?: SortOrder
    Borrado?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    tipoPago?: TipoPagoOrderByWithRelationInput
    Compra?: CompraOrderByRelationAggregateInput
  }

  export type MetodoPagoWhereUniqueInput = {
    id?: number
  }

  export type MetodoPagoOrderByWithAggregationInput = {
    id?: SortOrder
    UsuarioId?: SortOrder
    TipoPagoId?: SortOrder
    NumeroCuenta?: SortOrder
    Expiracion?: SortOrder
    Titulo?: SortOrder
    Borrado?: SortOrder
    _count?: MetodoPagoCountOrderByAggregateInput
    _avg?: MetodoPagoAvgOrderByAggregateInput
    _max?: MetodoPagoMaxOrderByAggregateInput
    _min?: MetodoPagoMinOrderByAggregateInput
    _sum?: MetodoPagoSumOrderByAggregateInput
  }

  export type MetodoPagoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MetodoPagoScalarWhereWithAggregatesInput>
    OR?: Enumerable<MetodoPagoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MetodoPagoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    UsuarioId?: IntWithAggregatesFilter | number
    TipoPagoId?: IntWithAggregatesFilter | number
    NumeroCuenta?: StringWithAggregatesFilter | string
    Expiracion?: DateTimeWithAggregatesFilter | Date | string
    Titulo?: StringWithAggregatesFilter | string
    Borrado?: BoolWithAggregatesFilter | boolean
  }

  export type DireccionWhereInput = {
    AND?: Enumerable<DireccionWhereInput>
    OR?: Enumerable<DireccionWhereInput>
    NOT?: Enumerable<DireccionWhereInput>
    id?: IntFilter | number
    UsuarioId?: IntFilter | number
    Provincia?: StringFilter | string
    Canton?: StringFilter | string
    Distrito?: StringFilter | string
    Detalle?: StringFilter | string
    CodigoPostal?: StringFilter | string
    Telefono?: StringFilter | string
    Titulo?: StringFilter | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    Compra?: CompraListRelationFilter
  }

  export type DireccionOrderByWithRelationInput = {
    id?: SortOrder
    UsuarioId?: SortOrder
    Provincia?: SortOrder
    Canton?: SortOrder
    Distrito?: SortOrder
    Detalle?: SortOrder
    CodigoPostal?: SortOrder
    Telefono?: SortOrder
    Titulo?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    Compra?: CompraOrderByRelationAggregateInput
  }

  export type DireccionWhereUniqueInput = {
    id?: number
  }

  export type DireccionOrderByWithAggregationInput = {
    id?: SortOrder
    UsuarioId?: SortOrder
    Provincia?: SortOrder
    Canton?: SortOrder
    Distrito?: SortOrder
    Detalle?: SortOrder
    CodigoPostal?: SortOrder
    Telefono?: SortOrder
    Titulo?: SortOrder
    _count?: DireccionCountOrderByAggregateInput
    _avg?: DireccionAvgOrderByAggregateInput
    _max?: DireccionMaxOrderByAggregateInput
    _min?: DireccionMinOrderByAggregateInput
    _sum?: DireccionSumOrderByAggregateInput
  }

  export type DireccionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DireccionScalarWhereWithAggregatesInput>
    OR?: Enumerable<DireccionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DireccionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    UsuarioId?: IntWithAggregatesFilter | number
    Provincia?: StringWithAggregatesFilter | string
    Canton?: StringWithAggregatesFilter | string
    Distrito?: StringWithAggregatesFilter | string
    Detalle?: StringWithAggregatesFilter | string
    CodigoPostal?: StringWithAggregatesFilter | string
    Telefono?: StringWithAggregatesFilter | string
    Titulo?: StringWithAggregatesFilter | string
  }

  export type ProductoWhereInput = {
    AND?: Enumerable<ProductoWhereInput>
    OR?: Enumerable<ProductoWhereInput>
    NOT?: Enumerable<ProductoWhereInput>
    id?: IntFilter | number
    Nombre?: StringFilter | string
    Descripcion?: StringFilter | string
    Precio?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFilter | number
    CategoriaId?: IntFilter | number
    EstadoId?: IntFilter | number
    VendedorId?: IntFilter | number
    Borrado?: BoolFilter | boolean
    categoria?: XOR<CategoriaRelationFilter, CategoriaWhereInput>
    estado?: XOR<EstadoProductoRelationFilter, EstadoProductoWhereInput>
    vendedor?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    FotoProducto?: FotoProductoListRelationFilter
    Mensaje?: MensajeListRelationFilter
    CompraDetalle?: CompraDetalleListRelationFilter
  }

  export type ProductoOrderByWithRelationInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Descripcion?: SortOrder
    Precio?: SortOrder
    Cantidad?: SortOrder
    CategoriaId?: SortOrder
    EstadoId?: SortOrder
    VendedorId?: SortOrder
    Borrado?: SortOrder
    categoria?: CategoriaOrderByWithRelationInput
    estado?: EstadoProductoOrderByWithRelationInput
    vendedor?: UsuarioOrderByWithRelationInput
    FotoProducto?: FotoProductoOrderByRelationAggregateInput
    Mensaje?: MensajeOrderByRelationAggregateInput
    CompraDetalle?: CompraDetalleOrderByRelationAggregateInput
  }

  export type ProductoWhereUniqueInput = {
    id?: number
  }

  export type ProductoOrderByWithAggregationInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Descripcion?: SortOrder
    Precio?: SortOrder
    Cantidad?: SortOrder
    CategoriaId?: SortOrder
    EstadoId?: SortOrder
    VendedorId?: SortOrder
    Borrado?: SortOrder
    _count?: ProductoCountOrderByAggregateInput
    _avg?: ProductoAvgOrderByAggregateInput
    _max?: ProductoMaxOrderByAggregateInput
    _min?: ProductoMinOrderByAggregateInput
    _sum?: ProductoSumOrderByAggregateInput
  }

  export type ProductoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductoScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    Nombre?: StringWithAggregatesFilter | string
    Descripcion?: StringWithAggregatesFilter | string
    Precio?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    Cantidad?: IntWithAggregatesFilter | number
    CategoriaId?: IntWithAggregatesFilter | number
    EstadoId?: IntWithAggregatesFilter | number
    VendedorId?: IntWithAggregatesFilter | number
    Borrado?: BoolWithAggregatesFilter | boolean
  }

  export type CategoriaWhereInput = {
    AND?: Enumerable<CategoriaWhereInput>
    OR?: Enumerable<CategoriaWhereInput>
    NOT?: Enumerable<CategoriaWhereInput>
    id?: IntFilter | number
    Descripcion?: StringFilter | string
    Borrado?: BoolFilter | boolean
    Producto?: ProductoListRelationFilter
  }

  export type CategoriaOrderByWithRelationInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
    Producto?: ProductoOrderByRelationAggregateInput
  }

  export type CategoriaWhereUniqueInput = {
    id?: number
  }

  export type CategoriaOrderByWithAggregationInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
    _count?: CategoriaCountOrderByAggregateInput
    _avg?: CategoriaAvgOrderByAggregateInput
    _max?: CategoriaMaxOrderByAggregateInput
    _min?: CategoriaMinOrderByAggregateInput
    _sum?: CategoriaSumOrderByAggregateInput
  }

  export type CategoriaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoriaScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoriaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoriaScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    Descripcion?: StringWithAggregatesFilter | string
    Borrado?: BoolWithAggregatesFilter | boolean
  }

  export type EstadoProductoWhereInput = {
    AND?: Enumerable<EstadoProductoWhereInput>
    OR?: Enumerable<EstadoProductoWhereInput>
    NOT?: Enumerable<EstadoProductoWhereInput>
    id?: IntFilter | number
    Descripcion?: StringFilter | string
    Borrado?: BoolFilter | boolean
    Producto?: ProductoListRelationFilter
  }

  export type EstadoProductoOrderByWithRelationInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
    Producto?: ProductoOrderByRelationAggregateInput
  }

  export type EstadoProductoWhereUniqueInput = {
    id?: number
  }

  export type EstadoProductoOrderByWithAggregationInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
    _count?: EstadoProductoCountOrderByAggregateInput
    _avg?: EstadoProductoAvgOrderByAggregateInput
    _max?: EstadoProductoMaxOrderByAggregateInput
    _min?: EstadoProductoMinOrderByAggregateInput
    _sum?: EstadoProductoSumOrderByAggregateInput
  }

  export type EstadoProductoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EstadoProductoScalarWhereWithAggregatesInput>
    OR?: Enumerable<EstadoProductoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EstadoProductoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    Descripcion?: StringWithAggregatesFilter | string
    Borrado?: BoolWithAggregatesFilter | boolean
  }

  export type FotoProductoWhereInput = {
    AND?: Enumerable<FotoProductoWhereInput>
    OR?: Enumerable<FotoProductoWhereInput>
    NOT?: Enumerable<FotoProductoWhereInput>
    id?: IntFilter | number
    ProductoId?: IntFilter | number
    Foto?: StringFilter | string
    Borrado?: BoolFilter | boolean
    producto?: XOR<ProductoRelationFilter, ProductoWhereInput>
  }

  export type FotoProductoOrderByWithRelationInput = {
    id?: SortOrder
    ProductoId?: SortOrder
    Foto?: SortOrder
    Borrado?: SortOrder
    producto?: ProductoOrderByWithRelationInput
  }

  export type FotoProductoWhereUniqueInput = {
    id?: number
  }

  export type FotoProductoOrderByWithAggregationInput = {
    id?: SortOrder
    ProductoId?: SortOrder
    Foto?: SortOrder
    Borrado?: SortOrder
    _count?: FotoProductoCountOrderByAggregateInput
    _avg?: FotoProductoAvgOrderByAggregateInput
    _max?: FotoProductoMaxOrderByAggregateInput
    _min?: FotoProductoMinOrderByAggregateInput
    _sum?: FotoProductoSumOrderByAggregateInput
  }

  export type FotoProductoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FotoProductoScalarWhereWithAggregatesInput>
    OR?: Enumerable<FotoProductoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FotoProductoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    ProductoId?: IntWithAggregatesFilter | number
    Foto?: StringWithAggregatesFilter | string
    Borrado?: BoolWithAggregatesFilter | boolean
  }

  export type MensajeWhereInput = {
    AND?: Enumerable<MensajeWhereInput>
    OR?: Enumerable<MensajeWhereInput>
    NOT?: Enumerable<MensajeWhereInput>
    id?: IntFilter | number
    ClienteId?: IntFilter | number
    ProductoId?: IntFilter | number
    Pregunta?: StringFilter | string
    Respuesta?: StringNullableFilter | string | null
    Borrado?: BoolFilter | boolean
    Fecha?: DateTimeFilter | Date | string
    cliente?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    producto?: XOR<ProductoRelationFilter, ProductoWhereInput>
  }

  export type MensajeOrderByWithRelationInput = {
    id?: SortOrder
    ClienteId?: SortOrder
    ProductoId?: SortOrder
    Pregunta?: SortOrder
    Respuesta?: SortOrder
    Borrado?: SortOrder
    Fecha?: SortOrder
    cliente?: UsuarioOrderByWithRelationInput
    producto?: ProductoOrderByWithRelationInput
  }

  export type MensajeWhereUniqueInput = {
    id?: number
  }

  export type MensajeOrderByWithAggregationInput = {
    id?: SortOrder
    ClienteId?: SortOrder
    ProductoId?: SortOrder
    Pregunta?: SortOrder
    Respuesta?: SortOrder
    Borrado?: SortOrder
    Fecha?: SortOrder
    _count?: MensajeCountOrderByAggregateInput
    _avg?: MensajeAvgOrderByAggregateInput
    _max?: MensajeMaxOrderByAggregateInput
    _min?: MensajeMinOrderByAggregateInput
    _sum?: MensajeSumOrderByAggregateInput
  }

  export type MensajeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MensajeScalarWhereWithAggregatesInput>
    OR?: Enumerable<MensajeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MensajeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    ClienteId?: IntWithAggregatesFilter | number
    ProductoId?: IntWithAggregatesFilter | number
    Pregunta?: StringWithAggregatesFilter | string
    Respuesta?: StringNullableWithAggregatesFilter | string | null
    Borrado?: BoolWithAggregatesFilter | boolean
    Fecha?: DateTimeWithAggregatesFilter | Date | string
  }

  export type EstadoCompraWhereInput = {
    AND?: Enumerable<EstadoCompraWhereInput>
    OR?: Enumerable<EstadoCompraWhereInput>
    NOT?: Enumerable<EstadoCompraWhereInput>
    id?: IntFilter | number
    Descripcion?: StringFilter | string
    Borrado?: BoolFilter | boolean
    CompraDetalle?: CompraDetalleListRelationFilter
  }

  export type EstadoCompraOrderByWithRelationInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
    CompraDetalle?: CompraDetalleOrderByRelationAggregateInput
  }

  export type EstadoCompraWhereUniqueInput = {
    id?: number
  }

  export type EstadoCompraOrderByWithAggregationInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
    _count?: EstadoCompraCountOrderByAggregateInput
    _avg?: EstadoCompraAvgOrderByAggregateInput
    _max?: EstadoCompraMaxOrderByAggregateInput
    _min?: EstadoCompraMinOrderByAggregateInput
    _sum?: EstadoCompraSumOrderByAggregateInput
  }

  export type EstadoCompraScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EstadoCompraScalarWhereWithAggregatesInput>
    OR?: Enumerable<EstadoCompraScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EstadoCompraScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    Descripcion?: StringWithAggregatesFilter | string
    Borrado?: BoolWithAggregatesFilter | boolean
  }

  export type CompraWhereInput = {
    AND?: Enumerable<CompraWhereInput>
    OR?: Enumerable<CompraWhereInput>
    NOT?: Enumerable<CompraWhereInput>
    id?: IntFilter | number
    ClienteId?: IntFilter | number
    DireccionId?: IntFilter | number
    MetodoPagoId?: IntFilter | number
    Subtotal?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Total?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Fecha?: DateTimeFilter | Date | string
    Borrado?: BoolFilter | boolean
    cliente?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    direccion?: XOR<DireccionRelationFilter, DireccionWhereInput>
    metodoPago?: XOR<MetodoPagoRelationFilter, MetodoPagoWhereInput>
    CompraDetalle?: CompraDetalleListRelationFilter
    Evaluacion?: EvaluacionListRelationFilter
  }

  export type CompraOrderByWithRelationInput = {
    id?: SortOrder
    ClienteId?: SortOrder
    DireccionId?: SortOrder
    MetodoPagoId?: SortOrder
    Subtotal?: SortOrder
    Total?: SortOrder
    Fecha?: SortOrder
    Borrado?: SortOrder
    cliente?: UsuarioOrderByWithRelationInput
    direccion?: DireccionOrderByWithRelationInput
    metodoPago?: MetodoPagoOrderByWithRelationInput
    CompraDetalle?: CompraDetalleOrderByRelationAggregateInput
    Evaluacion?: EvaluacionOrderByRelationAggregateInput
  }

  export type CompraWhereUniqueInput = {
    id?: number
  }

  export type CompraOrderByWithAggregationInput = {
    id?: SortOrder
    ClienteId?: SortOrder
    DireccionId?: SortOrder
    MetodoPagoId?: SortOrder
    Subtotal?: SortOrder
    Total?: SortOrder
    Fecha?: SortOrder
    Borrado?: SortOrder
    _count?: CompraCountOrderByAggregateInput
    _avg?: CompraAvgOrderByAggregateInput
    _max?: CompraMaxOrderByAggregateInput
    _min?: CompraMinOrderByAggregateInput
    _sum?: CompraSumOrderByAggregateInput
  }

  export type CompraScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CompraScalarWhereWithAggregatesInput>
    OR?: Enumerable<CompraScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CompraScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    ClienteId?: IntWithAggregatesFilter | number
    DireccionId?: IntWithAggregatesFilter | number
    MetodoPagoId?: IntWithAggregatesFilter | number
    Subtotal?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    Total?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    Fecha?: DateTimeWithAggregatesFilter | Date | string
    Borrado?: BoolWithAggregatesFilter | boolean
  }

  export type CompraDetalleWhereInput = {
    AND?: Enumerable<CompraDetalleWhereInput>
    OR?: Enumerable<CompraDetalleWhereInput>
    NOT?: Enumerable<CompraDetalleWhereInput>
    id?: IntFilter | number
    CompraId?: IntFilter | number
    ProductoId?: IntFilter | number
    Cantidad?: IntFilter | number
    Subtotal?: DecimalFilter | Decimal | DecimalJsLike | number | string
    EstadoCompraId?: IntFilter | number
    Borrado?: BoolFilter | boolean
    compra?: XOR<CompraRelationFilter, CompraWhereInput>
    producto?: XOR<ProductoRelationFilter, ProductoWhereInput>
    estadoCompra?: XOR<EstadoCompraRelationFilter, EstadoCompraWhereInput>
  }

  export type CompraDetalleOrderByWithRelationInput = {
    id?: SortOrder
    CompraId?: SortOrder
    ProductoId?: SortOrder
    Cantidad?: SortOrder
    Subtotal?: SortOrder
    EstadoCompraId?: SortOrder
    Borrado?: SortOrder
    compra?: CompraOrderByWithRelationInput
    producto?: ProductoOrderByWithRelationInput
    estadoCompra?: EstadoCompraOrderByWithRelationInput
  }

  export type CompraDetalleWhereUniqueInput = {
    id?: number
  }

  export type CompraDetalleOrderByWithAggregationInput = {
    id?: SortOrder
    CompraId?: SortOrder
    ProductoId?: SortOrder
    Cantidad?: SortOrder
    Subtotal?: SortOrder
    EstadoCompraId?: SortOrder
    Borrado?: SortOrder
    _count?: CompraDetalleCountOrderByAggregateInput
    _avg?: CompraDetalleAvgOrderByAggregateInput
    _max?: CompraDetalleMaxOrderByAggregateInput
    _min?: CompraDetalleMinOrderByAggregateInput
    _sum?: CompraDetalleSumOrderByAggregateInput
  }

  export type CompraDetalleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CompraDetalleScalarWhereWithAggregatesInput>
    OR?: Enumerable<CompraDetalleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CompraDetalleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    CompraId?: IntWithAggregatesFilter | number
    ProductoId?: IntWithAggregatesFilter | number
    Cantidad?: IntWithAggregatesFilter | number
    Subtotal?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    EstadoCompraId?: IntWithAggregatesFilter | number
    Borrado?: BoolWithAggregatesFilter | boolean
  }

  export type EvaluacionWhereInput = {
    AND?: Enumerable<EvaluacionWhereInput>
    OR?: Enumerable<EvaluacionWhereInput>
    NOT?: Enumerable<EvaluacionWhereInput>
    id?: IntFilter | number
    CompraId?: IntFilter | number
    EvaluadorId?: IntFilter | number
    EvaluadoId?: IntFilter | number
    Calificacion?: IntFilter | number
    Borrado?: BoolFilter | boolean
    compra?: XOR<CompraRelationFilter, CompraWhereInput>
    evaluador?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    evaluado?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type EvaluacionOrderByWithRelationInput = {
    id?: SortOrder
    CompraId?: SortOrder
    EvaluadorId?: SortOrder
    EvaluadoId?: SortOrder
    Calificacion?: SortOrder
    Borrado?: SortOrder
    compra?: CompraOrderByWithRelationInput
    evaluador?: UsuarioOrderByWithRelationInput
    evaluado?: UsuarioOrderByWithRelationInput
  }

  export type EvaluacionWhereUniqueInput = {
    id?: number
  }

  export type EvaluacionOrderByWithAggregationInput = {
    id?: SortOrder
    CompraId?: SortOrder
    EvaluadorId?: SortOrder
    EvaluadoId?: SortOrder
    Calificacion?: SortOrder
    Borrado?: SortOrder
    _count?: EvaluacionCountOrderByAggregateInput
    _avg?: EvaluacionAvgOrderByAggregateInput
    _max?: EvaluacionMaxOrderByAggregateInput
    _min?: EvaluacionMinOrderByAggregateInput
    _sum?: EvaluacionSumOrderByAggregateInput
  }

  export type EvaluacionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EvaluacionScalarWhereWithAggregatesInput>
    OR?: Enumerable<EvaluacionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EvaluacionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    CompraId?: IntWithAggregatesFilter | number
    EvaluadorId?: IntWithAggregatesFilter | number
    EvaluadoId?: IntWithAggregatesFilter | number
    Calificacion?: IntWithAggregatesFilter | number
    Borrado?: BoolWithAggregatesFilter | boolean
  }

  export type UsuarioCreateInput = {
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
    Roles?: RolOnUsuarioCreateNestedManyWithoutUsuarioInput
    MetodoPago?: MetodoPagoCreateNestedManyWithoutUsuarioInput
    Direccion?: DireccionCreateNestedManyWithoutUsuarioInput
    Producto?: ProductoCreateNestedManyWithoutVendedorInput
    Mensaje?: MensajeCreateNestedManyWithoutClienteInput
    Compra?: CompraCreateNestedManyWithoutClienteInput
    Evaluadores?: EvaluacionCreateNestedManyWithoutEvaluadorInput
    Evaluados?: EvaluacionCreateNestedManyWithoutEvaluadoInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
    Roles?: RolOnUsuarioUncheckedCreateNestedManyWithoutUsuarioInput
    MetodoPago?: MetodoPagoUncheckedCreateNestedManyWithoutUsuarioInput
    Direccion?: DireccionUncheckedCreateNestedManyWithoutUsuarioInput
    Producto?: ProductoUncheckedCreateNestedManyWithoutVendedorInput
    Mensaje?: MensajeUncheckedCreateNestedManyWithoutClienteInput
    Compra?: CompraUncheckedCreateNestedManyWithoutClienteInput
    Evaluadores?: EvaluacionUncheckedCreateNestedManyWithoutEvaluadorInput
    Evaluados?: EvaluacionUncheckedCreateNestedManyWithoutEvaluadoInput
  }

  export type UsuarioUpdateInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
    Roles?: RolOnUsuarioUpdateManyWithoutUsuarioNestedInput
    MetodoPago?: MetodoPagoUpdateManyWithoutUsuarioNestedInput
    Direccion?: DireccionUpdateManyWithoutUsuarioNestedInput
    Producto?: ProductoUpdateManyWithoutVendedorNestedInput
    Mensaje?: MensajeUpdateManyWithoutClienteNestedInput
    Compra?: CompraUpdateManyWithoutClienteNestedInput
    Evaluadores?: EvaluacionUpdateManyWithoutEvaluadorNestedInput
    Evaluados?: EvaluacionUpdateManyWithoutEvaluadoNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
    Roles?: RolOnUsuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    MetodoPago?: MetodoPagoUncheckedUpdateManyWithoutUsuarioNestedInput
    Direccion?: DireccionUncheckedUpdateManyWithoutUsuarioNestedInput
    Producto?: ProductoUncheckedUpdateManyWithoutVendedorNestedInput
    Mensaje?: MensajeUncheckedUpdateManyWithoutClienteNestedInput
    Compra?: CompraUncheckedUpdateManyWithoutClienteNestedInput
    Evaluadores?: EvaluacionUncheckedUpdateManyWithoutEvaluadorNestedInput
    Evaluados?: EvaluacionUncheckedUpdateManyWithoutEvaluadoNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
  }

  export type UsuarioUpdateManyMutationInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RolCreateInput = {
    Descripcion: string
    Borrado?: boolean
    Usuarios?: RolOnUsuarioCreateNestedManyWithoutRolInput
  }

  export type RolUncheckedCreateInput = {
    id?: number
    Descripcion: string
    Borrado?: boolean
    Usuarios?: RolOnUsuarioUncheckedCreateNestedManyWithoutRolInput
  }

  export type RolUpdateInput = {
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Usuarios?: RolOnUsuarioUpdateManyWithoutRolNestedInput
  }

  export type RolUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Usuarios?: RolOnUsuarioUncheckedUpdateManyWithoutRolNestedInput
  }

  export type RolCreateManyInput = {
    id?: number
    Descripcion: string
    Borrado?: boolean
  }

  export type RolUpdateManyMutationInput = {
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RolUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RolOnUsuarioCreateInput = {
    rol: RolCreateNestedOneWithoutUsuariosInput
    usuario: UsuarioCreateNestedOneWithoutRolesInput
  }

  export type RolOnUsuarioUncheckedCreateInput = {
    RolId: number
    UsuarioId: number
  }

  export type RolOnUsuarioUpdateInput = {
    rol?: RolUpdateOneRequiredWithoutUsuariosNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutRolesNestedInput
  }

  export type RolOnUsuarioUncheckedUpdateInput = {
    RolId?: IntFieldUpdateOperationsInput | number
    UsuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type RolOnUsuarioCreateManyInput = {
    RolId: number
    UsuarioId: number
  }

  export type RolOnUsuarioUpdateManyMutationInput = {

  }

  export type RolOnUsuarioUncheckedUpdateManyInput = {
    RolId?: IntFieldUpdateOperationsInput | number
    UsuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type TipoPagoCreateInput = {
    Descripcion: string
    Borrado?: boolean
    MetodoPago?: MetodoPagoCreateNestedManyWithoutTipoPagoInput
  }

  export type TipoPagoUncheckedCreateInput = {
    id?: number
    Descripcion: string
    Borrado?: boolean
    MetodoPago?: MetodoPagoUncheckedCreateNestedManyWithoutTipoPagoInput
  }

  export type TipoPagoUpdateInput = {
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    MetodoPago?: MetodoPagoUpdateManyWithoutTipoPagoNestedInput
  }

  export type TipoPagoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    MetodoPago?: MetodoPagoUncheckedUpdateManyWithoutTipoPagoNestedInput
  }

  export type TipoPagoCreateManyInput = {
    id?: number
    Descripcion: string
    Borrado?: boolean
  }

  export type TipoPagoUpdateManyMutationInput = {
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TipoPagoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MetodoPagoCreateInput = {
    NumeroCuenta: string
    Expiracion: Date | string
    Titulo: string
    Borrado?: boolean
    usuario: UsuarioCreateNestedOneWithoutMetodoPagoInput
    tipoPago: TipoPagoCreateNestedOneWithoutMetodoPagoInput
    Compra?: CompraCreateNestedManyWithoutMetodoPagoInput
  }

  export type MetodoPagoUncheckedCreateInput = {
    id?: number
    UsuarioId: number
    TipoPagoId: number
    NumeroCuenta: string
    Expiracion: Date | string
    Titulo: string
    Borrado?: boolean
    Compra?: CompraUncheckedCreateNestedManyWithoutMetodoPagoInput
  }

  export type MetodoPagoUpdateInput = {
    NumeroCuenta?: StringFieldUpdateOperationsInput | string
    Expiracion?: DateTimeFieldUpdateOperationsInput | Date | string
    Titulo?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    usuario?: UsuarioUpdateOneRequiredWithoutMetodoPagoNestedInput
    tipoPago?: TipoPagoUpdateOneRequiredWithoutMetodoPagoNestedInput
    Compra?: CompraUpdateManyWithoutMetodoPagoNestedInput
  }

  export type MetodoPagoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    UsuarioId?: IntFieldUpdateOperationsInput | number
    TipoPagoId?: IntFieldUpdateOperationsInput | number
    NumeroCuenta?: StringFieldUpdateOperationsInput | string
    Expiracion?: DateTimeFieldUpdateOperationsInput | Date | string
    Titulo?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Compra?: CompraUncheckedUpdateManyWithoutMetodoPagoNestedInput
  }

  export type MetodoPagoCreateManyInput = {
    id?: number
    UsuarioId: number
    TipoPagoId: number
    NumeroCuenta: string
    Expiracion: Date | string
    Titulo: string
    Borrado?: boolean
  }

  export type MetodoPagoUpdateManyMutationInput = {
    NumeroCuenta?: StringFieldUpdateOperationsInput | string
    Expiracion?: DateTimeFieldUpdateOperationsInput | Date | string
    Titulo?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MetodoPagoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    UsuarioId?: IntFieldUpdateOperationsInput | number
    TipoPagoId?: IntFieldUpdateOperationsInput | number
    NumeroCuenta?: StringFieldUpdateOperationsInput | string
    Expiracion?: DateTimeFieldUpdateOperationsInput | Date | string
    Titulo?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DireccionCreateInput = {
    Provincia: string
    Canton: string
    Distrito: string
    Detalle: string
    CodigoPostal: string
    Telefono: string
    Titulo: string
    usuario: UsuarioCreateNestedOneWithoutDireccionInput
    Compra?: CompraCreateNestedManyWithoutDireccionInput
  }

  export type DireccionUncheckedCreateInput = {
    id?: number
    UsuarioId: number
    Provincia: string
    Canton: string
    Distrito: string
    Detalle: string
    CodigoPostal: string
    Telefono: string
    Titulo: string
    Compra?: CompraUncheckedCreateNestedManyWithoutDireccionInput
  }

  export type DireccionUpdateInput = {
    Provincia?: StringFieldUpdateOperationsInput | string
    Canton?: StringFieldUpdateOperationsInput | string
    Distrito?: StringFieldUpdateOperationsInput | string
    Detalle?: StringFieldUpdateOperationsInput | string
    CodigoPostal?: StringFieldUpdateOperationsInput | string
    Telefono?: StringFieldUpdateOperationsInput | string
    Titulo?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneRequiredWithoutDireccionNestedInput
    Compra?: CompraUpdateManyWithoutDireccionNestedInput
  }

  export type DireccionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    UsuarioId?: IntFieldUpdateOperationsInput | number
    Provincia?: StringFieldUpdateOperationsInput | string
    Canton?: StringFieldUpdateOperationsInput | string
    Distrito?: StringFieldUpdateOperationsInput | string
    Detalle?: StringFieldUpdateOperationsInput | string
    CodigoPostal?: StringFieldUpdateOperationsInput | string
    Telefono?: StringFieldUpdateOperationsInput | string
    Titulo?: StringFieldUpdateOperationsInput | string
    Compra?: CompraUncheckedUpdateManyWithoutDireccionNestedInput
  }

  export type DireccionCreateManyInput = {
    id?: number
    UsuarioId: number
    Provincia: string
    Canton: string
    Distrito: string
    Detalle: string
    CodigoPostal: string
    Telefono: string
    Titulo: string
  }

  export type DireccionUpdateManyMutationInput = {
    Provincia?: StringFieldUpdateOperationsInput | string
    Canton?: StringFieldUpdateOperationsInput | string
    Distrito?: StringFieldUpdateOperationsInput | string
    Detalle?: StringFieldUpdateOperationsInput | string
    CodigoPostal?: StringFieldUpdateOperationsInput | string
    Telefono?: StringFieldUpdateOperationsInput | string
    Titulo?: StringFieldUpdateOperationsInput | string
  }

  export type DireccionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    UsuarioId?: IntFieldUpdateOperationsInput | number
    Provincia?: StringFieldUpdateOperationsInput | string
    Canton?: StringFieldUpdateOperationsInput | string
    Distrito?: StringFieldUpdateOperationsInput | string
    Detalle?: StringFieldUpdateOperationsInput | string
    CodigoPostal?: StringFieldUpdateOperationsInput | string
    Telefono?: StringFieldUpdateOperationsInput | string
    Titulo?: StringFieldUpdateOperationsInput | string
  }

  export type ProductoCreateInput = {
    Nombre: string
    Descripcion: string
    Precio: Decimal | DecimalJsLike | number | string
    Cantidad: number
    Borrado?: boolean
    categoria: CategoriaCreateNestedOneWithoutProductoInput
    estado: EstadoProductoCreateNestedOneWithoutProductoInput
    vendedor: UsuarioCreateNestedOneWithoutProductoInput
    FotoProducto?: FotoProductoCreateNestedManyWithoutProductoInput
    Mensaje?: MensajeCreateNestedManyWithoutProductoInput
    CompraDetalle?: CompraDetalleCreateNestedManyWithoutProductoInput
  }

  export type ProductoUncheckedCreateInput = {
    id?: number
    Nombre: string
    Descripcion: string
    Precio: Decimal | DecimalJsLike | number | string
    Cantidad: number
    CategoriaId: number
    EstadoId: number
    VendedorId: number
    Borrado?: boolean
    FotoProducto?: FotoProductoUncheckedCreateNestedManyWithoutProductoInput
    Mensaje?: MensajeUncheckedCreateNestedManyWithoutProductoInput
    CompraDetalle?: CompraDetalleUncheckedCreateNestedManyWithoutProductoInput
  }

  export type ProductoUpdateInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    categoria?: CategoriaUpdateOneRequiredWithoutProductoNestedInput
    estado?: EstadoProductoUpdateOneRequiredWithoutProductoNestedInput
    vendedor?: UsuarioUpdateOneRequiredWithoutProductoNestedInput
    FotoProducto?: FotoProductoUpdateManyWithoutProductoNestedInput
    Mensaje?: MensajeUpdateManyWithoutProductoNestedInput
    CompraDetalle?: CompraDetalleUpdateManyWithoutProductoNestedInput
  }

  export type ProductoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFieldUpdateOperationsInput | number
    CategoriaId?: IntFieldUpdateOperationsInput | number
    EstadoId?: IntFieldUpdateOperationsInput | number
    VendedorId?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    FotoProducto?: FotoProductoUncheckedUpdateManyWithoutProductoNestedInput
    Mensaje?: MensajeUncheckedUpdateManyWithoutProductoNestedInput
    CompraDetalle?: CompraDetalleUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type ProductoCreateManyInput = {
    id?: number
    Nombre: string
    Descripcion: string
    Precio: Decimal | DecimalJsLike | number | string
    Cantidad: number
    CategoriaId: number
    EstadoId: number
    VendedorId: number
    Borrado?: boolean
  }

  export type ProductoUpdateManyMutationInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFieldUpdateOperationsInput | number
    CategoriaId?: IntFieldUpdateOperationsInput | number
    EstadoId?: IntFieldUpdateOperationsInput | number
    VendedorId?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CategoriaCreateInput = {
    Descripcion: string
    Borrado?: boolean
    Producto?: ProductoCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaUncheckedCreateInput = {
    id?: number
    Descripcion: string
    Borrado?: boolean
    Producto?: ProductoUncheckedCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaUpdateInput = {
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Producto?: ProductoUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoriaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Producto?: ProductoUncheckedUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoriaCreateManyInput = {
    id?: number
    Descripcion: string
    Borrado?: boolean
  }

  export type CategoriaUpdateManyMutationInput = {
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CategoriaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EstadoProductoCreateInput = {
    Descripcion: string
    Borrado?: boolean
    Producto?: ProductoCreateNestedManyWithoutEstadoInput
  }

  export type EstadoProductoUncheckedCreateInput = {
    id?: number
    Descripcion: string
    Borrado?: boolean
    Producto?: ProductoUncheckedCreateNestedManyWithoutEstadoInput
  }

  export type EstadoProductoUpdateInput = {
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Producto?: ProductoUpdateManyWithoutEstadoNestedInput
  }

  export type EstadoProductoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Producto?: ProductoUncheckedUpdateManyWithoutEstadoNestedInput
  }

  export type EstadoProductoCreateManyInput = {
    id?: number
    Descripcion: string
    Borrado?: boolean
  }

  export type EstadoProductoUpdateManyMutationInput = {
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EstadoProductoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FotoProductoCreateInput = {
    Foto: string
    Borrado?: boolean
    producto: ProductoCreateNestedOneWithoutFotoProductoInput
  }

  export type FotoProductoUncheckedCreateInput = {
    id?: number
    ProductoId: number
    Foto: string
    Borrado?: boolean
  }

  export type FotoProductoUpdateInput = {
    Foto?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    producto?: ProductoUpdateOneRequiredWithoutFotoProductoNestedInput
  }

  export type FotoProductoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ProductoId?: IntFieldUpdateOperationsInput | number
    Foto?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FotoProductoCreateManyInput = {
    id?: number
    ProductoId: number
    Foto: string
    Borrado?: boolean
  }

  export type FotoProductoUpdateManyMutationInput = {
    Foto?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FotoProductoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ProductoId?: IntFieldUpdateOperationsInput | number
    Foto?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MensajeCreateInput = {
    Pregunta: string
    Respuesta?: string | null
    Borrado?: boolean
    Fecha?: Date | string
    cliente: UsuarioCreateNestedOneWithoutMensajeInput
    producto: ProductoCreateNestedOneWithoutMensajeInput
  }

  export type MensajeUncheckedCreateInput = {
    id?: number
    ClienteId: number
    ProductoId: number
    Pregunta: string
    Respuesta?: string | null
    Borrado?: boolean
    Fecha?: Date | string
  }

  export type MensajeUpdateInput = {
    Pregunta?: StringFieldUpdateOperationsInput | string
    Respuesta?: NullableStringFieldUpdateOperationsInput | string | null
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: UsuarioUpdateOneRequiredWithoutMensajeNestedInput
    producto?: ProductoUpdateOneRequiredWithoutMensajeNestedInput
  }

  export type MensajeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ClienteId?: IntFieldUpdateOperationsInput | number
    ProductoId?: IntFieldUpdateOperationsInput | number
    Pregunta?: StringFieldUpdateOperationsInput | string
    Respuesta?: NullableStringFieldUpdateOperationsInput | string | null
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensajeCreateManyInput = {
    id?: number
    ClienteId: number
    ProductoId: number
    Pregunta: string
    Respuesta?: string | null
    Borrado?: boolean
    Fecha?: Date | string
  }

  export type MensajeUpdateManyMutationInput = {
    Pregunta?: StringFieldUpdateOperationsInput | string
    Respuesta?: NullableStringFieldUpdateOperationsInput | string | null
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensajeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ClienteId?: IntFieldUpdateOperationsInput | number
    ProductoId?: IntFieldUpdateOperationsInput | number
    Pregunta?: StringFieldUpdateOperationsInput | string
    Respuesta?: NullableStringFieldUpdateOperationsInput | string | null
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EstadoCompraCreateInput = {
    Descripcion: string
    Borrado?: boolean
    CompraDetalle?: CompraDetalleCreateNestedManyWithoutEstadoCompraInput
  }

  export type EstadoCompraUncheckedCreateInput = {
    id?: number
    Descripcion: string
    Borrado?: boolean
    CompraDetalle?: CompraDetalleUncheckedCreateNestedManyWithoutEstadoCompraInput
  }

  export type EstadoCompraUpdateInput = {
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    CompraDetalle?: CompraDetalleUpdateManyWithoutEstadoCompraNestedInput
  }

  export type EstadoCompraUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    CompraDetalle?: CompraDetalleUncheckedUpdateManyWithoutEstadoCompraNestedInput
  }

  export type EstadoCompraCreateManyInput = {
    id?: number
    Descripcion: string
    Borrado?: boolean
  }

  export type EstadoCompraUpdateManyMutationInput = {
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EstadoCompraUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompraCreateInput = {
    Subtotal: Decimal | DecimalJsLike | number | string
    Total: Decimal | DecimalJsLike | number | string
    Fecha?: Date | string
    Borrado?: boolean
    cliente: UsuarioCreateNestedOneWithoutCompraInput
    direccion: DireccionCreateNestedOneWithoutCompraInput
    metodoPago: MetodoPagoCreateNestedOneWithoutCompraInput
    CompraDetalle?: CompraDetalleCreateNestedManyWithoutCompraInput
    Evaluacion?: EvaluacionCreateNestedManyWithoutCompraInput
  }

  export type CompraUncheckedCreateInput = {
    id?: number
    ClienteId: number
    DireccionId: number
    MetodoPagoId: number
    Subtotal: Decimal | DecimalJsLike | number | string
    Total: Decimal | DecimalJsLike | number | string
    Fecha?: Date | string
    Borrado?: boolean
    CompraDetalle?: CompraDetalleUncheckedCreateNestedManyWithoutCompraInput
    Evaluacion?: EvaluacionUncheckedCreateNestedManyWithoutCompraInput
  }

  export type CompraUpdateInput = {
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    cliente?: UsuarioUpdateOneRequiredWithoutCompraNestedInput
    direccion?: DireccionUpdateOneRequiredWithoutCompraNestedInput
    metodoPago?: MetodoPagoUpdateOneRequiredWithoutCompraNestedInput
    CompraDetalle?: CompraDetalleUpdateManyWithoutCompraNestedInput
    Evaluacion?: EvaluacionUpdateManyWithoutCompraNestedInput
  }

  export type CompraUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ClienteId?: IntFieldUpdateOperationsInput | number
    DireccionId?: IntFieldUpdateOperationsInput | number
    MetodoPagoId?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    CompraDetalle?: CompraDetalleUncheckedUpdateManyWithoutCompraNestedInput
    Evaluacion?: EvaluacionUncheckedUpdateManyWithoutCompraNestedInput
  }

  export type CompraCreateManyInput = {
    id?: number
    ClienteId: number
    DireccionId: number
    MetodoPagoId: number
    Subtotal: Decimal | DecimalJsLike | number | string
    Total: Decimal | DecimalJsLike | number | string
    Fecha?: Date | string
    Borrado?: boolean
  }

  export type CompraUpdateManyMutationInput = {
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompraUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ClienteId?: IntFieldUpdateOperationsInput | number
    DireccionId?: IntFieldUpdateOperationsInput | number
    MetodoPagoId?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompraDetalleCreateInput = {
    Cantidad: number
    Subtotal: Decimal | DecimalJsLike | number | string
    Borrado?: boolean
    compra: CompraCreateNestedOneWithoutCompraDetalleInput
    producto: ProductoCreateNestedOneWithoutCompraDetalleInput
    estadoCompra?: EstadoCompraCreateNestedOneWithoutCompraDetalleInput
  }

  export type CompraDetalleUncheckedCreateInput = {
    id?: number
    CompraId: number
    ProductoId: number
    Cantidad: number
    Subtotal: Decimal | DecimalJsLike | number | string
    EstadoCompraId?: number
    Borrado?: boolean
  }

  export type CompraDetalleUpdateInput = {
    Cantidad?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    compra?: CompraUpdateOneRequiredWithoutCompraDetalleNestedInput
    producto?: ProductoUpdateOneRequiredWithoutCompraDetalleNestedInput
    estadoCompra?: EstadoCompraUpdateOneRequiredWithoutCompraDetalleNestedInput
  }

  export type CompraDetalleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    CompraId?: IntFieldUpdateOperationsInput | number
    ProductoId?: IntFieldUpdateOperationsInput | number
    Cantidad?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EstadoCompraId?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompraDetalleCreateManyInput = {
    id?: number
    CompraId: number
    ProductoId: number
    Cantidad: number
    Subtotal: Decimal | DecimalJsLike | number | string
    EstadoCompraId?: number
    Borrado?: boolean
  }

  export type CompraDetalleUpdateManyMutationInput = {
    Cantidad?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompraDetalleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    CompraId?: IntFieldUpdateOperationsInput | number
    ProductoId?: IntFieldUpdateOperationsInput | number
    Cantidad?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EstadoCompraId?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EvaluacionCreateInput = {
    Calificacion: number
    Borrado?: boolean
    compra: CompraCreateNestedOneWithoutEvaluacionInput
    evaluador: UsuarioCreateNestedOneWithoutEvaluadoresInput
    evaluado: UsuarioCreateNestedOneWithoutEvaluadosInput
  }

  export type EvaluacionUncheckedCreateInput = {
    id?: number
    CompraId: number
    EvaluadorId: number
    EvaluadoId: number
    Calificacion: number
    Borrado?: boolean
  }

  export type EvaluacionUpdateInput = {
    Calificacion?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    compra?: CompraUpdateOneRequiredWithoutEvaluacionNestedInput
    evaluador?: UsuarioUpdateOneRequiredWithoutEvaluadoresNestedInput
    evaluado?: UsuarioUpdateOneRequiredWithoutEvaluadosNestedInput
  }

  export type EvaluacionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    CompraId?: IntFieldUpdateOperationsInput | number
    EvaluadorId?: IntFieldUpdateOperationsInput | number
    EvaluadoId?: IntFieldUpdateOperationsInput | number
    Calificacion?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EvaluacionCreateManyInput = {
    id?: number
    CompraId: number
    EvaluadorId: number
    EvaluadoId: number
    Calificacion: number
    Borrado?: boolean
  }

  export type EvaluacionUpdateManyMutationInput = {
    Calificacion?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EvaluacionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    CompraId?: IntFieldUpdateOperationsInput | number
    EvaluadorId?: IntFieldUpdateOperationsInput | number
    EvaluadoId?: IntFieldUpdateOperationsInput | number
    Calificacion?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type RolOnUsuarioListRelationFilter = {
    every?: RolOnUsuarioWhereInput
    some?: RolOnUsuarioWhereInput
    none?: RolOnUsuarioWhereInput
  }

  export type MetodoPagoListRelationFilter = {
    every?: MetodoPagoWhereInput
    some?: MetodoPagoWhereInput
    none?: MetodoPagoWhereInput
  }

  export type DireccionListRelationFilter = {
    every?: DireccionWhereInput
    some?: DireccionWhereInput
    none?: DireccionWhereInput
  }

  export type ProductoListRelationFilter = {
    every?: ProductoWhereInput
    some?: ProductoWhereInput
    none?: ProductoWhereInput
  }

  export type MensajeListRelationFilter = {
    every?: MensajeWhereInput
    some?: MensajeWhereInput
    none?: MensajeWhereInput
  }

  export type CompraListRelationFilter = {
    every?: CompraWhereInput
    some?: CompraWhereInput
    none?: CompraWhereInput
  }

  export type EvaluacionListRelationFilter = {
    every?: EvaluacionWhereInput
    some?: EvaluacionWhereInput
    none?: EvaluacionWhereInput
  }

  export type RolOnUsuarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MetodoPagoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DireccionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MensajeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompraOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EvaluacionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Apellido?: SortOrder
    NombreVendedor?: SortOrder
    Telefono?: SortOrder
    Email?: SortOrder
    Identificacion?: SortOrder
    Contrasenna?: SortOrder
    Calificacion?: SortOrder
    Deshabilitado?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
    Calificacion?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Apellido?: SortOrder
    NombreVendedor?: SortOrder
    Telefono?: SortOrder
    Email?: SortOrder
    Identificacion?: SortOrder
    Contrasenna?: SortOrder
    Calificacion?: SortOrder
    Deshabilitado?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Apellido?: SortOrder
    NombreVendedor?: SortOrder
    Telefono?: SortOrder
    Email?: SortOrder
    Identificacion?: SortOrder
    Contrasenna?: SortOrder
    Calificacion?: SortOrder
    Deshabilitado?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
    Calificacion?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type RolCountOrderByAggregateInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
  }

  export type RolAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RolMaxOrderByAggregateInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
  }

  export type RolMinOrderByAggregateInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
  }

  export type RolSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RolRelationFilter = {
    is?: RolWhereInput
    isNot?: RolWhereInput
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type RolOnUsuarioRolIdUsuarioIdCompoundUniqueInput = {
    RolId: number
    UsuarioId: number
  }

  export type RolOnUsuarioCountOrderByAggregateInput = {
    RolId?: SortOrder
    UsuarioId?: SortOrder
  }

  export type RolOnUsuarioAvgOrderByAggregateInput = {
    RolId?: SortOrder
    UsuarioId?: SortOrder
  }

  export type RolOnUsuarioMaxOrderByAggregateInput = {
    RolId?: SortOrder
    UsuarioId?: SortOrder
  }

  export type RolOnUsuarioMinOrderByAggregateInput = {
    RolId?: SortOrder
    UsuarioId?: SortOrder
  }

  export type RolOnUsuarioSumOrderByAggregateInput = {
    RolId?: SortOrder
    UsuarioId?: SortOrder
  }

  export type TipoPagoCountOrderByAggregateInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
  }

  export type TipoPagoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TipoPagoMaxOrderByAggregateInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
  }

  export type TipoPagoMinOrderByAggregateInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
  }

  export type TipoPagoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type TipoPagoRelationFilter = {
    is?: TipoPagoWhereInput
    isNot?: TipoPagoWhereInput
  }

  export type MetodoPagoCountOrderByAggregateInput = {
    id?: SortOrder
    UsuarioId?: SortOrder
    TipoPagoId?: SortOrder
    NumeroCuenta?: SortOrder
    Expiracion?: SortOrder
    Titulo?: SortOrder
    Borrado?: SortOrder
  }

  export type MetodoPagoAvgOrderByAggregateInput = {
    id?: SortOrder
    UsuarioId?: SortOrder
    TipoPagoId?: SortOrder
  }

  export type MetodoPagoMaxOrderByAggregateInput = {
    id?: SortOrder
    UsuarioId?: SortOrder
    TipoPagoId?: SortOrder
    NumeroCuenta?: SortOrder
    Expiracion?: SortOrder
    Titulo?: SortOrder
    Borrado?: SortOrder
  }

  export type MetodoPagoMinOrderByAggregateInput = {
    id?: SortOrder
    UsuarioId?: SortOrder
    TipoPagoId?: SortOrder
    NumeroCuenta?: SortOrder
    Expiracion?: SortOrder
    Titulo?: SortOrder
    Borrado?: SortOrder
  }

  export type MetodoPagoSumOrderByAggregateInput = {
    id?: SortOrder
    UsuarioId?: SortOrder
    TipoPagoId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DireccionCountOrderByAggregateInput = {
    id?: SortOrder
    UsuarioId?: SortOrder
    Provincia?: SortOrder
    Canton?: SortOrder
    Distrito?: SortOrder
    Detalle?: SortOrder
    CodigoPostal?: SortOrder
    Telefono?: SortOrder
    Titulo?: SortOrder
  }

  export type DireccionAvgOrderByAggregateInput = {
    id?: SortOrder
    UsuarioId?: SortOrder
  }

  export type DireccionMaxOrderByAggregateInput = {
    id?: SortOrder
    UsuarioId?: SortOrder
    Provincia?: SortOrder
    Canton?: SortOrder
    Distrito?: SortOrder
    Detalle?: SortOrder
    CodigoPostal?: SortOrder
    Telefono?: SortOrder
    Titulo?: SortOrder
  }

  export type DireccionMinOrderByAggregateInput = {
    id?: SortOrder
    UsuarioId?: SortOrder
    Provincia?: SortOrder
    Canton?: SortOrder
    Distrito?: SortOrder
    Detalle?: SortOrder
    CodigoPostal?: SortOrder
    Telefono?: SortOrder
    Titulo?: SortOrder
  }

  export type DireccionSumOrderByAggregateInput = {
    id?: SortOrder
    UsuarioId?: SortOrder
  }

  export type CategoriaRelationFilter = {
    is?: CategoriaWhereInput
    isNot?: CategoriaWhereInput
  }

  export type EstadoProductoRelationFilter = {
    is?: EstadoProductoWhereInput
    isNot?: EstadoProductoWhereInput
  }

  export type FotoProductoListRelationFilter = {
    every?: FotoProductoWhereInput
    some?: FotoProductoWhereInput
    none?: FotoProductoWhereInput
  }

  export type CompraDetalleListRelationFilter = {
    every?: CompraDetalleWhereInput
    some?: CompraDetalleWhereInput
    none?: CompraDetalleWhereInput
  }

  export type FotoProductoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompraDetalleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductoCountOrderByAggregateInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Descripcion?: SortOrder
    Precio?: SortOrder
    Cantidad?: SortOrder
    CategoriaId?: SortOrder
    EstadoId?: SortOrder
    VendedorId?: SortOrder
    Borrado?: SortOrder
  }

  export type ProductoAvgOrderByAggregateInput = {
    id?: SortOrder
    Precio?: SortOrder
    Cantidad?: SortOrder
    CategoriaId?: SortOrder
    EstadoId?: SortOrder
    VendedorId?: SortOrder
  }

  export type ProductoMaxOrderByAggregateInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Descripcion?: SortOrder
    Precio?: SortOrder
    Cantidad?: SortOrder
    CategoriaId?: SortOrder
    EstadoId?: SortOrder
    VendedorId?: SortOrder
    Borrado?: SortOrder
  }

  export type ProductoMinOrderByAggregateInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Descripcion?: SortOrder
    Precio?: SortOrder
    Cantidad?: SortOrder
    CategoriaId?: SortOrder
    EstadoId?: SortOrder
    VendedorId?: SortOrder
    Borrado?: SortOrder
  }

  export type ProductoSumOrderByAggregateInput = {
    id?: SortOrder
    Precio?: SortOrder
    Cantidad?: SortOrder
    CategoriaId?: SortOrder
    EstadoId?: SortOrder
    VendedorId?: SortOrder
  }

  export type CategoriaCountOrderByAggregateInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
  }

  export type CategoriaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoriaMaxOrderByAggregateInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
  }

  export type CategoriaMinOrderByAggregateInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
  }

  export type CategoriaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EstadoProductoCountOrderByAggregateInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
  }

  export type EstadoProductoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EstadoProductoMaxOrderByAggregateInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
  }

  export type EstadoProductoMinOrderByAggregateInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
  }

  export type EstadoProductoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProductoRelationFilter = {
    is?: ProductoWhereInput
    isNot?: ProductoWhereInput
  }

  export type FotoProductoCountOrderByAggregateInput = {
    id?: SortOrder
    ProductoId?: SortOrder
    Foto?: SortOrder
    Borrado?: SortOrder
  }

  export type FotoProductoAvgOrderByAggregateInput = {
    id?: SortOrder
    ProductoId?: SortOrder
  }

  export type FotoProductoMaxOrderByAggregateInput = {
    id?: SortOrder
    ProductoId?: SortOrder
    Foto?: SortOrder
    Borrado?: SortOrder
  }

  export type FotoProductoMinOrderByAggregateInput = {
    id?: SortOrder
    ProductoId?: SortOrder
    Foto?: SortOrder
    Borrado?: SortOrder
  }

  export type FotoProductoSumOrderByAggregateInput = {
    id?: SortOrder
    ProductoId?: SortOrder
  }

  export type MensajeCountOrderByAggregateInput = {
    id?: SortOrder
    ClienteId?: SortOrder
    ProductoId?: SortOrder
    Pregunta?: SortOrder
    Respuesta?: SortOrder
    Borrado?: SortOrder
    Fecha?: SortOrder
  }

  export type MensajeAvgOrderByAggregateInput = {
    id?: SortOrder
    ClienteId?: SortOrder
    ProductoId?: SortOrder
  }

  export type MensajeMaxOrderByAggregateInput = {
    id?: SortOrder
    ClienteId?: SortOrder
    ProductoId?: SortOrder
    Pregunta?: SortOrder
    Respuesta?: SortOrder
    Borrado?: SortOrder
    Fecha?: SortOrder
  }

  export type MensajeMinOrderByAggregateInput = {
    id?: SortOrder
    ClienteId?: SortOrder
    ProductoId?: SortOrder
    Pregunta?: SortOrder
    Respuesta?: SortOrder
    Borrado?: SortOrder
    Fecha?: SortOrder
  }

  export type MensajeSumOrderByAggregateInput = {
    id?: SortOrder
    ClienteId?: SortOrder
    ProductoId?: SortOrder
  }

  export type EstadoCompraCountOrderByAggregateInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
  }

  export type EstadoCompraAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EstadoCompraMaxOrderByAggregateInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
  }

  export type EstadoCompraMinOrderByAggregateInput = {
    id?: SortOrder
    Descripcion?: SortOrder
    Borrado?: SortOrder
  }

  export type EstadoCompraSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DireccionRelationFilter = {
    is?: DireccionWhereInput
    isNot?: DireccionWhereInput
  }

  export type MetodoPagoRelationFilter = {
    is?: MetodoPagoWhereInput
    isNot?: MetodoPagoWhereInput
  }

  export type CompraCountOrderByAggregateInput = {
    id?: SortOrder
    ClienteId?: SortOrder
    DireccionId?: SortOrder
    MetodoPagoId?: SortOrder
    Subtotal?: SortOrder
    Total?: SortOrder
    Fecha?: SortOrder
    Borrado?: SortOrder
  }

  export type CompraAvgOrderByAggregateInput = {
    id?: SortOrder
    ClienteId?: SortOrder
    DireccionId?: SortOrder
    MetodoPagoId?: SortOrder
    Subtotal?: SortOrder
    Total?: SortOrder
  }

  export type CompraMaxOrderByAggregateInput = {
    id?: SortOrder
    ClienteId?: SortOrder
    DireccionId?: SortOrder
    MetodoPagoId?: SortOrder
    Subtotal?: SortOrder
    Total?: SortOrder
    Fecha?: SortOrder
    Borrado?: SortOrder
  }

  export type CompraMinOrderByAggregateInput = {
    id?: SortOrder
    ClienteId?: SortOrder
    DireccionId?: SortOrder
    MetodoPagoId?: SortOrder
    Subtotal?: SortOrder
    Total?: SortOrder
    Fecha?: SortOrder
    Borrado?: SortOrder
  }

  export type CompraSumOrderByAggregateInput = {
    id?: SortOrder
    ClienteId?: SortOrder
    DireccionId?: SortOrder
    MetodoPagoId?: SortOrder
    Subtotal?: SortOrder
    Total?: SortOrder
  }

  export type CompraRelationFilter = {
    is?: CompraWhereInput
    isNot?: CompraWhereInput
  }

  export type EstadoCompraRelationFilter = {
    is?: EstadoCompraWhereInput
    isNot?: EstadoCompraWhereInput
  }

  export type CompraDetalleCountOrderByAggregateInput = {
    id?: SortOrder
    CompraId?: SortOrder
    ProductoId?: SortOrder
    Cantidad?: SortOrder
    Subtotal?: SortOrder
    EstadoCompraId?: SortOrder
    Borrado?: SortOrder
  }

  export type CompraDetalleAvgOrderByAggregateInput = {
    id?: SortOrder
    CompraId?: SortOrder
    ProductoId?: SortOrder
    Cantidad?: SortOrder
    Subtotal?: SortOrder
    EstadoCompraId?: SortOrder
  }

  export type CompraDetalleMaxOrderByAggregateInput = {
    id?: SortOrder
    CompraId?: SortOrder
    ProductoId?: SortOrder
    Cantidad?: SortOrder
    Subtotal?: SortOrder
    EstadoCompraId?: SortOrder
    Borrado?: SortOrder
  }

  export type CompraDetalleMinOrderByAggregateInput = {
    id?: SortOrder
    CompraId?: SortOrder
    ProductoId?: SortOrder
    Cantidad?: SortOrder
    Subtotal?: SortOrder
    EstadoCompraId?: SortOrder
    Borrado?: SortOrder
  }

  export type CompraDetalleSumOrderByAggregateInput = {
    id?: SortOrder
    CompraId?: SortOrder
    ProductoId?: SortOrder
    Cantidad?: SortOrder
    Subtotal?: SortOrder
    EstadoCompraId?: SortOrder
  }

  export type EvaluacionCountOrderByAggregateInput = {
    id?: SortOrder
    CompraId?: SortOrder
    EvaluadorId?: SortOrder
    EvaluadoId?: SortOrder
    Calificacion?: SortOrder
    Borrado?: SortOrder
  }

  export type EvaluacionAvgOrderByAggregateInput = {
    id?: SortOrder
    CompraId?: SortOrder
    EvaluadorId?: SortOrder
    EvaluadoId?: SortOrder
    Calificacion?: SortOrder
  }

  export type EvaluacionMaxOrderByAggregateInput = {
    id?: SortOrder
    CompraId?: SortOrder
    EvaluadorId?: SortOrder
    EvaluadoId?: SortOrder
    Calificacion?: SortOrder
    Borrado?: SortOrder
  }

  export type EvaluacionMinOrderByAggregateInput = {
    id?: SortOrder
    CompraId?: SortOrder
    EvaluadorId?: SortOrder
    EvaluadoId?: SortOrder
    Calificacion?: SortOrder
    Borrado?: SortOrder
  }

  export type EvaluacionSumOrderByAggregateInput = {
    id?: SortOrder
    CompraId?: SortOrder
    EvaluadorId?: SortOrder
    EvaluadoId?: SortOrder
    Calificacion?: SortOrder
  }

  export type RolOnUsuarioCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<RolOnUsuarioCreateWithoutUsuarioInput>, Enumerable<RolOnUsuarioUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<RolOnUsuarioCreateOrConnectWithoutUsuarioInput>
    createMany?: RolOnUsuarioCreateManyUsuarioInputEnvelope
    connect?: Enumerable<RolOnUsuarioWhereUniqueInput>
  }

  export type MetodoPagoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<MetodoPagoCreateWithoutUsuarioInput>, Enumerable<MetodoPagoUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<MetodoPagoCreateOrConnectWithoutUsuarioInput>
    createMany?: MetodoPagoCreateManyUsuarioInputEnvelope
    connect?: Enumerable<MetodoPagoWhereUniqueInput>
  }

  export type DireccionCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<DireccionCreateWithoutUsuarioInput>, Enumerable<DireccionUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<DireccionCreateOrConnectWithoutUsuarioInput>
    createMany?: DireccionCreateManyUsuarioInputEnvelope
    connect?: Enumerable<DireccionWhereUniqueInput>
  }

  export type ProductoCreateNestedManyWithoutVendedorInput = {
    create?: XOR<Enumerable<ProductoCreateWithoutVendedorInput>, Enumerable<ProductoUncheckedCreateWithoutVendedorInput>>
    connectOrCreate?: Enumerable<ProductoCreateOrConnectWithoutVendedorInput>
    createMany?: ProductoCreateManyVendedorInputEnvelope
    connect?: Enumerable<ProductoWhereUniqueInput>
  }

  export type MensajeCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<MensajeCreateWithoutClienteInput>, Enumerable<MensajeUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<MensajeCreateOrConnectWithoutClienteInput>
    createMany?: MensajeCreateManyClienteInputEnvelope
    connect?: Enumerable<MensajeWhereUniqueInput>
  }

  export type CompraCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<CompraCreateWithoutClienteInput>, Enumerable<CompraUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutClienteInput>
    createMany?: CompraCreateManyClienteInputEnvelope
    connect?: Enumerable<CompraWhereUniqueInput>
  }

  export type EvaluacionCreateNestedManyWithoutEvaluadorInput = {
    create?: XOR<Enumerable<EvaluacionCreateWithoutEvaluadorInput>, Enumerable<EvaluacionUncheckedCreateWithoutEvaluadorInput>>
    connectOrCreate?: Enumerable<EvaluacionCreateOrConnectWithoutEvaluadorInput>
    createMany?: EvaluacionCreateManyEvaluadorInputEnvelope
    connect?: Enumerable<EvaluacionWhereUniqueInput>
  }

  export type EvaluacionCreateNestedManyWithoutEvaluadoInput = {
    create?: XOR<Enumerable<EvaluacionCreateWithoutEvaluadoInput>, Enumerable<EvaluacionUncheckedCreateWithoutEvaluadoInput>>
    connectOrCreate?: Enumerable<EvaluacionCreateOrConnectWithoutEvaluadoInput>
    createMany?: EvaluacionCreateManyEvaluadoInputEnvelope
    connect?: Enumerable<EvaluacionWhereUniqueInput>
  }

  export type RolOnUsuarioUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<RolOnUsuarioCreateWithoutUsuarioInput>, Enumerable<RolOnUsuarioUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<RolOnUsuarioCreateOrConnectWithoutUsuarioInput>
    createMany?: RolOnUsuarioCreateManyUsuarioInputEnvelope
    connect?: Enumerable<RolOnUsuarioWhereUniqueInput>
  }

  export type MetodoPagoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<MetodoPagoCreateWithoutUsuarioInput>, Enumerable<MetodoPagoUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<MetodoPagoCreateOrConnectWithoutUsuarioInput>
    createMany?: MetodoPagoCreateManyUsuarioInputEnvelope
    connect?: Enumerable<MetodoPagoWhereUniqueInput>
  }

  export type DireccionUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<DireccionCreateWithoutUsuarioInput>, Enumerable<DireccionUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<DireccionCreateOrConnectWithoutUsuarioInput>
    createMany?: DireccionCreateManyUsuarioInputEnvelope
    connect?: Enumerable<DireccionWhereUniqueInput>
  }

  export type ProductoUncheckedCreateNestedManyWithoutVendedorInput = {
    create?: XOR<Enumerable<ProductoCreateWithoutVendedorInput>, Enumerable<ProductoUncheckedCreateWithoutVendedorInput>>
    connectOrCreate?: Enumerable<ProductoCreateOrConnectWithoutVendedorInput>
    createMany?: ProductoCreateManyVendedorInputEnvelope
    connect?: Enumerable<ProductoWhereUniqueInput>
  }

  export type MensajeUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<MensajeCreateWithoutClienteInput>, Enumerable<MensajeUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<MensajeCreateOrConnectWithoutClienteInput>
    createMany?: MensajeCreateManyClienteInputEnvelope
    connect?: Enumerable<MensajeWhereUniqueInput>
  }

  export type CompraUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<CompraCreateWithoutClienteInput>, Enumerable<CompraUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutClienteInput>
    createMany?: CompraCreateManyClienteInputEnvelope
    connect?: Enumerable<CompraWhereUniqueInput>
  }

  export type EvaluacionUncheckedCreateNestedManyWithoutEvaluadorInput = {
    create?: XOR<Enumerable<EvaluacionCreateWithoutEvaluadorInput>, Enumerable<EvaluacionUncheckedCreateWithoutEvaluadorInput>>
    connectOrCreate?: Enumerable<EvaluacionCreateOrConnectWithoutEvaluadorInput>
    createMany?: EvaluacionCreateManyEvaluadorInputEnvelope
    connect?: Enumerable<EvaluacionWhereUniqueInput>
  }

  export type EvaluacionUncheckedCreateNestedManyWithoutEvaluadoInput = {
    create?: XOR<Enumerable<EvaluacionCreateWithoutEvaluadoInput>, Enumerable<EvaluacionUncheckedCreateWithoutEvaluadoInput>>
    connectOrCreate?: Enumerable<EvaluacionCreateOrConnectWithoutEvaluadoInput>
    createMany?: EvaluacionCreateManyEvaluadoInputEnvelope
    connect?: Enumerable<EvaluacionWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type RolOnUsuarioUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<RolOnUsuarioCreateWithoutUsuarioInput>, Enumerable<RolOnUsuarioUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<RolOnUsuarioCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<RolOnUsuarioUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: RolOnUsuarioCreateManyUsuarioInputEnvelope
    set?: Enumerable<RolOnUsuarioWhereUniqueInput>
    disconnect?: Enumerable<RolOnUsuarioWhereUniqueInput>
    delete?: Enumerable<RolOnUsuarioWhereUniqueInput>
    connect?: Enumerable<RolOnUsuarioWhereUniqueInput>
    update?: Enumerable<RolOnUsuarioUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<RolOnUsuarioUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<RolOnUsuarioScalarWhereInput>
  }

  export type MetodoPagoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<MetodoPagoCreateWithoutUsuarioInput>, Enumerable<MetodoPagoUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<MetodoPagoCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<MetodoPagoUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: MetodoPagoCreateManyUsuarioInputEnvelope
    set?: Enumerable<MetodoPagoWhereUniqueInput>
    disconnect?: Enumerable<MetodoPagoWhereUniqueInput>
    delete?: Enumerable<MetodoPagoWhereUniqueInput>
    connect?: Enumerable<MetodoPagoWhereUniqueInput>
    update?: Enumerable<MetodoPagoUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<MetodoPagoUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<MetodoPagoScalarWhereInput>
  }

  export type DireccionUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<DireccionCreateWithoutUsuarioInput>, Enumerable<DireccionUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<DireccionCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<DireccionUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: DireccionCreateManyUsuarioInputEnvelope
    set?: Enumerable<DireccionWhereUniqueInput>
    disconnect?: Enumerable<DireccionWhereUniqueInput>
    delete?: Enumerable<DireccionWhereUniqueInput>
    connect?: Enumerable<DireccionWhereUniqueInput>
    update?: Enumerable<DireccionUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<DireccionUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<DireccionScalarWhereInput>
  }

  export type ProductoUpdateManyWithoutVendedorNestedInput = {
    create?: XOR<Enumerable<ProductoCreateWithoutVendedorInput>, Enumerable<ProductoUncheckedCreateWithoutVendedorInput>>
    connectOrCreate?: Enumerable<ProductoCreateOrConnectWithoutVendedorInput>
    upsert?: Enumerable<ProductoUpsertWithWhereUniqueWithoutVendedorInput>
    createMany?: ProductoCreateManyVendedorInputEnvelope
    set?: Enumerable<ProductoWhereUniqueInput>
    disconnect?: Enumerable<ProductoWhereUniqueInput>
    delete?: Enumerable<ProductoWhereUniqueInput>
    connect?: Enumerable<ProductoWhereUniqueInput>
    update?: Enumerable<ProductoUpdateWithWhereUniqueWithoutVendedorInput>
    updateMany?: Enumerable<ProductoUpdateManyWithWhereWithoutVendedorInput>
    deleteMany?: Enumerable<ProductoScalarWhereInput>
  }

  export type MensajeUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<MensajeCreateWithoutClienteInput>, Enumerable<MensajeUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<MensajeCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<MensajeUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: MensajeCreateManyClienteInputEnvelope
    set?: Enumerable<MensajeWhereUniqueInput>
    disconnect?: Enumerable<MensajeWhereUniqueInput>
    delete?: Enumerable<MensajeWhereUniqueInput>
    connect?: Enumerable<MensajeWhereUniqueInput>
    update?: Enumerable<MensajeUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<MensajeUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<MensajeScalarWhereInput>
  }

  export type CompraUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<CompraCreateWithoutClienteInput>, Enumerable<CompraUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<CompraUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: CompraCreateManyClienteInputEnvelope
    set?: Enumerable<CompraWhereUniqueInput>
    disconnect?: Enumerable<CompraWhereUniqueInput>
    delete?: Enumerable<CompraWhereUniqueInput>
    connect?: Enumerable<CompraWhereUniqueInput>
    update?: Enumerable<CompraUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<CompraUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<CompraScalarWhereInput>
  }

  export type EvaluacionUpdateManyWithoutEvaluadorNestedInput = {
    create?: XOR<Enumerable<EvaluacionCreateWithoutEvaluadorInput>, Enumerable<EvaluacionUncheckedCreateWithoutEvaluadorInput>>
    connectOrCreate?: Enumerable<EvaluacionCreateOrConnectWithoutEvaluadorInput>
    upsert?: Enumerable<EvaluacionUpsertWithWhereUniqueWithoutEvaluadorInput>
    createMany?: EvaluacionCreateManyEvaluadorInputEnvelope
    set?: Enumerable<EvaluacionWhereUniqueInput>
    disconnect?: Enumerable<EvaluacionWhereUniqueInput>
    delete?: Enumerable<EvaluacionWhereUniqueInput>
    connect?: Enumerable<EvaluacionWhereUniqueInput>
    update?: Enumerable<EvaluacionUpdateWithWhereUniqueWithoutEvaluadorInput>
    updateMany?: Enumerable<EvaluacionUpdateManyWithWhereWithoutEvaluadorInput>
    deleteMany?: Enumerable<EvaluacionScalarWhereInput>
  }

  export type EvaluacionUpdateManyWithoutEvaluadoNestedInput = {
    create?: XOR<Enumerable<EvaluacionCreateWithoutEvaluadoInput>, Enumerable<EvaluacionUncheckedCreateWithoutEvaluadoInput>>
    connectOrCreate?: Enumerable<EvaluacionCreateOrConnectWithoutEvaluadoInput>
    upsert?: Enumerable<EvaluacionUpsertWithWhereUniqueWithoutEvaluadoInput>
    createMany?: EvaluacionCreateManyEvaluadoInputEnvelope
    set?: Enumerable<EvaluacionWhereUniqueInput>
    disconnect?: Enumerable<EvaluacionWhereUniqueInput>
    delete?: Enumerable<EvaluacionWhereUniqueInput>
    connect?: Enumerable<EvaluacionWhereUniqueInput>
    update?: Enumerable<EvaluacionUpdateWithWhereUniqueWithoutEvaluadoInput>
    updateMany?: Enumerable<EvaluacionUpdateManyWithWhereWithoutEvaluadoInput>
    deleteMany?: Enumerable<EvaluacionScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RolOnUsuarioUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<RolOnUsuarioCreateWithoutUsuarioInput>, Enumerable<RolOnUsuarioUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<RolOnUsuarioCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<RolOnUsuarioUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: RolOnUsuarioCreateManyUsuarioInputEnvelope
    set?: Enumerable<RolOnUsuarioWhereUniqueInput>
    disconnect?: Enumerable<RolOnUsuarioWhereUniqueInput>
    delete?: Enumerable<RolOnUsuarioWhereUniqueInput>
    connect?: Enumerable<RolOnUsuarioWhereUniqueInput>
    update?: Enumerable<RolOnUsuarioUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<RolOnUsuarioUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<RolOnUsuarioScalarWhereInput>
  }

  export type MetodoPagoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<MetodoPagoCreateWithoutUsuarioInput>, Enumerable<MetodoPagoUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<MetodoPagoCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<MetodoPagoUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: MetodoPagoCreateManyUsuarioInputEnvelope
    set?: Enumerable<MetodoPagoWhereUniqueInput>
    disconnect?: Enumerable<MetodoPagoWhereUniqueInput>
    delete?: Enumerable<MetodoPagoWhereUniqueInput>
    connect?: Enumerable<MetodoPagoWhereUniqueInput>
    update?: Enumerable<MetodoPagoUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<MetodoPagoUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<MetodoPagoScalarWhereInput>
  }

  export type DireccionUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<DireccionCreateWithoutUsuarioInput>, Enumerable<DireccionUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<DireccionCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<DireccionUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: DireccionCreateManyUsuarioInputEnvelope
    set?: Enumerable<DireccionWhereUniqueInput>
    disconnect?: Enumerable<DireccionWhereUniqueInput>
    delete?: Enumerable<DireccionWhereUniqueInput>
    connect?: Enumerable<DireccionWhereUniqueInput>
    update?: Enumerable<DireccionUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<DireccionUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<DireccionScalarWhereInput>
  }

  export type ProductoUncheckedUpdateManyWithoutVendedorNestedInput = {
    create?: XOR<Enumerable<ProductoCreateWithoutVendedorInput>, Enumerable<ProductoUncheckedCreateWithoutVendedorInput>>
    connectOrCreate?: Enumerable<ProductoCreateOrConnectWithoutVendedorInput>
    upsert?: Enumerable<ProductoUpsertWithWhereUniqueWithoutVendedorInput>
    createMany?: ProductoCreateManyVendedorInputEnvelope
    set?: Enumerable<ProductoWhereUniqueInput>
    disconnect?: Enumerable<ProductoWhereUniqueInput>
    delete?: Enumerable<ProductoWhereUniqueInput>
    connect?: Enumerable<ProductoWhereUniqueInput>
    update?: Enumerable<ProductoUpdateWithWhereUniqueWithoutVendedorInput>
    updateMany?: Enumerable<ProductoUpdateManyWithWhereWithoutVendedorInput>
    deleteMany?: Enumerable<ProductoScalarWhereInput>
  }

  export type MensajeUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<MensajeCreateWithoutClienteInput>, Enumerable<MensajeUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<MensajeCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<MensajeUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: MensajeCreateManyClienteInputEnvelope
    set?: Enumerable<MensajeWhereUniqueInput>
    disconnect?: Enumerable<MensajeWhereUniqueInput>
    delete?: Enumerable<MensajeWhereUniqueInput>
    connect?: Enumerable<MensajeWhereUniqueInput>
    update?: Enumerable<MensajeUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<MensajeUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<MensajeScalarWhereInput>
  }

  export type CompraUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<CompraCreateWithoutClienteInput>, Enumerable<CompraUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<CompraUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: CompraCreateManyClienteInputEnvelope
    set?: Enumerable<CompraWhereUniqueInput>
    disconnect?: Enumerable<CompraWhereUniqueInput>
    delete?: Enumerable<CompraWhereUniqueInput>
    connect?: Enumerable<CompraWhereUniqueInput>
    update?: Enumerable<CompraUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<CompraUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<CompraScalarWhereInput>
  }

  export type EvaluacionUncheckedUpdateManyWithoutEvaluadorNestedInput = {
    create?: XOR<Enumerable<EvaluacionCreateWithoutEvaluadorInput>, Enumerable<EvaluacionUncheckedCreateWithoutEvaluadorInput>>
    connectOrCreate?: Enumerable<EvaluacionCreateOrConnectWithoutEvaluadorInput>
    upsert?: Enumerable<EvaluacionUpsertWithWhereUniqueWithoutEvaluadorInput>
    createMany?: EvaluacionCreateManyEvaluadorInputEnvelope
    set?: Enumerable<EvaluacionWhereUniqueInput>
    disconnect?: Enumerable<EvaluacionWhereUniqueInput>
    delete?: Enumerable<EvaluacionWhereUniqueInput>
    connect?: Enumerable<EvaluacionWhereUniqueInput>
    update?: Enumerable<EvaluacionUpdateWithWhereUniqueWithoutEvaluadorInput>
    updateMany?: Enumerable<EvaluacionUpdateManyWithWhereWithoutEvaluadorInput>
    deleteMany?: Enumerable<EvaluacionScalarWhereInput>
  }

  export type EvaluacionUncheckedUpdateManyWithoutEvaluadoNestedInput = {
    create?: XOR<Enumerable<EvaluacionCreateWithoutEvaluadoInput>, Enumerable<EvaluacionUncheckedCreateWithoutEvaluadoInput>>
    connectOrCreate?: Enumerable<EvaluacionCreateOrConnectWithoutEvaluadoInput>
    upsert?: Enumerable<EvaluacionUpsertWithWhereUniqueWithoutEvaluadoInput>
    createMany?: EvaluacionCreateManyEvaluadoInputEnvelope
    set?: Enumerable<EvaluacionWhereUniqueInput>
    disconnect?: Enumerable<EvaluacionWhereUniqueInput>
    delete?: Enumerable<EvaluacionWhereUniqueInput>
    connect?: Enumerable<EvaluacionWhereUniqueInput>
    update?: Enumerable<EvaluacionUpdateWithWhereUniqueWithoutEvaluadoInput>
    updateMany?: Enumerable<EvaluacionUpdateManyWithWhereWithoutEvaluadoInput>
    deleteMany?: Enumerable<EvaluacionScalarWhereInput>
  }

  export type RolOnUsuarioCreateNestedManyWithoutRolInput = {
    create?: XOR<Enumerable<RolOnUsuarioCreateWithoutRolInput>, Enumerable<RolOnUsuarioUncheckedCreateWithoutRolInput>>
    connectOrCreate?: Enumerable<RolOnUsuarioCreateOrConnectWithoutRolInput>
    createMany?: RolOnUsuarioCreateManyRolInputEnvelope
    connect?: Enumerable<RolOnUsuarioWhereUniqueInput>
  }

  export type RolOnUsuarioUncheckedCreateNestedManyWithoutRolInput = {
    create?: XOR<Enumerable<RolOnUsuarioCreateWithoutRolInput>, Enumerable<RolOnUsuarioUncheckedCreateWithoutRolInput>>
    connectOrCreate?: Enumerable<RolOnUsuarioCreateOrConnectWithoutRolInput>
    createMany?: RolOnUsuarioCreateManyRolInputEnvelope
    connect?: Enumerable<RolOnUsuarioWhereUniqueInput>
  }

  export type RolOnUsuarioUpdateManyWithoutRolNestedInput = {
    create?: XOR<Enumerable<RolOnUsuarioCreateWithoutRolInput>, Enumerable<RolOnUsuarioUncheckedCreateWithoutRolInput>>
    connectOrCreate?: Enumerable<RolOnUsuarioCreateOrConnectWithoutRolInput>
    upsert?: Enumerable<RolOnUsuarioUpsertWithWhereUniqueWithoutRolInput>
    createMany?: RolOnUsuarioCreateManyRolInputEnvelope
    set?: Enumerable<RolOnUsuarioWhereUniqueInput>
    disconnect?: Enumerable<RolOnUsuarioWhereUniqueInput>
    delete?: Enumerable<RolOnUsuarioWhereUniqueInput>
    connect?: Enumerable<RolOnUsuarioWhereUniqueInput>
    update?: Enumerable<RolOnUsuarioUpdateWithWhereUniqueWithoutRolInput>
    updateMany?: Enumerable<RolOnUsuarioUpdateManyWithWhereWithoutRolInput>
    deleteMany?: Enumerable<RolOnUsuarioScalarWhereInput>
  }

  export type RolOnUsuarioUncheckedUpdateManyWithoutRolNestedInput = {
    create?: XOR<Enumerable<RolOnUsuarioCreateWithoutRolInput>, Enumerable<RolOnUsuarioUncheckedCreateWithoutRolInput>>
    connectOrCreate?: Enumerable<RolOnUsuarioCreateOrConnectWithoutRolInput>
    upsert?: Enumerable<RolOnUsuarioUpsertWithWhereUniqueWithoutRolInput>
    createMany?: RolOnUsuarioCreateManyRolInputEnvelope
    set?: Enumerable<RolOnUsuarioWhereUniqueInput>
    disconnect?: Enumerable<RolOnUsuarioWhereUniqueInput>
    delete?: Enumerable<RolOnUsuarioWhereUniqueInput>
    connect?: Enumerable<RolOnUsuarioWhereUniqueInput>
    update?: Enumerable<RolOnUsuarioUpdateWithWhereUniqueWithoutRolInput>
    updateMany?: Enumerable<RolOnUsuarioUpdateManyWithWhereWithoutRolInput>
    deleteMany?: Enumerable<RolOnUsuarioScalarWhereInput>
  }

  export type RolCreateNestedOneWithoutUsuariosInput = {
    create?: XOR<RolCreateWithoutUsuariosInput, RolUncheckedCreateWithoutUsuariosInput>
    connectOrCreate?: RolCreateOrConnectWithoutUsuariosInput
    connect?: RolWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutRolesInput = {
    create?: XOR<UsuarioCreateWithoutRolesInput, UsuarioUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRolesInput
    connect?: UsuarioWhereUniqueInput
  }

  export type RolUpdateOneRequiredWithoutUsuariosNestedInput = {
    create?: XOR<RolCreateWithoutUsuariosInput, RolUncheckedCreateWithoutUsuariosInput>
    connectOrCreate?: RolCreateOrConnectWithoutUsuariosInput
    upsert?: RolUpsertWithoutUsuariosInput
    connect?: RolWhereUniqueInput
    update?: XOR<RolUpdateWithoutUsuariosInput, RolUncheckedUpdateWithoutUsuariosInput>
  }

  export type UsuarioUpdateOneRequiredWithoutRolesNestedInput = {
    create?: XOR<UsuarioCreateWithoutRolesInput, UsuarioUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRolesInput
    upsert?: UsuarioUpsertWithoutRolesInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<UsuarioUpdateWithoutRolesInput, UsuarioUncheckedUpdateWithoutRolesInput>
  }

  export type MetodoPagoCreateNestedManyWithoutTipoPagoInput = {
    create?: XOR<Enumerable<MetodoPagoCreateWithoutTipoPagoInput>, Enumerable<MetodoPagoUncheckedCreateWithoutTipoPagoInput>>
    connectOrCreate?: Enumerable<MetodoPagoCreateOrConnectWithoutTipoPagoInput>
    createMany?: MetodoPagoCreateManyTipoPagoInputEnvelope
    connect?: Enumerable<MetodoPagoWhereUniqueInput>
  }

  export type MetodoPagoUncheckedCreateNestedManyWithoutTipoPagoInput = {
    create?: XOR<Enumerable<MetodoPagoCreateWithoutTipoPagoInput>, Enumerable<MetodoPagoUncheckedCreateWithoutTipoPagoInput>>
    connectOrCreate?: Enumerable<MetodoPagoCreateOrConnectWithoutTipoPagoInput>
    createMany?: MetodoPagoCreateManyTipoPagoInputEnvelope
    connect?: Enumerable<MetodoPagoWhereUniqueInput>
  }

  export type MetodoPagoUpdateManyWithoutTipoPagoNestedInput = {
    create?: XOR<Enumerable<MetodoPagoCreateWithoutTipoPagoInput>, Enumerable<MetodoPagoUncheckedCreateWithoutTipoPagoInput>>
    connectOrCreate?: Enumerable<MetodoPagoCreateOrConnectWithoutTipoPagoInput>
    upsert?: Enumerable<MetodoPagoUpsertWithWhereUniqueWithoutTipoPagoInput>
    createMany?: MetodoPagoCreateManyTipoPagoInputEnvelope
    set?: Enumerable<MetodoPagoWhereUniqueInput>
    disconnect?: Enumerable<MetodoPagoWhereUniqueInput>
    delete?: Enumerable<MetodoPagoWhereUniqueInput>
    connect?: Enumerable<MetodoPagoWhereUniqueInput>
    update?: Enumerable<MetodoPagoUpdateWithWhereUniqueWithoutTipoPagoInput>
    updateMany?: Enumerable<MetodoPagoUpdateManyWithWhereWithoutTipoPagoInput>
    deleteMany?: Enumerable<MetodoPagoScalarWhereInput>
  }

  export type MetodoPagoUncheckedUpdateManyWithoutTipoPagoNestedInput = {
    create?: XOR<Enumerable<MetodoPagoCreateWithoutTipoPagoInput>, Enumerable<MetodoPagoUncheckedCreateWithoutTipoPagoInput>>
    connectOrCreate?: Enumerable<MetodoPagoCreateOrConnectWithoutTipoPagoInput>
    upsert?: Enumerable<MetodoPagoUpsertWithWhereUniqueWithoutTipoPagoInput>
    createMany?: MetodoPagoCreateManyTipoPagoInputEnvelope
    set?: Enumerable<MetodoPagoWhereUniqueInput>
    disconnect?: Enumerable<MetodoPagoWhereUniqueInput>
    delete?: Enumerable<MetodoPagoWhereUniqueInput>
    connect?: Enumerable<MetodoPagoWhereUniqueInput>
    update?: Enumerable<MetodoPagoUpdateWithWhereUniqueWithoutTipoPagoInput>
    updateMany?: Enumerable<MetodoPagoUpdateManyWithWhereWithoutTipoPagoInput>
    deleteMany?: Enumerable<MetodoPagoScalarWhereInput>
  }

  export type UsuarioCreateNestedOneWithoutMetodoPagoInput = {
    create?: XOR<UsuarioCreateWithoutMetodoPagoInput, UsuarioUncheckedCreateWithoutMetodoPagoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutMetodoPagoInput
    connect?: UsuarioWhereUniqueInput
  }

  export type TipoPagoCreateNestedOneWithoutMetodoPagoInput = {
    create?: XOR<TipoPagoCreateWithoutMetodoPagoInput, TipoPagoUncheckedCreateWithoutMetodoPagoInput>
    connectOrCreate?: TipoPagoCreateOrConnectWithoutMetodoPagoInput
    connect?: TipoPagoWhereUniqueInput
  }

  export type CompraCreateNestedManyWithoutMetodoPagoInput = {
    create?: XOR<Enumerable<CompraCreateWithoutMetodoPagoInput>, Enumerable<CompraUncheckedCreateWithoutMetodoPagoInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutMetodoPagoInput>
    createMany?: CompraCreateManyMetodoPagoInputEnvelope
    connect?: Enumerable<CompraWhereUniqueInput>
  }

  export type CompraUncheckedCreateNestedManyWithoutMetodoPagoInput = {
    create?: XOR<Enumerable<CompraCreateWithoutMetodoPagoInput>, Enumerable<CompraUncheckedCreateWithoutMetodoPagoInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutMetodoPagoInput>
    createMany?: CompraCreateManyMetodoPagoInputEnvelope
    connect?: Enumerable<CompraWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UsuarioUpdateOneRequiredWithoutMetodoPagoNestedInput = {
    create?: XOR<UsuarioCreateWithoutMetodoPagoInput, UsuarioUncheckedCreateWithoutMetodoPagoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutMetodoPagoInput
    upsert?: UsuarioUpsertWithoutMetodoPagoInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<UsuarioUpdateWithoutMetodoPagoInput, UsuarioUncheckedUpdateWithoutMetodoPagoInput>
  }

  export type TipoPagoUpdateOneRequiredWithoutMetodoPagoNestedInput = {
    create?: XOR<TipoPagoCreateWithoutMetodoPagoInput, TipoPagoUncheckedCreateWithoutMetodoPagoInput>
    connectOrCreate?: TipoPagoCreateOrConnectWithoutMetodoPagoInput
    upsert?: TipoPagoUpsertWithoutMetodoPagoInput
    connect?: TipoPagoWhereUniqueInput
    update?: XOR<TipoPagoUpdateWithoutMetodoPagoInput, TipoPagoUncheckedUpdateWithoutMetodoPagoInput>
  }

  export type CompraUpdateManyWithoutMetodoPagoNestedInput = {
    create?: XOR<Enumerable<CompraCreateWithoutMetodoPagoInput>, Enumerable<CompraUncheckedCreateWithoutMetodoPagoInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutMetodoPagoInput>
    upsert?: Enumerable<CompraUpsertWithWhereUniqueWithoutMetodoPagoInput>
    createMany?: CompraCreateManyMetodoPagoInputEnvelope
    set?: Enumerable<CompraWhereUniqueInput>
    disconnect?: Enumerable<CompraWhereUniqueInput>
    delete?: Enumerable<CompraWhereUniqueInput>
    connect?: Enumerable<CompraWhereUniqueInput>
    update?: Enumerable<CompraUpdateWithWhereUniqueWithoutMetodoPagoInput>
    updateMany?: Enumerable<CompraUpdateManyWithWhereWithoutMetodoPagoInput>
    deleteMany?: Enumerable<CompraScalarWhereInput>
  }

  export type CompraUncheckedUpdateManyWithoutMetodoPagoNestedInput = {
    create?: XOR<Enumerable<CompraCreateWithoutMetodoPagoInput>, Enumerable<CompraUncheckedCreateWithoutMetodoPagoInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutMetodoPagoInput>
    upsert?: Enumerable<CompraUpsertWithWhereUniqueWithoutMetodoPagoInput>
    createMany?: CompraCreateManyMetodoPagoInputEnvelope
    set?: Enumerable<CompraWhereUniqueInput>
    disconnect?: Enumerable<CompraWhereUniqueInput>
    delete?: Enumerable<CompraWhereUniqueInput>
    connect?: Enumerable<CompraWhereUniqueInput>
    update?: Enumerable<CompraUpdateWithWhereUniqueWithoutMetodoPagoInput>
    updateMany?: Enumerable<CompraUpdateManyWithWhereWithoutMetodoPagoInput>
    deleteMany?: Enumerable<CompraScalarWhereInput>
  }

  export type UsuarioCreateNestedOneWithoutDireccionInput = {
    create?: XOR<UsuarioCreateWithoutDireccionInput, UsuarioUncheckedCreateWithoutDireccionInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutDireccionInput
    connect?: UsuarioWhereUniqueInput
  }

  export type CompraCreateNestedManyWithoutDireccionInput = {
    create?: XOR<Enumerable<CompraCreateWithoutDireccionInput>, Enumerable<CompraUncheckedCreateWithoutDireccionInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutDireccionInput>
    createMany?: CompraCreateManyDireccionInputEnvelope
    connect?: Enumerable<CompraWhereUniqueInput>
  }

  export type CompraUncheckedCreateNestedManyWithoutDireccionInput = {
    create?: XOR<Enumerable<CompraCreateWithoutDireccionInput>, Enumerable<CompraUncheckedCreateWithoutDireccionInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutDireccionInput>
    createMany?: CompraCreateManyDireccionInputEnvelope
    connect?: Enumerable<CompraWhereUniqueInput>
  }

  export type UsuarioUpdateOneRequiredWithoutDireccionNestedInput = {
    create?: XOR<UsuarioCreateWithoutDireccionInput, UsuarioUncheckedCreateWithoutDireccionInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutDireccionInput
    upsert?: UsuarioUpsertWithoutDireccionInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<UsuarioUpdateWithoutDireccionInput, UsuarioUncheckedUpdateWithoutDireccionInput>
  }

  export type CompraUpdateManyWithoutDireccionNestedInput = {
    create?: XOR<Enumerable<CompraCreateWithoutDireccionInput>, Enumerable<CompraUncheckedCreateWithoutDireccionInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutDireccionInput>
    upsert?: Enumerable<CompraUpsertWithWhereUniqueWithoutDireccionInput>
    createMany?: CompraCreateManyDireccionInputEnvelope
    set?: Enumerable<CompraWhereUniqueInput>
    disconnect?: Enumerable<CompraWhereUniqueInput>
    delete?: Enumerable<CompraWhereUniqueInput>
    connect?: Enumerable<CompraWhereUniqueInput>
    update?: Enumerable<CompraUpdateWithWhereUniqueWithoutDireccionInput>
    updateMany?: Enumerable<CompraUpdateManyWithWhereWithoutDireccionInput>
    deleteMany?: Enumerable<CompraScalarWhereInput>
  }

  export type CompraUncheckedUpdateManyWithoutDireccionNestedInput = {
    create?: XOR<Enumerable<CompraCreateWithoutDireccionInput>, Enumerable<CompraUncheckedCreateWithoutDireccionInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutDireccionInput>
    upsert?: Enumerable<CompraUpsertWithWhereUniqueWithoutDireccionInput>
    createMany?: CompraCreateManyDireccionInputEnvelope
    set?: Enumerable<CompraWhereUniqueInput>
    disconnect?: Enumerable<CompraWhereUniqueInput>
    delete?: Enumerable<CompraWhereUniqueInput>
    connect?: Enumerable<CompraWhereUniqueInput>
    update?: Enumerable<CompraUpdateWithWhereUniqueWithoutDireccionInput>
    updateMany?: Enumerable<CompraUpdateManyWithWhereWithoutDireccionInput>
    deleteMany?: Enumerable<CompraScalarWhereInput>
  }

  export type CategoriaCreateNestedOneWithoutProductoInput = {
    create?: XOR<CategoriaCreateWithoutProductoInput, CategoriaUncheckedCreateWithoutProductoInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutProductoInput
    connect?: CategoriaWhereUniqueInput
  }

  export type EstadoProductoCreateNestedOneWithoutProductoInput = {
    create?: XOR<EstadoProductoCreateWithoutProductoInput, EstadoProductoUncheckedCreateWithoutProductoInput>
    connectOrCreate?: EstadoProductoCreateOrConnectWithoutProductoInput
    connect?: EstadoProductoWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutProductoInput = {
    create?: XOR<UsuarioCreateWithoutProductoInput, UsuarioUncheckedCreateWithoutProductoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutProductoInput
    connect?: UsuarioWhereUniqueInput
  }

  export type FotoProductoCreateNestedManyWithoutProductoInput = {
    create?: XOR<Enumerable<FotoProductoCreateWithoutProductoInput>, Enumerable<FotoProductoUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<FotoProductoCreateOrConnectWithoutProductoInput>
    createMany?: FotoProductoCreateManyProductoInputEnvelope
    connect?: Enumerable<FotoProductoWhereUniqueInput>
  }

  export type MensajeCreateNestedManyWithoutProductoInput = {
    create?: XOR<Enumerable<MensajeCreateWithoutProductoInput>, Enumerable<MensajeUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<MensajeCreateOrConnectWithoutProductoInput>
    createMany?: MensajeCreateManyProductoInputEnvelope
    connect?: Enumerable<MensajeWhereUniqueInput>
  }

  export type CompraDetalleCreateNestedManyWithoutProductoInput = {
    create?: XOR<Enumerable<CompraDetalleCreateWithoutProductoInput>, Enumerable<CompraDetalleUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<CompraDetalleCreateOrConnectWithoutProductoInput>
    createMany?: CompraDetalleCreateManyProductoInputEnvelope
    connect?: Enumerable<CompraDetalleWhereUniqueInput>
  }

  export type FotoProductoUncheckedCreateNestedManyWithoutProductoInput = {
    create?: XOR<Enumerable<FotoProductoCreateWithoutProductoInput>, Enumerable<FotoProductoUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<FotoProductoCreateOrConnectWithoutProductoInput>
    createMany?: FotoProductoCreateManyProductoInputEnvelope
    connect?: Enumerable<FotoProductoWhereUniqueInput>
  }

  export type MensajeUncheckedCreateNestedManyWithoutProductoInput = {
    create?: XOR<Enumerable<MensajeCreateWithoutProductoInput>, Enumerable<MensajeUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<MensajeCreateOrConnectWithoutProductoInput>
    createMany?: MensajeCreateManyProductoInputEnvelope
    connect?: Enumerable<MensajeWhereUniqueInput>
  }

  export type CompraDetalleUncheckedCreateNestedManyWithoutProductoInput = {
    create?: XOR<Enumerable<CompraDetalleCreateWithoutProductoInput>, Enumerable<CompraDetalleUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<CompraDetalleCreateOrConnectWithoutProductoInput>
    createMany?: CompraDetalleCreateManyProductoInputEnvelope
    connect?: Enumerable<CompraDetalleWhereUniqueInput>
  }

  export type CategoriaUpdateOneRequiredWithoutProductoNestedInput = {
    create?: XOR<CategoriaCreateWithoutProductoInput, CategoriaUncheckedCreateWithoutProductoInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutProductoInput
    upsert?: CategoriaUpsertWithoutProductoInput
    connect?: CategoriaWhereUniqueInput
    update?: XOR<CategoriaUpdateWithoutProductoInput, CategoriaUncheckedUpdateWithoutProductoInput>
  }

  export type EstadoProductoUpdateOneRequiredWithoutProductoNestedInput = {
    create?: XOR<EstadoProductoCreateWithoutProductoInput, EstadoProductoUncheckedCreateWithoutProductoInput>
    connectOrCreate?: EstadoProductoCreateOrConnectWithoutProductoInput
    upsert?: EstadoProductoUpsertWithoutProductoInput
    connect?: EstadoProductoWhereUniqueInput
    update?: XOR<EstadoProductoUpdateWithoutProductoInput, EstadoProductoUncheckedUpdateWithoutProductoInput>
  }

  export type UsuarioUpdateOneRequiredWithoutProductoNestedInput = {
    create?: XOR<UsuarioCreateWithoutProductoInput, UsuarioUncheckedCreateWithoutProductoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutProductoInput
    upsert?: UsuarioUpsertWithoutProductoInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<UsuarioUpdateWithoutProductoInput, UsuarioUncheckedUpdateWithoutProductoInput>
  }

  export type FotoProductoUpdateManyWithoutProductoNestedInput = {
    create?: XOR<Enumerable<FotoProductoCreateWithoutProductoInput>, Enumerable<FotoProductoUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<FotoProductoCreateOrConnectWithoutProductoInput>
    upsert?: Enumerable<FotoProductoUpsertWithWhereUniqueWithoutProductoInput>
    createMany?: FotoProductoCreateManyProductoInputEnvelope
    set?: Enumerable<FotoProductoWhereUniqueInput>
    disconnect?: Enumerable<FotoProductoWhereUniqueInput>
    delete?: Enumerable<FotoProductoWhereUniqueInput>
    connect?: Enumerable<FotoProductoWhereUniqueInput>
    update?: Enumerable<FotoProductoUpdateWithWhereUniqueWithoutProductoInput>
    updateMany?: Enumerable<FotoProductoUpdateManyWithWhereWithoutProductoInput>
    deleteMany?: Enumerable<FotoProductoScalarWhereInput>
  }

  export type MensajeUpdateManyWithoutProductoNestedInput = {
    create?: XOR<Enumerable<MensajeCreateWithoutProductoInput>, Enumerable<MensajeUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<MensajeCreateOrConnectWithoutProductoInput>
    upsert?: Enumerable<MensajeUpsertWithWhereUniqueWithoutProductoInput>
    createMany?: MensajeCreateManyProductoInputEnvelope
    set?: Enumerable<MensajeWhereUniqueInput>
    disconnect?: Enumerable<MensajeWhereUniqueInput>
    delete?: Enumerable<MensajeWhereUniqueInput>
    connect?: Enumerable<MensajeWhereUniqueInput>
    update?: Enumerable<MensajeUpdateWithWhereUniqueWithoutProductoInput>
    updateMany?: Enumerable<MensajeUpdateManyWithWhereWithoutProductoInput>
    deleteMany?: Enumerable<MensajeScalarWhereInput>
  }

  export type CompraDetalleUpdateManyWithoutProductoNestedInput = {
    create?: XOR<Enumerable<CompraDetalleCreateWithoutProductoInput>, Enumerable<CompraDetalleUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<CompraDetalleCreateOrConnectWithoutProductoInput>
    upsert?: Enumerable<CompraDetalleUpsertWithWhereUniqueWithoutProductoInput>
    createMany?: CompraDetalleCreateManyProductoInputEnvelope
    set?: Enumerable<CompraDetalleWhereUniqueInput>
    disconnect?: Enumerable<CompraDetalleWhereUniqueInput>
    delete?: Enumerable<CompraDetalleWhereUniqueInput>
    connect?: Enumerable<CompraDetalleWhereUniqueInput>
    update?: Enumerable<CompraDetalleUpdateWithWhereUniqueWithoutProductoInput>
    updateMany?: Enumerable<CompraDetalleUpdateManyWithWhereWithoutProductoInput>
    deleteMany?: Enumerable<CompraDetalleScalarWhereInput>
  }

  export type FotoProductoUncheckedUpdateManyWithoutProductoNestedInput = {
    create?: XOR<Enumerable<FotoProductoCreateWithoutProductoInput>, Enumerable<FotoProductoUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<FotoProductoCreateOrConnectWithoutProductoInput>
    upsert?: Enumerable<FotoProductoUpsertWithWhereUniqueWithoutProductoInput>
    createMany?: FotoProductoCreateManyProductoInputEnvelope
    set?: Enumerable<FotoProductoWhereUniqueInput>
    disconnect?: Enumerable<FotoProductoWhereUniqueInput>
    delete?: Enumerable<FotoProductoWhereUniqueInput>
    connect?: Enumerable<FotoProductoWhereUniqueInput>
    update?: Enumerable<FotoProductoUpdateWithWhereUniqueWithoutProductoInput>
    updateMany?: Enumerable<FotoProductoUpdateManyWithWhereWithoutProductoInput>
    deleteMany?: Enumerable<FotoProductoScalarWhereInput>
  }

  export type MensajeUncheckedUpdateManyWithoutProductoNestedInput = {
    create?: XOR<Enumerable<MensajeCreateWithoutProductoInput>, Enumerable<MensajeUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<MensajeCreateOrConnectWithoutProductoInput>
    upsert?: Enumerable<MensajeUpsertWithWhereUniqueWithoutProductoInput>
    createMany?: MensajeCreateManyProductoInputEnvelope
    set?: Enumerable<MensajeWhereUniqueInput>
    disconnect?: Enumerable<MensajeWhereUniqueInput>
    delete?: Enumerable<MensajeWhereUniqueInput>
    connect?: Enumerable<MensajeWhereUniqueInput>
    update?: Enumerable<MensajeUpdateWithWhereUniqueWithoutProductoInput>
    updateMany?: Enumerable<MensajeUpdateManyWithWhereWithoutProductoInput>
    deleteMany?: Enumerable<MensajeScalarWhereInput>
  }

  export type CompraDetalleUncheckedUpdateManyWithoutProductoNestedInput = {
    create?: XOR<Enumerable<CompraDetalleCreateWithoutProductoInput>, Enumerable<CompraDetalleUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<CompraDetalleCreateOrConnectWithoutProductoInput>
    upsert?: Enumerable<CompraDetalleUpsertWithWhereUniqueWithoutProductoInput>
    createMany?: CompraDetalleCreateManyProductoInputEnvelope
    set?: Enumerable<CompraDetalleWhereUniqueInput>
    disconnect?: Enumerable<CompraDetalleWhereUniqueInput>
    delete?: Enumerable<CompraDetalleWhereUniqueInput>
    connect?: Enumerable<CompraDetalleWhereUniqueInput>
    update?: Enumerable<CompraDetalleUpdateWithWhereUniqueWithoutProductoInput>
    updateMany?: Enumerable<CompraDetalleUpdateManyWithWhereWithoutProductoInput>
    deleteMany?: Enumerable<CompraDetalleScalarWhereInput>
  }

  export type ProductoCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<Enumerable<ProductoCreateWithoutCategoriaInput>, Enumerable<ProductoUncheckedCreateWithoutCategoriaInput>>
    connectOrCreate?: Enumerable<ProductoCreateOrConnectWithoutCategoriaInput>
    createMany?: ProductoCreateManyCategoriaInputEnvelope
    connect?: Enumerable<ProductoWhereUniqueInput>
  }

  export type ProductoUncheckedCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<Enumerable<ProductoCreateWithoutCategoriaInput>, Enumerable<ProductoUncheckedCreateWithoutCategoriaInput>>
    connectOrCreate?: Enumerable<ProductoCreateOrConnectWithoutCategoriaInput>
    createMany?: ProductoCreateManyCategoriaInputEnvelope
    connect?: Enumerable<ProductoWhereUniqueInput>
  }

  export type ProductoUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<Enumerable<ProductoCreateWithoutCategoriaInput>, Enumerable<ProductoUncheckedCreateWithoutCategoriaInput>>
    connectOrCreate?: Enumerable<ProductoCreateOrConnectWithoutCategoriaInput>
    upsert?: Enumerable<ProductoUpsertWithWhereUniqueWithoutCategoriaInput>
    createMany?: ProductoCreateManyCategoriaInputEnvelope
    set?: Enumerable<ProductoWhereUniqueInput>
    disconnect?: Enumerable<ProductoWhereUniqueInput>
    delete?: Enumerable<ProductoWhereUniqueInput>
    connect?: Enumerable<ProductoWhereUniqueInput>
    update?: Enumerable<ProductoUpdateWithWhereUniqueWithoutCategoriaInput>
    updateMany?: Enumerable<ProductoUpdateManyWithWhereWithoutCategoriaInput>
    deleteMany?: Enumerable<ProductoScalarWhereInput>
  }

  export type ProductoUncheckedUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<Enumerable<ProductoCreateWithoutCategoriaInput>, Enumerable<ProductoUncheckedCreateWithoutCategoriaInput>>
    connectOrCreate?: Enumerable<ProductoCreateOrConnectWithoutCategoriaInput>
    upsert?: Enumerable<ProductoUpsertWithWhereUniqueWithoutCategoriaInput>
    createMany?: ProductoCreateManyCategoriaInputEnvelope
    set?: Enumerable<ProductoWhereUniqueInput>
    disconnect?: Enumerable<ProductoWhereUniqueInput>
    delete?: Enumerable<ProductoWhereUniqueInput>
    connect?: Enumerable<ProductoWhereUniqueInput>
    update?: Enumerable<ProductoUpdateWithWhereUniqueWithoutCategoriaInput>
    updateMany?: Enumerable<ProductoUpdateManyWithWhereWithoutCategoriaInput>
    deleteMany?: Enumerable<ProductoScalarWhereInput>
  }

  export type ProductoCreateNestedManyWithoutEstadoInput = {
    create?: XOR<Enumerable<ProductoCreateWithoutEstadoInput>, Enumerable<ProductoUncheckedCreateWithoutEstadoInput>>
    connectOrCreate?: Enumerable<ProductoCreateOrConnectWithoutEstadoInput>
    createMany?: ProductoCreateManyEstadoInputEnvelope
    connect?: Enumerable<ProductoWhereUniqueInput>
  }

  export type ProductoUncheckedCreateNestedManyWithoutEstadoInput = {
    create?: XOR<Enumerable<ProductoCreateWithoutEstadoInput>, Enumerable<ProductoUncheckedCreateWithoutEstadoInput>>
    connectOrCreate?: Enumerable<ProductoCreateOrConnectWithoutEstadoInput>
    createMany?: ProductoCreateManyEstadoInputEnvelope
    connect?: Enumerable<ProductoWhereUniqueInput>
  }

  export type ProductoUpdateManyWithoutEstadoNestedInput = {
    create?: XOR<Enumerable<ProductoCreateWithoutEstadoInput>, Enumerable<ProductoUncheckedCreateWithoutEstadoInput>>
    connectOrCreate?: Enumerable<ProductoCreateOrConnectWithoutEstadoInput>
    upsert?: Enumerable<ProductoUpsertWithWhereUniqueWithoutEstadoInput>
    createMany?: ProductoCreateManyEstadoInputEnvelope
    set?: Enumerable<ProductoWhereUniqueInput>
    disconnect?: Enumerable<ProductoWhereUniqueInput>
    delete?: Enumerable<ProductoWhereUniqueInput>
    connect?: Enumerable<ProductoWhereUniqueInput>
    update?: Enumerable<ProductoUpdateWithWhereUniqueWithoutEstadoInput>
    updateMany?: Enumerable<ProductoUpdateManyWithWhereWithoutEstadoInput>
    deleteMany?: Enumerable<ProductoScalarWhereInput>
  }

  export type ProductoUncheckedUpdateManyWithoutEstadoNestedInput = {
    create?: XOR<Enumerable<ProductoCreateWithoutEstadoInput>, Enumerable<ProductoUncheckedCreateWithoutEstadoInput>>
    connectOrCreate?: Enumerable<ProductoCreateOrConnectWithoutEstadoInput>
    upsert?: Enumerable<ProductoUpsertWithWhereUniqueWithoutEstadoInput>
    createMany?: ProductoCreateManyEstadoInputEnvelope
    set?: Enumerable<ProductoWhereUniqueInput>
    disconnect?: Enumerable<ProductoWhereUniqueInput>
    delete?: Enumerable<ProductoWhereUniqueInput>
    connect?: Enumerable<ProductoWhereUniqueInput>
    update?: Enumerable<ProductoUpdateWithWhereUniqueWithoutEstadoInput>
    updateMany?: Enumerable<ProductoUpdateManyWithWhereWithoutEstadoInput>
    deleteMany?: Enumerable<ProductoScalarWhereInput>
  }

  export type ProductoCreateNestedOneWithoutFotoProductoInput = {
    create?: XOR<ProductoCreateWithoutFotoProductoInput, ProductoUncheckedCreateWithoutFotoProductoInput>
    connectOrCreate?: ProductoCreateOrConnectWithoutFotoProductoInput
    connect?: ProductoWhereUniqueInput
  }

  export type ProductoUpdateOneRequiredWithoutFotoProductoNestedInput = {
    create?: XOR<ProductoCreateWithoutFotoProductoInput, ProductoUncheckedCreateWithoutFotoProductoInput>
    connectOrCreate?: ProductoCreateOrConnectWithoutFotoProductoInput
    upsert?: ProductoUpsertWithoutFotoProductoInput
    connect?: ProductoWhereUniqueInput
    update?: XOR<ProductoUpdateWithoutFotoProductoInput, ProductoUncheckedUpdateWithoutFotoProductoInput>
  }

  export type UsuarioCreateNestedOneWithoutMensajeInput = {
    create?: XOR<UsuarioCreateWithoutMensajeInput, UsuarioUncheckedCreateWithoutMensajeInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutMensajeInput
    connect?: UsuarioWhereUniqueInput
  }

  export type ProductoCreateNestedOneWithoutMensajeInput = {
    create?: XOR<ProductoCreateWithoutMensajeInput, ProductoUncheckedCreateWithoutMensajeInput>
    connectOrCreate?: ProductoCreateOrConnectWithoutMensajeInput
    connect?: ProductoWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutMensajeNestedInput = {
    create?: XOR<UsuarioCreateWithoutMensajeInput, UsuarioUncheckedCreateWithoutMensajeInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutMensajeInput
    upsert?: UsuarioUpsertWithoutMensajeInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<UsuarioUpdateWithoutMensajeInput, UsuarioUncheckedUpdateWithoutMensajeInput>
  }

  export type ProductoUpdateOneRequiredWithoutMensajeNestedInput = {
    create?: XOR<ProductoCreateWithoutMensajeInput, ProductoUncheckedCreateWithoutMensajeInput>
    connectOrCreate?: ProductoCreateOrConnectWithoutMensajeInput
    upsert?: ProductoUpsertWithoutMensajeInput
    connect?: ProductoWhereUniqueInput
    update?: XOR<ProductoUpdateWithoutMensajeInput, ProductoUncheckedUpdateWithoutMensajeInput>
  }

  export type CompraDetalleCreateNestedManyWithoutEstadoCompraInput = {
    create?: XOR<Enumerable<CompraDetalleCreateWithoutEstadoCompraInput>, Enumerable<CompraDetalleUncheckedCreateWithoutEstadoCompraInput>>
    connectOrCreate?: Enumerable<CompraDetalleCreateOrConnectWithoutEstadoCompraInput>
    createMany?: CompraDetalleCreateManyEstadoCompraInputEnvelope
    connect?: Enumerable<CompraDetalleWhereUniqueInput>
  }

  export type CompraDetalleUncheckedCreateNestedManyWithoutEstadoCompraInput = {
    create?: XOR<Enumerable<CompraDetalleCreateWithoutEstadoCompraInput>, Enumerable<CompraDetalleUncheckedCreateWithoutEstadoCompraInput>>
    connectOrCreate?: Enumerable<CompraDetalleCreateOrConnectWithoutEstadoCompraInput>
    createMany?: CompraDetalleCreateManyEstadoCompraInputEnvelope
    connect?: Enumerable<CompraDetalleWhereUniqueInput>
  }

  export type CompraDetalleUpdateManyWithoutEstadoCompraNestedInput = {
    create?: XOR<Enumerable<CompraDetalleCreateWithoutEstadoCompraInput>, Enumerable<CompraDetalleUncheckedCreateWithoutEstadoCompraInput>>
    connectOrCreate?: Enumerable<CompraDetalleCreateOrConnectWithoutEstadoCompraInput>
    upsert?: Enumerable<CompraDetalleUpsertWithWhereUniqueWithoutEstadoCompraInput>
    createMany?: CompraDetalleCreateManyEstadoCompraInputEnvelope
    set?: Enumerable<CompraDetalleWhereUniqueInput>
    disconnect?: Enumerable<CompraDetalleWhereUniqueInput>
    delete?: Enumerable<CompraDetalleWhereUniqueInput>
    connect?: Enumerable<CompraDetalleWhereUniqueInput>
    update?: Enumerable<CompraDetalleUpdateWithWhereUniqueWithoutEstadoCompraInput>
    updateMany?: Enumerable<CompraDetalleUpdateManyWithWhereWithoutEstadoCompraInput>
    deleteMany?: Enumerable<CompraDetalleScalarWhereInput>
  }

  export type CompraDetalleUncheckedUpdateManyWithoutEstadoCompraNestedInput = {
    create?: XOR<Enumerable<CompraDetalleCreateWithoutEstadoCompraInput>, Enumerable<CompraDetalleUncheckedCreateWithoutEstadoCompraInput>>
    connectOrCreate?: Enumerable<CompraDetalleCreateOrConnectWithoutEstadoCompraInput>
    upsert?: Enumerable<CompraDetalleUpsertWithWhereUniqueWithoutEstadoCompraInput>
    createMany?: CompraDetalleCreateManyEstadoCompraInputEnvelope
    set?: Enumerable<CompraDetalleWhereUniqueInput>
    disconnect?: Enumerable<CompraDetalleWhereUniqueInput>
    delete?: Enumerable<CompraDetalleWhereUniqueInput>
    connect?: Enumerable<CompraDetalleWhereUniqueInput>
    update?: Enumerable<CompraDetalleUpdateWithWhereUniqueWithoutEstadoCompraInput>
    updateMany?: Enumerable<CompraDetalleUpdateManyWithWhereWithoutEstadoCompraInput>
    deleteMany?: Enumerable<CompraDetalleScalarWhereInput>
  }

  export type UsuarioCreateNestedOneWithoutCompraInput = {
    create?: XOR<UsuarioCreateWithoutCompraInput, UsuarioUncheckedCreateWithoutCompraInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCompraInput
    connect?: UsuarioWhereUniqueInput
  }

  export type DireccionCreateNestedOneWithoutCompraInput = {
    create?: XOR<DireccionCreateWithoutCompraInput, DireccionUncheckedCreateWithoutCompraInput>
    connectOrCreate?: DireccionCreateOrConnectWithoutCompraInput
    connect?: DireccionWhereUniqueInput
  }

  export type MetodoPagoCreateNestedOneWithoutCompraInput = {
    create?: XOR<MetodoPagoCreateWithoutCompraInput, MetodoPagoUncheckedCreateWithoutCompraInput>
    connectOrCreate?: MetodoPagoCreateOrConnectWithoutCompraInput
    connect?: MetodoPagoWhereUniqueInput
  }

  export type CompraDetalleCreateNestedManyWithoutCompraInput = {
    create?: XOR<Enumerable<CompraDetalleCreateWithoutCompraInput>, Enumerable<CompraDetalleUncheckedCreateWithoutCompraInput>>
    connectOrCreate?: Enumerable<CompraDetalleCreateOrConnectWithoutCompraInput>
    createMany?: CompraDetalleCreateManyCompraInputEnvelope
    connect?: Enumerable<CompraDetalleWhereUniqueInput>
  }

  export type EvaluacionCreateNestedManyWithoutCompraInput = {
    create?: XOR<Enumerable<EvaluacionCreateWithoutCompraInput>, Enumerable<EvaluacionUncheckedCreateWithoutCompraInput>>
    connectOrCreate?: Enumerable<EvaluacionCreateOrConnectWithoutCompraInput>
    createMany?: EvaluacionCreateManyCompraInputEnvelope
    connect?: Enumerable<EvaluacionWhereUniqueInput>
  }

  export type CompraDetalleUncheckedCreateNestedManyWithoutCompraInput = {
    create?: XOR<Enumerable<CompraDetalleCreateWithoutCompraInput>, Enumerable<CompraDetalleUncheckedCreateWithoutCompraInput>>
    connectOrCreate?: Enumerable<CompraDetalleCreateOrConnectWithoutCompraInput>
    createMany?: CompraDetalleCreateManyCompraInputEnvelope
    connect?: Enumerable<CompraDetalleWhereUniqueInput>
  }

  export type EvaluacionUncheckedCreateNestedManyWithoutCompraInput = {
    create?: XOR<Enumerable<EvaluacionCreateWithoutCompraInput>, Enumerable<EvaluacionUncheckedCreateWithoutCompraInput>>
    connectOrCreate?: Enumerable<EvaluacionCreateOrConnectWithoutCompraInput>
    createMany?: EvaluacionCreateManyCompraInputEnvelope
    connect?: Enumerable<EvaluacionWhereUniqueInput>
  }

  export type UsuarioUpdateOneRequiredWithoutCompraNestedInput = {
    create?: XOR<UsuarioCreateWithoutCompraInput, UsuarioUncheckedCreateWithoutCompraInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCompraInput
    upsert?: UsuarioUpsertWithoutCompraInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<UsuarioUpdateWithoutCompraInput, UsuarioUncheckedUpdateWithoutCompraInput>
  }

  export type DireccionUpdateOneRequiredWithoutCompraNestedInput = {
    create?: XOR<DireccionCreateWithoutCompraInput, DireccionUncheckedCreateWithoutCompraInput>
    connectOrCreate?: DireccionCreateOrConnectWithoutCompraInput
    upsert?: DireccionUpsertWithoutCompraInput
    connect?: DireccionWhereUniqueInput
    update?: XOR<DireccionUpdateWithoutCompraInput, DireccionUncheckedUpdateWithoutCompraInput>
  }

  export type MetodoPagoUpdateOneRequiredWithoutCompraNestedInput = {
    create?: XOR<MetodoPagoCreateWithoutCompraInput, MetodoPagoUncheckedCreateWithoutCompraInput>
    connectOrCreate?: MetodoPagoCreateOrConnectWithoutCompraInput
    upsert?: MetodoPagoUpsertWithoutCompraInput
    connect?: MetodoPagoWhereUniqueInput
    update?: XOR<MetodoPagoUpdateWithoutCompraInput, MetodoPagoUncheckedUpdateWithoutCompraInput>
  }

  export type CompraDetalleUpdateManyWithoutCompraNestedInput = {
    create?: XOR<Enumerable<CompraDetalleCreateWithoutCompraInput>, Enumerable<CompraDetalleUncheckedCreateWithoutCompraInput>>
    connectOrCreate?: Enumerable<CompraDetalleCreateOrConnectWithoutCompraInput>
    upsert?: Enumerable<CompraDetalleUpsertWithWhereUniqueWithoutCompraInput>
    createMany?: CompraDetalleCreateManyCompraInputEnvelope
    set?: Enumerable<CompraDetalleWhereUniqueInput>
    disconnect?: Enumerable<CompraDetalleWhereUniqueInput>
    delete?: Enumerable<CompraDetalleWhereUniqueInput>
    connect?: Enumerable<CompraDetalleWhereUniqueInput>
    update?: Enumerable<CompraDetalleUpdateWithWhereUniqueWithoutCompraInput>
    updateMany?: Enumerable<CompraDetalleUpdateManyWithWhereWithoutCompraInput>
    deleteMany?: Enumerable<CompraDetalleScalarWhereInput>
  }

  export type EvaluacionUpdateManyWithoutCompraNestedInput = {
    create?: XOR<Enumerable<EvaluacionCreateWithoutCompraInput>, Enumerable<EvaluacionUncheckedCreateWithoutCompraInput>>
    connectOrCreate?: Enumerable<EvaluacionCreateOrConnectWithoutCompraInput>
    upsert?: Enumerable<EvaluacionUpsertWithWhereUniqueWithoutCompraInput>
    createMany?: EvaluacionCreateManyCompraInputEnvelope
    set?: Enumerable<EvaluacionWhereUniqueInput>
    disconnect?: Enumerable<EvaluacionWhereUniqueInput>
    delete?: Enumerable<EvaluacionWhereUniqueInput>
    connect?: Enumerable<EvaluacionWhereUniqueInput>
    update?: Enumerable<EvaluacionUpdateWithWhereUniqueWithoutCompraInput>
    updateMany?: Enumerable<EvaluacionUpdateManyWithWhereWithoutCompraInput>
    deleteMany?: Enumerable<EvaluacionScalarWhereInput>
  }

  export type CompraDetalleUncheckedUpdateManyWithoutCompraNestedInput = {
    create?: XOR<Enumerable<CompraDetalleCreateWithoutCompraInput>, Enumerable<CompraDetalleUncheckedCreateWithoutCompraInput>>
    connectOrCreate?: Enumerable<CompraDetalleCreateOrConnectWithoutCompraInput>
    upsert?: Enumerable<CompraDetalleUpsertWithWhereUniqueWithoutCompraInput>
    createMany?: CompraDetalleCreateManyCompraInputEnvelope
    set?: Enumerable<CompraDetalleWhereUniqueInput>
    disconnect?: Enumerable<CompraDetalleWhereUniqueInput>
    delete?: Enumerable<CompraDetalleWhereUniqueInput>
    connect?: Enumerable<CompraDetalleWhereUniqueInput>
    update?: Enumerable<CompraDetalleUpdateWithWhereUniqueWithoutCompraInput>
    updateMany?: Enumerable<CompraDetalleUpdateManyWithWhereWithoutCompraInput>
    deleteMany?: Enumerable<CompraDetalleScalarWhereInput>
  }

  export type EvaluacionUncheckedUpdateManyWithoutCompraNestedInput = {
    create?: XOR<Enumerable<EvaluacionCreateWithoutCompraInput>, Enumerable<EvaluacionUncheckedCreateWithoutCompraInput>>
    connectOrCreate?: Enumerable<EvaluacionCreateOrConnectWithoutCompraInput>
    upsert?: Enumerable<EvaluacionUpsertWithWhereUniqueWithoutCompraInput>
    createMany?: EvaluacionCreateManyCompraInputEnvelope
    set?: Enumerable<EvaluacionWhereUniqueInput>
    disconnect?: Enumerable<EvaluacionWhereUniqueInput>
    delete?: Enumerable<EvaluacionWhereUniqueInput>
    connect?: Enumerable<EvaluacionWhereUniqueInput>
    update?: Enumerable<EvaluacionUpdateWithWhereUniqueWithoutCompraInput>
    updateMany?: Enumerable<EvaluacionUpdateManyWithWhereWithoutCompraInput>
    deleteMany?: Enumerable<EvaluacionScalarWhereInput>
  }

  export type CompraCreateNestedOneWithoutCompraDetalleInput = {
    create?: XOR<CompraCreateWithoutCompraDetalleInput, CompraUncheckedCreateWithoutCompraDetalleInput>
    connectOrCreate?: CompraCreateOrConnectWithoutCompraDetalleInput
    connect?: CompraWhereUniqueInput
  }

  export type ProductoCreateNestedOneWithoutCompraDetalleInput = {
    create?: XOR<ProductoCreateWithoutCompraDetalleInput, ProductoUncheckedCreateWithoutCompraDetalleInput>
    connectOrCreate?: ProductoCreateOrConnectWithoutCompraDetalleInput
    connect?: ProductoWhereUniqueInput
  }

  export type EstadoCompraCreateNestedOneWithoutCompraDetalleInput = {
    create?: XOR<EstadoCompraCreateWithoutCompraDetalleInput, EstadoCompraUncheckedCreateWithoutCompraDetalleInput>
    connectOrCreate?: EstadoCompraCreateOrConnectWithoutCompraDetalleInput
    connect?: EstadoCompraWhereUniqueInput
  }

  export type CompraUpdateOneRequiredWithoutCompraDetalleNestedInput = {
    create?: XOR<CompraCreateWithoutCompraDetalleInput, CompraUncheckedCreateWithoutCompraDetalleInput>
    connectOrCreate?: CompraCreateOrConnectWithoutCompraDetalleInput
    upsert?: CompraUpsertWithoutCompraDetalleInput
    connect?: CompraWhereUniqueInput
    update?: XOR<CompraUpdateWithoutCompraDetalleInput, CompraUncheckedUpdateWithoutCompraDetalleInput>
  }

  export type ProductoUpdateOneRequiredWithoutCompraDetalleNestedInput = {
    create?: XOR<ProductoCreateWithoutCompraDetalleInput, ProductoUncheckedCreateWithoutCompraDetalleInput>
    connectOrCreate?: ProductoCreateOrConnectWithoutCompraDetalleInput
    upsert?: ProductoUpsertWithoutCompraDetalleInput
    connect?: ProductoWhereUniqueInput
    update?: XOR<ProductoUpdateWithoutCompraDetalleInput, ProductoUncheckedUpdateWithoutCompraDetalleInput>
  }

  export type EstadoCompraUpdateOneRequiredWithoutCompraDetalleNestedInput = {
    create?: XOR<EstadoCompraCreateWithoutCompraDetalleInput, EstadoCompraUncheckedCreateWithoutCompraDetalleInput>
    connectOrCreate?: EstadoCompraCreateOrConnectWithoutCompraDetalleInput
    upsert?: EstadoCompraUpsertWithoutCompraDetalleInput
    connect?: EstadoCompraWhereUniqueInput
    update?: XOR<EstadoCompraUpdateWithoutCompraDetalleInput, EstadoCompraUncheckedUpdateWithoutCompraDetalleInput>
  }

  export type CompraCreateNestedOneWithoutEvaluacionInput = {
    create?: XOR<CompraCreateWithoutEvaluacionInput, CompraUncheckedCreateWithoutEvaluacionInput>
    connectOrCreate?: CompraCreateOrConnectWithoutEvaluacionInput
    connect?: CompraWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutEvaluadoresInput = {
    create?: XOR<UsuarioCreateWithoutEvaluadoresInput, UsuarioUncheckedCreateWithoutEvaluadoresInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutEvaluadoresInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutEvaluadosInput = {
    create?: XOR<UsuarioCreateWithoutEvaluadosInput, UsuarioUncheckedCreateWithoutEvaluadosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutEvaluadosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type CompraUpdateOneRequiredWithoutEvaluacionNestedInput = {
    create?: XOR<CompraCreateWithoutEvaluacionInput, CompraUncheckedCreateWithoutEvaluacionInput>
    connectOrCreate?: CompraCreateOrConnectWithoutEvaluacionInput
    upsert?: CompraUpsertWithoutEvaluacionInput
    connect?: CompraWhereUniqueInput
    update?: XOR<CompraUpdateWithoutEvaluacionInput, CompraUncheckedUpdateWithoutEvaluacionInput>
  }

  export type UsuarioUpdateOneRequiredWithoutEvaluadoresNestedInput = {
    create?: XOR<UsuarioCreateWithoutEvaluadoresInput, UsuarioUncheckedCreateWithoutEvaluadoresInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutEvaluadoresInput
    upsert?: UsuarioUpsertWithoutEvaluadoresInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<UsuarioUpdateWithoutEvaluadoresInput, UsuarioUncheckedUpdateWithoutEvaluadoresInput>
  }

  export type UsuarioUpdateOneRequiredWithoutEvaluadosNestedInput = {
    create?: XOR<UsuarioCreateWithoutEvaluadosInput, UsuarioUncheckedCreateWithoutEvaluadosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutEvaluadosInput
    upsert?: UsuarioUpsertWithoutEvaluadosInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<UsuarioUpdateWithoutEvaluadosInput, UsuarioUncheckedUpdateWithoutEvaluadosInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type RolOnUsuarioCreateWithoutUsuarioInput = {
    rol: RolCreateNestedOneWithoutUsuariosInput
  }

  export type RolOnUsuarioUncheckedCreateWithoutUsuarioInput = {
    RolId: number
  }

  export type RolOnUsuarioCreateOrConnectWithoutUsuarioInput = {
    where: RolOnUsuarioWhereUniqueInput
    create: XOR<RolOnUsuarioCreateWithoutUsuarioInput, RolOnUsuarioUncheckedCreateWithoutUsuarioInput>
  }

  export type RolOnUsuarioCreateManyUsuarioInputEnvelope = {
    data: Enumerable<RolOnUsuarioCreateManyUsuarioInput>
    skipDuplicates?: boolean
  }

  export type MetodoPagoCreateWithoutUsuarioInput = {
    NumeroCuenta: string
    Expiracion: Date | string
    Titulo: string
    Borrado?: boolean
    tipoPago: TipoPagoCreateNestedOneWithoutMetodoPagoInput
    Compra?: CompraCreateNestedManyWithoutMetodoPagoInput
  }

  export type MetodoPagoUncheckedCreateWithoutUsuarioInput = {
    id?: number
    TipoPagoId: number
    NumeroCuenta: string
    Expiracion: Date | string
    Titulo: string
    Borrado?: boolean
    Compra?: CompraUncheckedCreateNestedManyWithoutMetodoPagoInput
  }

  export type MetodoPagoCreateOrConnectWithoutUsuarioInput = {
    where: MetodoPagoWhereUniqueInput
    create: XOR<MetodoPagoCreateWithoutUsuarioInput, MetodoPagoUncheckedCreateWithoutUsuarioInput>
  }

  export type MetodoPagoCreateManyUsuarioInputEnvelope = {
    data: Enumerable<MetodoPagoCreateManyUsuarioInput>
    skipDuplicates?: boolean
  }

  export type DireccionCreateWithoutUsuarioInput = {
    Provincia: string
    Canton: string
    Distrito: string
    Detalle: string
    CodigoPostal: string
    Telefono: string
    Titulo: string
    Compra?: CompraCreateNestedManyWithoutDireccionInput
  }

  export type DireccionUncheckedCreateWithoutUsuarioInput = {
    id?: number
    Provincia: string
    Canton: string
    Distrito: string
    Detalle: string
    CodigoPostal: string
    Telefono: string
    Titulo: string
    Compra?: CompraUncheckedCreateNestedManyWithoutDireccionInput
  }

  export type DireccionCreateOrConnectWithoutUsuarioInput = {
    where: DireccionWhereUniqueInput
    create: XOR<DireccionCreateWithoutUsuarioInput, DireccionUncheckedCreateWithoutUsuarioInput>
  }

  export type DireccionCreateManyUsuarioInputEnvelope = {
    data: Enumerable<DireccionCreateManyUsuarioInput>
    skipDuplicates?: boolean
  }

  export type ProductoCreateWithoutVendedorInput = {
    Nombre: string
    Descripcion: string
    Precio: Decimal | DecimalJsLike | number | string
    Cantidad: number
    Borrado?: boolean
    categoria: CategoriaCreateNestedOneWithoutProductoInput
    estado: EstadoProductoCreateNestedOneWithoutProductoInput
    FotoProducto?: FotoProductoCreateNestedManyWithoutProductoInput
    Mensaje?: MensajeCreateNestedManyWithoutProductoInput
    CompraDetalle?: CompraDetalleCreateNestedManyWithoutProductoInput
  }

  export type ProductoUncheckedCreateWithoutVendedorInput = {
    id?: number
    Nombre: string
    Descripcion: string
    Precio: Decimal | DecimalJsLike | number | string
    Cantidad: number
    CategoriaId: number
    EstadoId: number
    Borrado?: boolean
    FotoProducto?: FotoProductoUncheckedCreateNestedManyWithoutProductoInput
    Mensaje?: MensajeUncheckedCreateNestedManyWithoutProductoInput
    CompraDetalle?: CompraDetalleUncheckedCreateNestedManyWithoutProductoInput
  }

  export type ProductoCreateOrConnectWithoutVendedorInput = {
    where: ProductoWhereUniqueInput
    create: XOR<ProductoCreateWithoutVendedorInput, ProductoUncheckedCreateWithoutVendedorInput>
  }

  export type ProductoCreateManyVendedorInputEnvelope = {
    data: Enumerable<ProductoCreateManyVendedorInput>
    skipDuplicates?: boolean
  }

  export type MensajeCreateWithoutClienteInput = {
    Pregunta: string
    Respuesta?: string | null
    Borrado?: boolean
    Fecha?: Date | string
    producto: ProductoCreateNestedOneWithoutMensajeInput
  }

  export type MensajeUncheckedCreateWithoutClienteInput = {
    id?: number
    ProductoId: number
    Pregunta: string
    Respuesta?: string | null
    Borrado?: boolean
    Fecha?: Date | string
  }

  export type MensajeCreateOrConnectWithoutClienteInput = {
    where: MensajeWhereUniqueInput
    create: XOR<MensajeCreateWithoutClienteInput, MensajeUncheckedCreateWithoutClienteInput>
  }

  export type MensajeCreateManyClienteInputEnvelope = {
    data: Enumerable<MensajeCreateManyClienteInput>
    skipDuplicates?: boolean
  }

  export type CompraCreateWithoutClienteInput = {
    Subtotal: Decimal | DecimalJsLike | number | string
    Total: Decimal | DecimalJsLike | number | string
    Fecha?: Date | string
    Borrado?: boolean
    direccion: DireccionCreateNestedOneWithoutCompraInput
    metodoPago: MetodoPagoCreateNestedOneWithoutCompraInput
    CompraDetalle?: CompraDetalleCreateNestedManyWithoutCompraInput
    Evaluacion?: EvaluacionCreateNestedManyWithoutCompraInput
  }

  export type CompraUncheckedCreateWithoutClienteInput = {
    id?: number
    DireccionId: number
    MetodoPagoId: number
    Subtotal: Decimal | DecimalJsLike | number | string
    Total: Decimal | DecimalJsLike | number | string
    Fecha?: Date | string
    Borrado?: boolean
    CompraDetalle?: CompraDetalleUncheckedCreateNestedManyWithoutCompraInput
    Evaluacion?: EvaluacionUncheckedCreateNestedManyWithoutCompraInput
  }

  export type CompraCreateOrConnectWithoutClienteInput = {
    where: CompraWhereUniqueInput
    create: XOR<CompraCreateWithoutClienteInput, CompraUncheckedCreateWithoutClienteInput>
  }

  export type CompraCreateManyClienteInputEnvelope = {
    data: Enumerable<CompraCreateManyClienteInput>
    skipDuplicates?: boolean
  }

  export type EvaluacionCreateWithoutEvaluadorInput = {
    Calificacion: number
    Borrado?: boolean
    compra: CompraCreateNestedOneWithoutEvaluacionInput
    evaluado: UsuarioCreateNestedOneWithoutEvaluadosInput
  }

  export type EvaluacionUncheckedCreateWithoutEvaluadorInput = {
    id?: number
    CompraId: number
    EvaluadoId: number
    Calificacion: number
    Borrado?: boolean
  }

  export type EvaluacionCreateOrConnectWithoutEvaluadorInput = {
    where: EvaluacionWhereUniqueInput
    create: XOR<EvaluacionCreateWithoutEvaluadorInput, EvaluacionUncheckedCreateWithoutEvaluadorInput>
  }

  export type EvaluacionCreateManyEvaluadorInputEnvelope = {
    data: Enumerable<EvaluacionCreateManyEvaluadorInput>
    skipDuplicates?: boolean
  }

  export type EvaluacionCreateWithoutEvaluadoInput = {
    Calificacion: number
    Borrado?: boolean
    compra: CompraCreateNestedOneWithoutEvaluacionInput
    evaluador: UsuarioCreateNestedOneWithoutEvaluadoresInput
  }

  export type EvaluacionUncheckedCreateWithoutEvaluadoInput = {
    id?: number
    CompraId: number
    EvaluadorId: number
    Calificacion: number
    Borrado?: boolean
  }

  export type EvaluacionCreateOrConnectWithoutEvaluadoInput = {
    where: EvaluacionWhereUniqueInput
    create: XOR<EvaluacionCreateWithoutEvaluadoInput, EvaluacionUncheckedCreateWithoutEvaluadoInput>
  }

  export type EvaluacionCreateManyEvaluadoInputEnvelope = {
    data: Enumerable<EvaluacionCreateManyEvaluadoInput>
    skipDuplicates?: boolean
  }

  export type RolOnUsuarioUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: RolOnUsuarioWhereUniqueInput
    update: XOR<RolOnUsuarioUpdateWithoutUsuarioInput, RolOnUsuarioUncheckedUpdateWithoutUsuarioInput>
    create: XOR<RolOnUsuarioCreateWithoutUsuarioInput, RolOnUsuarioUncheckedCreateWithoutUsuarioInput>
  }

  export type RolOnUsuarioUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: RolOnUsuarioWhereUniqueInput
    data: XOR<RolOnUsuarioUpdateWithoutUsuarioInput, RolOnUsuarioUncheckedUpdateWithoutUsuarioInput>
  }

  export type RolOnUsuarioUpdateManyWithWhereWithoutUsuarioInput = {
    where: RolOnUsuarioScalarWhereInput
    data: XOR<RolOnUsuarioUpdateManyMutationInput, RolOnUsuarioUncheckedUpdateManyWithoutRolesInput>
  }

  export type RolOnUsuarioScalarWhereInput = {
    AND?: Enumerable<RolOnUsuarioScalarWhereInput>
    OR?: Enumerable<RolOnUsuarioScalarWhereInput>
    NOT?: Enumerable<RolOnUsuarioScalarWhereInput>
    RolId?: IntFilter | number
    UsuarioId?: IntFilter | number
  }

  export type MetodoPagoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: MetodoPagoWhereUniqueInput
    update: XOR<MetodoPagoUpdateWithoutUsuarioInput, MetodoPagoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<MetodoPagoCreateWithoutUsuarioInput, MetodoPagoUncheckedCreateWithoutUsuarioInput>
  }

  export type MetodoPagoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: MetodoPagoWhereUniqueInput
    data: XOR<MetodoPagoUpdateWithoutUsuarioInput, MetodoPagoUncheckedUpdateWithoutUsuarioInput>
  }

  export type MetodoPagoUpdateManyWithWhereWithoutUsuarioInput = {
    where: MetodoPagoScalarWhereInput
    data: XOR<MetodoPagoUpdateManyMutationInput, MetodoPagoUncheckedUpdateManyWithoutMetodoPagoInput>
  }

  export type MetodoPagoScalarWhereInput = {
    AND?: Enumerable<MetodoPagoScalarWhereInput>
    OR?: Enumerable<MetodoPagoScalarWhereInput>
    NOT?: Enumerable<MetodoPagoScalarWhereInput>
    id?: IntFilter | number
    UsuarioId?: IntFilter | number
    TipoPagoId?: IntFilter | number
    NumeroCuenta?: StringFilter | string
    Expiracion?: DateTimeFilter | Date | string
    Titulo?: StringFilter | string
    Borrado?: BoolFilter | boolean
  }

  export type DireccionUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: DireccionWhereUniqueInput
    update: XOR<DireccionUpdateWithoutUsuarioInput, DireccionUncheckedUpdateWithoutUsuarioInput>
    create: XOR<DireccionCreateWithoutUsuarioInput, DireccionUncheckedCreateWithoutUsuarioInput>
  }

  export type DireccionUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: DireccionWhereUniqueInput
    data: XOR<DireccionUpdateWithoutUsuarioInput, DireccionUncheckedUpdateWithoutUsuarioInput>
  }

  export type DireccionUpdateManyWithWhereWithoutUsuarioInput = {
    where: DireccionScalarWhereInput
    data: XOR<DireccionUpdateManyMutationInput, DireccionUncheckedUpdateManyWithoutDireccionInput>
  }

  export type DireccionScalarWhereInput = {
    AND?: Enumerable<DireccionScalarWhereInput>
    OR?: Enumerable<DireccionScalarWhereInput>
    NOT?: Enumerable<DireccionScalarWhereInput>
    id?: IntFilter | number
    UsuarioId?: IntFilter | number
    Provincia?: StringFilter | string
    Canton?: StringFilter | string
    Distrito?: StringFilter | string
    Detalle?: StringFilter | string
    CodigoPostal?: StringFilter | string
    Telefono?: StringFilter | string
    Titulo?: StringFilter | string
  }

  export type ProductoUpsertWithWhereUniqueWithoutVendedorInput = {
    where: ProductoWhereUniqueInput
    update: XOR<ProductoUpdateWithoutVendedorInput, ProductoUncheckedUpdateWithoutVendedorInput>
    create: XOR<ProductoCreateWithoutVendedorInput, ProductoUncheckedCreateWithoutVendedorInput>
  }

  export type ProductoUpdateWithWhereUniqueWithoutVendedorInput = {
    where: ProductoWhereUniqueInput
    data: XOR<ProductoUpdateWithoutVendedorInput, ProductoUncheckedUpdateWithoutVendedorInput>
  }

  export type ProductoUpdateManyWithWhereWithoutVendedorInput = {
    where: ProductoScalarWhereInput
    data: XOR<ProductoUpdateManyMutationInput, ProductoUncheckedUpdateManyWithoutProductoInput>
  }

  export type ProductoScalarWhereInput = {
    AND?: Enumerable<ProductoScalarWhereInput>
    OR?: Enumerable<ProductoScalarWhereInput>
    NOT?: Enumerable<ProductoScalarWhereInput>
    id?: IntFilter | number
    Nombre?: StringFilter | string
    Descripcion?: StringFilter | string
    Precio?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFilter | number
    CategoriaId?: IntFilter | number
    EstadoId?: IntFilter | number
    VendedorId?: IntFilter | number
    Borrado?: BoolFilter | boolean
  }

  export type MensajeUpsertWithWhereUniqueWithoutClienteInput = {
    where: MensajeWhereUniqueInput
    update: XOR<MensajeUpdateWithoutClienteInput, MensajeUncheckedUpdateWithoutClienteInput>
    create: XOR<MensajeCreateWithoutClienteInput, MensajeUncheckedCreateWithoutClienteInput>
  }

  export type MensajeUpdateWithWhereUniqueWithoutClienteInput = {
    where: MensajeWhereUniqueInput
    data: XOR<MensajeUpdateWithoutClienteInput, MensajeUncheckedUpdateWithoutClienteInput>
  }

  export type MensajeUpdateManyWithWhereWithoutClienteInput = {
    where: MensajeScalarWhereInput
    data: XOR<MensajeUpdateManyMutationInput, MensajeUncheckedUpdateManyWithoutMensajeInput>
  }

  export type MensajeScalarWhereInput = {
    AND?: Enumerable<MensajeScalarWhereInput>
    OR?: Enumerable<MensajeScalarWhereInput>
    NOT?: Enumerable<MensajeScalarWhereInput>
    id?: IntFilter | number
    ClienteId?: IntFilter | number
    ProductoId?: IntFilter | number
    Pregunta?: StringFilter | string
    Respuesta?: StringNullableFilter | string | null
    Borrado?: BoolFilter | boolean
    Fecha?: DateTimeFilter | Date | string
  }

  export type CompraUpsertWithWhereUniqueWithoutClienteInput = {
    where: CompraWhereUniqueInput
    update: XOR<CompraUpdateWithoutClienteInput, CompraUncheckedUpdateWithoutClienteInput>
    create: XOR<CompraCreateWithoutClienteInput, CompraUncheckedCreateWithoutClienteInput>
  }

  export type CompraUpdateWithWhereUniqueWithoutClienteInput = {
    where: CompraWhereUniqueInput
    data: XOR<CompraUpdateWithoutClienteInput, CompraUncheckedUpdateWithoutClienteInput>
  }

  export type CompraUpdateManyWithWhereWithoutClienteInput = {
    where: CompraScalarWhereInput
    data: XOR<CompraUpdateManyMutationInput, CompraUncheckedUpdateManyWithoutCompraInput>
  }

  export type CompraScalarWhereInput = {
    AND?: Enumerable<CompraScalarWhereInput>
    OR?: Enumerable<CompraScalarWhereInput>
    NOT?: Enumerable<CompraScalarWhereInput>
    id?: IntFilter | number
    ClienteId?: IntFilter | number
    DireccionId?: IntFilter | number
    MetodoPagoId?: IntFilter | number
    Subtotal?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Total?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Fecha?: DateTimeFilter | Date | string
    Borrado?: BoolFilter | boolean
  }

  export type EvaluacionUpsertWithWhereUniqueWithoutEvaluadorInput = {
    where: EvaluacionWhereUniqueInput
    update: XOR<EvaluacionUpdateWithoutEvaluadorInput, EvaluacionUncheckedUpdateWithoutEvaluadorInput>
    create: XOR<EvaluacionCreateWithoutEvaluadorInput, EvaluacionUncheckedCreateWithoutEvaluadorInput>
  }

  export type EvaluacionUpdateWithWhereUniqueWithoutEvaluadorInput = {
    where: EvaluacionWhereUniqueInput
    data: XOR<EvaluacionUpdateWithoutEvaluadorInput, EvaluacionUncheckedUpdateWithoutEvaluadorInput>
  }

  export type EvaluacionUpdateManyWithWhereWithoutEvaluadorInput = {
    where: EvaluacionScalarWhereInput
    data: XOR<EvaluacionUpdateManyMutationInput, EvaluacionUncheckedUpdateManyWithoutEvaluadoresInput>
  }

  export type EvaluacionScalarWhereInput = {
    AND?: Enumerable<EvaluacionScalarWhereInput>
    OR?: Enumerable<EvaluacionScalarWhereInput>
    NOT?: Enumerable<EvaluacionScalarWhereInput>
    id?: IntFilter | number
    CompraId?: IntFilter | number
    EvaluadorId?: IntFilter | number
    EvaluadoId?: IntFilter | number
    Calificacion?: IntFilter | number
    Borrado?: BoolFilter | boolean
  }

  export type EvaluacionUpsertWithWhereUniqueWithoutEvaluadoInput = {
    where: EvaluacionWhereUniqueInput
    update: XOR<EvaluacionUpdateWithoutEvaluadoInput, EvaluacionUncheckedUpdateWithoutEvaluadoInput>
    create: XOR<EvaluacionCreateWithoutEvaluadoInput, EvaluacionUncheckedCreateWithoutEvaluadoInput>
  }

  export type EvaluacionUpdateWithWhereUniqueWithoutEvaluadoInput = {
    where: EvaluacionWhereUniqueInput
    data: XOR<EvaluacionUpdateWithoutEvaluadoInput, EvaluacionUncheckedUpdateWithoutEvaluadoInput>
  }

  export type EvaluacionUpdateManyWithWhereWithoutEvaluadoInput = {
    where: EvaluacionScalarWhereInput
    data: XOR<EvaluacionUpdateManyMutationInput, EvaluacionUncheckedUpdateManyWithoutEvaluadosInput>
  }

  export type RolOnUsuarioCreateWithoutRolInput = {
    usuario: UsuarioCreateNestedOneWithoutRolesInput
  }

  export type RolOnUsuarioUncheckedCreateWithoutRolInput = {
    UsuarioId: number
  }

  export type RolOnUsuarioCreateOrConnectWithoutRolInput = {
    where: RolOnUsuarioWhereUniqueInput
    create: XOR<RolOnUsuarioCreateWithoutRolInput, RolOnUsuarioUncheckedCreateWithoutRolInput>
  }

  export type RolOnUsuarioCreateManyRolInputEnvelope = {
    data: Enumerable<RolOnUsuarioCreateManyRolInput>
    skipDuplicates?: boolean
  }

  export type RolOnUsuarioUpsertWithWhereUniqueWithoutRolInput = {
    where: RolOnUsuarioWhereUniqueInput
    update: XOR<RolOnUsuarioUpdateWithoutRolInput, RolOnUsuarioUncheckedUpdateWithoutRolInput>
    create: XOR<RolOnUsuarioCreateWithoutRolInput, RolOnUsuarioUncheckedCreateWithoutRolInput>
  }

  export type RolOnUsuarioUpdateWithWhereUniqueWithoutRolInput = {
    where: RolOnUsuarioWhereUniqueInput
    data: XOR<RolOnUsuarioUpdateWithoutRolInput, RolOnUsuarioUncheckedUpdateWithoutRolInput>
  }

  export type RolOnUsuarioUpdateManyWithWhereWithoutRolInput = {
    where: RolOnUsuarioScalarWhereInput
    data: XOR<RolOnUsuarioUpdateManyMutationInput, RolOnUsuarioUncheckedUpdateManyWithoutUsuariosInput>
  }

  export type RolCreateWithoutUsuariosInput = {
    Descripcion: string
    Borrado?: boolean
  }

  export type RolUncheckedCreateWithoutUsuariosInput = {
    id?: number
    Descripcion: string
    Borrado?: boolean
  }

  export type RolCreateOrConnectWithoutUsuariosInput = {
    where: RolWhereUniqueInput
    create: XOR<RolCreateWithoutUsuariosInput, RolUncheckedCreateWithoutUsuariosInput>
  }

  export type UsuarioCreateWithoutRolesInput = {
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
    MetodoPago?: MetodoPagoCreateNestedManyWithoutUsuarioInput
    Direccion?: DireccionCreateNestedManyWithoutUsuarioInput
    Producto?: ProductoCreateNestedManyWithoutVendedorInput
    Mensaje?: MensajeCreateNestedManyWithoutClienteInput
    Compra?: CompraCreateNestedManyWithoutClienteInput
    Evaluadores?: EvaluacionCreateNestedManyWithoutEvaluadorInput
    Evaluados?: EvaluacionCreateNestedManyWithoutEvaluadoInput
  }

  export type UsuarioUncheckedCreateWithoutRolesInput = {
    id?: number
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
    MetodoPago?: MetodoPagoUncheckedCreateNestedManyWithoutUsuarioInput
    Direccion?: DireccionUncheckedCreateNestedManyWithoutUsuarioInput
    Producto?: ProductoUncheckedCreateNestedManyWithoutVendedorInput
    Mensaje?: MensajeUncheckedCreateNestedManyWithoutClienteInput
    Compra?: CompraUncheckedCreateNestedManyWithoutClienteInput
    Evaluadores?: EvaluacionUncheckedCreateNestedManyWithoutEvaluadorInput
    Evaluados?: EvaluacionUncheckedCreateNestedManyWithoutEvaluadoInput
  }

  export type UsuarioCreateOrConnectWithoutRolesInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutRolesInput, UsuarioUncheckedCreateWithoutRolesInput>
  }

  export type RolUpsertWithoutUsuariosInput = {
    update: XOR<RolUpdateWithoutUsuariosInput, RolUncheckedUpdateWithoutUsuariosInput>
    create: XOR<RolCreateWithoutUsuariosInput, RolUncheckedCreateWithoutUsuariosInput>
  }

  export type RolUpdateWithoutUsuariosInput = {
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RolUncheckedUpdateWithoutUsuariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsuarioUpsertWithoutRolesInput = {
    update: XOR<UsuarioUpdateWithoutRolesInput, UsuarioUncheckedUpdateWithoutRolesInput>
    create: XOR<UsuarioCreateWithoutRolesInput, UsuarioUncheckedCreateWithoutRolesInput>
  }

  export type UsuarioUpdateWithoutRolesInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
    MetodoPago?: MetodoPagoUpdateManyWithoutUsuarioNestedInput
    Direccion?: DireccionUpdateManyWithoutUsuarioNestedInput
    Producto?: ProductoUpdateManyWithoutVendedorNestedInput
    Mensaje?: MensajeUpdateManyWithoutClienteNestedInput
    Compra?: CompraUpdateManyWithoutClienteNestedInput
    Evaluadores?: EvaluacionUpdateManyWithoutEvaluadorNestedInput
    Evaluados?: EvaluacionUpdateManyWithoutEvaluadoNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
    MetodoPago?: MetodoPagoUncheckedUpdateManyWithoutUsuarioNestedInput
    Direccion?: DireccionUncheckedUpdateManyWithoutUsuarioNestedInput
    Producto?: ProductoUncheckedUpdateManyWithoutVendedorNestedInput
    Mensaje?: MensajeUncheckedUpdateManyWithoutClienteNestedInput
    Compra?: CompraUncheckedUpdateManyWithoutClienteNestedInput
    Evaluadores?: EvaluacionUncheckedUpdateManyWithoutEvaluadorNestedInput
    Evaluados?: EvaluacionUncheckedUpdateManyWithoutEvaluadoNestedInput
  }

  export type MetodoPagoCreateWithoutTipoPagoInput = {
    NumeroCuenta: string
    Expiracion: Date | string
    Titulo: string
    Borrado?: boolean
    usuario: UsuarioCreateNestedOneWithoutMetodoPagoInput
    Compra?: CompraCreateNestedManyWithoutMetodoPagoInput
  }

  export type MetodoPagoUncheckedCreateWithoutTipoPagoInput = {
    id?: number
    UsuarioId: number
    NumeroCuenta: string
    Expiracion: Date | string
    Titulo: string
    Borrado?: boolean
    Compra?: CompraUncheckedCreateNestedManyWithoutMetodoPagoInput
  }

  export type MetodoPagoCreateOrConnectWithoutTipoPagoInput = {
    where: MetodoPagoWhereUniqueInput
    create: XOR<MetodoPagoCreateWithoutTipoPagoInput, MetodoPagoUncheckedCreateWithoutTipoPagoInput>
  }

  export type MetodoPagoCreateManyTipoPagoInputEnvelope = {
    data: Enumerable<MetodoPagoCreateManyTipoPagoInput>
    skipDuplicates?: boolean
  }

  export type MetodoPagoUpsertWithWhereUniqueWithoutTipoPagoInput = {
    where: MetodoPagoWhereUniqueInput
    update: XOR<MetodoPagoUpdateWithoutTipoPagoInput, MetodoPagoUncheckedUpdateWithoutTipoPagoInput>
    create: XOR<MetodoPagoCreateWithoutTipoPagoInput, MetodoPagoUncheckedCreateWithoutTipoPagoInput>
  }

  export type MetodoPagoUpdateWithWhereUniqueWithoutTipoPagoInput = {
    where: MetodoPagoWhereUniqueInput
    data: XOR<MetodoPagoUpdateWithoutTipoPagoInput, MetodoPagoUncheckedUpdateWithoutTipoPagoInput>
  }

  export type MetodoPagoUpdateManyWithWhereWithoutTipoPagoInput = {
    where: MetodoPagoScalarWhereInput
    data: XOR<MetodoPagoUpdateManyMutationInput, MetodoPagoUncheckedUpdateManyWithoutMetodoPagoInput>
  }

  export type UsuarioCreateWithoutMetodoPagoInput = {
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
    Roles?: RolOnUsuarioCreateNestedManyWithoutUsuarioInput
    Direccion?: DireccionCreateNestedManyWithoutUsuarioInput
    Producto?: ProductoCreateNestedManyWithoutVendedorInput
    Mensaje?: MensajeCreateNestedManyWithoutClienteInput
    Compra?: CompraCreateNestedManyWithoutClienteInput
    Evaluadores?: EvaluacionCreateNestedManyWithoutEvaluadorInput
    Evaluados?: EvaluacionCreateNestedManyWithoutEvaluadoInput
  }

  export type UsuarioUncheckedCreateWithoutMetodoPagoInput = {
    id?: number
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
    Roles?: RolOnUsuarioUncheckedCreateNestedManyWithoutUsuarioInput
    Direccion?: DireccionUncheckedCreateNestedManyWithoutUsuarioInput
    Producto?: ProductoUncheckedCreateNestedManyWithoutVendedorInput
    Mensaje?: MensajeUncheckedCreateNestedManyWithoutClienteInput
    Compra?: CompraUncheckedCreateNestedManyWithoutClienteInput
    Evaluadores?: EvaluacionUncheckedCreateNestedManyWithoutEvaluadorInput
    Evaluados?: EvaluacionUncheckedCreateNestedManyWithoutEvaluadoInput
  }

  export type UsuarioCreateOrConnectWithoutMetodoPagoInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutMetodoPagoInput, UsuarioUncheckedCreateWithoutMetodoPagoInput>
  }

  export type TipoPagoCreateWithoutMetodoPagoInput = {
    Descripcion: string
    Borrado?: boolean
  }

  export type TipoPagoUncheckedCreateWithoutMetodoPagoInput = {
    id?: number
    Descripcion: string
    Borrado?: boolean
  }

  export type TipoPagoCreateOrConnectWithoutMetodoPagoInput = {
    where: TipoPagoWhereUniqueInput
    create: XOR<TipoPagoCreateWithoutMetodoPagoInput, TipoPagoUncheckedCreateWithoutMetodoPagoInput>
  }

  export type CompraCreateWithoutMetodoPagoInput = {
    Subtotal: Decimal | DecimalJsLike | number | string
    Total: Decimal | DecimalJsLike | number | string
    Fecha?: Date | string
    Borrado?: boolean
    cliente: UsuarioCreateNestedOneWithoutCompraInput
    direccion: DireccionCreateNestedOneWithoutCompraInput
    CompraDetalle?: CompraDetalleCreateNestedManyWithoutCompraInput
    Evaluacion?: EvaluacionCreateNestedManyWithoutCompraInput
  }

  export type CompraUncheckedCreateWithoutMetodoPagoInput = {
    id?: number
    ClienteId: number
    DireccionId: number
    Subtotal: Decimal | DecimalJsLike | number | string
    Total: Decimal | DecimalJsLike | number | string
    Fecha?: Date | string
    Borrado?: boolean
    CompraDetalle?: CompraDetalleUncheckedCreateNestedManyWithoutCompraInput
    Evaluacion?: EvaluacionUncheckedCreateNestedManyWithoutCompraInput
  }

  export type CompraCreateOrConnectWithoutMetodoPagoInput = {
    where: CompraWhereUniqueInput
    create: XOR<CompraCreateWithoutMetodoPagoInput, CompraUncheckedCreateWithoutMetodoPagoInput>
  }

  export type CompraCreateManyMetodoPagoInputEnvelope = {
    data: Enumerable<CompraCreateManyMetodoPagoInput>
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutMetodoPagoInput = {
    update: XOR<UsuarioUpdateWithoutMetodoPagoInput, UsuarioUncheckedUpdateWithoutMetodoPagoInput>
    create: XOR<UsuarioCreateWithoutMetodoPagoInput, UsuarioUncheckedCreateWithoutMetodoPagoInput>
  }

  export type UsuarioUpdateWithoutMetodoPagoInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
    Roles?: RolOnUsuarioUpdateManyWithoutUsuarioNestedInput
    Direccion?: DireccionUpdateManyWithoutUsuarioNestedInput
    Producto?: ProductoUpdateManyWithoutVendedorNestedInput
    Mensaje?: MensajeUpdateManyWithoutClienteNestedInput
    Compra?: CompraUpdateManyWithoutClienteNestedInput
    Evaluadores?: EvaluacionUpdateManyWithoutEvaluadorNestedInput
    Evaluados?: EvaluacionUpdateManyWithoutEvaluadoNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutMetodoPagoInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
    Roles?: RolOnUsuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    Direccion?: DireccionUncheckedUpdateManyWithoutUsuarioNestedInput
    Producto?: ProductoUncheckedUpdateManyWithoutVendedorNestedInput
    Mensaje?: MensajeUncheckedUpdateManyWithoutClienteNestedInput
    Compra?: CompraUncheckedUpdateManyWithoutClienteNestedInput
    Evaluadores?: EvaluacionUncheckedUpdateManyWithoutEvaluadorNestedInput
    Evaluados?: EvaluacionUncheckedUpdateManyWithoutEvaluadoNestedInput
  }

  export type TipoPagoUpsertWithoutMetodoPagoInput = {
    update: XOR<TipoPagoUpdateWithoutMetodoPagoInput, TipoPagoUncheckedUpdateWithoutMetodoPagoInput>
    create: XOR<TipoPagoCreateWithoutMetodoPagoInput, TipoPagoUncheckedCreateWithoutMetodoPagoInput>
  }

  export type TipoPagoUpdateWithoutMetodoPagoInput = {
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TipoPagoUncheckedUpdateWithoutMetodoPagoInput = {
    id?: IntFieldUpdateOperationsInput | number
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompraUpsertWithWhereUniqueWithoutMetodoPagoInput = {
    where: CompraWhereUniqueInput
    update: XOR<CompraUpdateWithoutMetodoPagoInput, CompraUncheckedUpdateWithoutMetodoPagoInput>
    create: XOR<CompraCreateWithoutMetodoPagoInput, CompraUncheckedCreateWithoutMetodoPagoInput>
  }

  export type CompraUpdateWithWhereUniqueWithoutMetodoPagoInput = {
    where: CompraWhereUniqueInput
    data: XOR<CompraUpdateWithoutMetodoPagoInput, CompraUncheckedUpdateWithoutMetodoPagoInput>
  }

  export type CompraUpdateManyWithWhereWithoutMetodoPagoInput = {
    where: CompraScalarWhereInput
    data: XOR<CompraUpdateManyMutationInput, CompraUncheckedUpdateManyWithoutCompraInput>
  }

  export type UsuarioCreateWithoutDireccionInput = {
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
    Roles?: RolOnUsuarioCreateNestedManyWithoutUsuarioInput
    MetodoPago?: MetodoPagoCreateNestedManyWithoutUsuarioInput
    Producto?: ProductoCreateNestedManyWithoutVendedorInput
    Mensaje?: MensajeCreateNestedManyWithoutClienteInput
    Compra?: CompraCreateNestedManyWithoutClienteInput
    Evaluadores?: EvaluacionCreateNestedManyWithoutEvaluadorInput
    Evaluados?: EvaluacionCreateNestedManyWithoutEvaluadoInput
  }

  export type UsuarioUncheckedCreateWithoutDireccionInput = {
    id?: number
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
    Roles?: RolOnUsuarioUncheckedCreateNestedManyWithoutUsuarioInput
    MetodoPago?: MetodoPagoUncheckedCreateNestedManyWithoutUsuarioInput
    Producto?: ProductoUncheckedCreateNestedManyWithoutVendedorInput
    Mensaje?: MensajeUncheckedCreateNestedManyWithoutClienteInput
    Compra?: CompraUncheckedCreateNestedManyWithoutClienteInput
    Evaluadores?: EvaluacionUncheckedCreateNestedManyWithoutEvaluadorInput
    Evaluados?: EvaluacionUncheckedCreateNestedManyWithoutEvaluadoInput
  }

  export type UsuarioCreateOrConnectWithoutDireccionInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutDireccionInput, UsuarioUncheckedCreateWithoutDireccionInput>
  }

  export type CompraCreateWithoutDireccionInput = {
    Subtotal: Decimal | DecimalJsLike | number | string
    Total: Decimal | DecimalJsLike | number | string
    Fecha?: Date | string
    Borrado?: boolean
    cliente: UsuarioCreateNestedOneWithoutCompraInput
    metodoPago: MetodoPagoCreateNestedOneWithoutCompraInput
    CompraDetalle?: CompraDetalleCreateNestedManyWithoutCompraInput
    Evaluacion?: EvaluacionCreateNestedManyWithoutCompraInput
  }

  export type CompraUncheckedCreateWithoutDireccionInput = {
    id?: number
    ClienteId: number
    MetodoPagoId: number
    Subtotal: Decimal | DecimalJsLike | number | string
    Total: Decimal | DecimalJsLike | number | string
    Fecha?: Date | string
    Borrado?: boolean
    CompraDetalle?: CompraDetalleUncheckedCreateNestedManyWithoutCompraInput
    Evaluacion?: EvaluacionUncheckedCreateNestedManyWithoutCompraInput
  }

  export type CompraCreateOrConnectWithoutDireccionInput = {
    where: CompraWhereUniqueInput
    create: XOR<CompraCreateWithoutDireccionInput, CompraUncheckedCreateWithoutDireccionInput>
  }

  export type CompraCreateManyDireccionInputEnvelope = {
    data: Enumerable<CompraCreateManyDireccionInput>
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutDireccionInput = {
    update: XOR<UsuarioUpdateWithoutDireccionInput, UsuarioUncheckedUpdateWithoutDireccionInput>
    create: XOR<UsuarioCreateWithoutDireccionInput, UsuarioUncheckedCreateWithoutDireccionInput>
  }

  export type UsuarioUpdateWithoutDireccionInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
    Roles?: RolOnUsuarioUpdateManyWithoutUsuarioNestedInput
    MetodoPago?: MetodoPagoUpdateManyWithoutUsuarioNestedInput
    Producto?: ProductoUpdateManyWithoutVendedorNestedInput
    Mensaje?: MensajeUpdateManyWithoutClienteNestedInput
    Compra?: CompraUpdateManyWithoutClienteNestedInput
    Evaluadores?: EvaluacionUpdateManyWithoutEvaluadorNestedInput
    Evaluados?: EvaluacionUpdateManyWithoutEvaluadoNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutDireccionInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
    Roles?: RolOnUsuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    MetodoPago?: MetodoPagoUncheckedUpdateManyWithoutUsuarioNestedInput
    Producto?: ProductoUncheckedUpdateManyWithoutVendedorNestedInput
    Mensaje?: MensajeUncheckedUpdateManyWithoutClienteNestedInput
    Compra?: CompraUncheckedUpdateManyWithoutClienteNestedInput
    Evaluadores?: EvaluacionUncheckedUpdateManyWithoutEvaluadorNestedInput
    Evaluados?: EvaluacionUncheckedUpdateManyWithoutEvaluadoNestedInput
  }

  export type CompraUpsertWithWhereUniqueWithoutDireccionInput = {
    where: CompraWhereUniqueInput
    update: XOR<CompraUpdateWithoutDireccionInput, CompraUncheckedUpdateWithoutDireccionInput>
    create: XOR<CompraCreateWithoutDireccionInput, CompraUncheckedCreateWithoutDireccionInput>
  }

  export type CompraUpdateWithWhereUniqueWithoutDireccionInput = {
    where: CompraWhereUniqueInput
    data: XOR<CompraUpdateWithoutDireccionInput, CompraUncheckedUpdateWithoutDireccionInput>
  }

  export type CompraUpdateManyWithWhereWithoutDireccionInput = {
    where: CompraScalarWhereInput
    data: XOR<CompraUpdateManyMutationInput, CompraUncheckedUpdateManyWithoutCompraInput>
  }

  export type CategoriaCreateWithoutProductoInput = {
    Descripcion: string
    Borrado?: boolean
  }

  export type CategoriaUncheckedCreateWithoutProductoInput = {
    id?: number
    Descripcion: string
    Borrado?: boolean
  }

  export type CategoriaCreateOrConnectWithoutProductoInput = {
    where: CategoriaWhereUniqueInput
    create: XOR<CategoriaCreateWithoutProductoInput, CategoriaUncheckedCreateWithoutProductoInput>
  }

  export type EstadoProductoCreateWithoutProductoInput = {
    Descripcion: string
    Borrado?: boolean
  }

  export type EstadoProductoUncheckedCreateWithoutProductoInput = {
    id?: number
    Descripcion: string
    Borrado?: boolean
  }

  export type EstadoProductoCreateOrConnectWithoutProductoInput = {
    where: EstadoProductoWhereUniqueInput
    create: XOR<EstadoProductoCreateWithoutProductoInput, EstadoProductoUncheckedCreateWithoutProductoInput>
  }

  export type UsuarioCreateWithoutProductoInput = {
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
    Roles?: RolOnUsuarioCreateNestedManyWithoutUsuarioInput
    MetodoPago?: MetodoPagoCreateNestedManyWithoutUsuarioInput
    Direccion?: DireccionCreateNestedManyWithoutUsuarioInput
    Mensaje?: MensajeCreateNestedManyWithoutClienteInput
    Compra?: CompraCreateNestedManyWithoutClienteInput
    Evaluadores?: EvaluacionCreateNestedManyWithoutEvaluadorInput
    Evaluados?: EvaluacionCreateNestedManyWithoutEvaluadoInput
  }

  export type UsuarioUncheckedCreateWithoutProductoInput = {
    id?: number
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
    Roles?: RolOnUsuarioUncheckedCreateNestedManyWithoutUsuarioInput
    MetodoPago?: MetodoPagoUncheckedCreateNestedManyWithoutUsuarioInput
    Direccion?: DireccionUncheckedCreateNestedManyWithoutUsuarioInput
    Mensaje?: MensajeUncheckedCreateNestedManyWithoutClienteInput
    Compra?: CompraUncheckedCreateNestedManyWithoutClienteInput
    Evaluadores?: EvaluacionUncheckedCreateNestedManyWithoutEvaluadorInput
    Evaluados?: EvaluacionUncheckedCreateNestedManyWithoutEvaluadoInput
  }

  export type UsuarioCreateOrConnectWithoutProductoInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutProductoInput, UsuarioUncheckedCreateWithoutProductoInput>
  }

  export type FotoProductoCreateWithoutProductoInput = {
    Foto: string
    Borrado?: boolean
  }

  export type FotoProductoUncheckedCreateWithoutProductoInput = {
    id?: number
    Foto: string
    Borrado?: boolean
  }

  export type FotoProductoCreateOrConnectWithoutProductoInput = {
    where: FotoProductoWhereUniqueInput
    create: XOR<FotoProductoCreateWithoutProductoInput, FotoProductoUncheckedCreateWithoutProductoInput>
  }

  export type FotoProductoCreateManyProductoInputEnvelope = {
    data: Enumerable<FotoProductoCreateManyProductoInput>
    skipDuplicates?: boolean
  }

  export type MensajeCreateWithoutProductoInput = {
    Pregunta: string
    Respuesta?: string | null
    Borrado?: boolean
    Fecha?: Date | string
    cliente: UsuarioCreateNestedOneWithoutMensajeInput
  }

  export type MensajeUncheckedCreateWithoutProductoInput = {
    id?: number
    ClienteId: number
    Pregunta: string
    Respuesta?: string | null
    Borrado?: boolean
    Fecha?: Date | string
  }

  export type MensajeCreateOrConnectWithoutProductoInput = {
    where: MensajeWhereUniqueInput
    create: XOR<MensajeCreateWithoutProductoInput, MensajeUncheckedCreateWithoutProductoInput>
  }

  export type MensajeCreateManyProductoInputEnvelope = {
    data: Enumerable<MensajeCreateManyProductoInput>
    skipDuplicates?: boolean
  }

  export type CompraDetalleCreateWithoutProductoInput = {
    Cantidad: number
    Subtotal: Decimal | DecimalJsLike | number | string
    Borrado?: boolean
    compra: CompraCreateNestedOneWithoutCompraDetalleInput
    estadoCompra?: EstadoCompraCreateNestedOneWithoutCompraDetalleInput
  }

  export type CompraDetalleUncheckedCreateWithoutProductoInput = {
    id?: number
    CompraId: number
    Cantidad: number
    Subtotal: Decimal | DecimalJsLike | number | string
    EstadoCompraId?: number
    Borrado?: boolean
  }

  export type CompraDetalleCreateOrConnectWithoutProductoInput = {
    where: CompraDetalleWhereUniqueInput
    create: XOR<CompraDetalleCreateWithoutProductoInput, CompraDetalleUncheckedCreateWithoutProductoInput>
  }

  export type CompraDetalleCreateManyProductoInputEnvelope = {
    data: Enumerable<CompraDetalleCreateManyProductoInput>
    skipDuplicates?: boolean
  }

  export type CategoriaUpsertWithoutProductoInput = {
    update: XOR<CategoriaUpdateWithoutProductoInput, CategoriaUncheckedUpdateWithoutProductoInput>
    create: XOR<CategoriaCreateWithoutProductoInput, CategoriaUncheckedCreateWithoutProductoInput>
  }

  export type CategoriaUpdateWithoutProductoInput = {
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CategoriaUncheckedUpdateWithoutProductoInput = {
    id?: IntFieldUpdateOperationsInput | number
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EstadoProductoUpsertWithoutProductoInput = {
    update: XOR<EstadoProductoUpdateWithoutProductoInput, EstadoProductoUncheckedUpdateWithoutProductoInput>
    create: XOR<EstadoProductoCreateWithoutProductoInput, EstadoProductoUncheckedCreateWithoutProductoInput>
  }

  export type EstadoProductoUpdateWithoutProductoInput = {
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EstadoProductoUncheckedUpdateWithoutProductoInput = {
    id?: IntFieldUpdateOperationsInput | number
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsuarioUpsertWithoutProductoInput = {
    update: XOR<UsuarioUpdateWithoutProductoInput, UsuarioUncheckedUpdateWithoutProductoInput>
    create: XOR<UsuarioCreateWithoutProductoInput, UsuarioUncheckedCreateWithoutProductoInput>
  }

  export type UsuarioUpdateWithoutProductoInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
    Roles?: RolOnUsuarioUpdateManyWithoutUsuarioNestedInput
    MetodoPago?: MetodoPagoUpdateManyWithoutUsuarioNestedInput
    Direccion?: DireccionUpdateManyWithoutUsuarioNestedInput
    Mensaje?: MensajeUpdateManyWithoutClienteNestedInput
    Compra?: CompraUpdateManyWithoutClienteNestedInput
    Evaluadores?: EvaluacionUpdateManyWithoutEvaluadorNestedInput
    Evaluados?: EvaluacionUpdateManyWithoutEvaluadoNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutProductoInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
    Roles?: RolOnUsuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    MetodoPago?: MetodoPagoUncheckedUpdateManyWithoutUsuarioNestedInput
    Direccion?: DireccionUncheckedUpdateManyWithoutUsuarioNestedInput
    Mensaje?: MensajeUncheckedUpdateManyWithoutClienteNestedInput
    Compra?: CompraUncheckedUpdateManyWithoutClienteNestedInput
    Evaluadores?: EvaluacionUncheckedUpdateManyWithoutEvaluadorNestedInput
    Evaluados?: EvaluacionUncheckedUpdateManyWithoutEvaluadoNestedInput
  }

  export type FotoProductoUpsertWithWhereUniqueWithoutProductoInput = {
    where: FotoProductoWhereUniqueInput
    update: XOR<FotoProductoUpdateWithoutProductoInput, FotoProductoUncheckedUpdateWithoutProductoInput>
    create: XOR<FotoProductoCreateWithoutProductoInput, FotoProductoUncheckedCreateWithoutProductoInput>
  }

  export type FotoProductoUpdateWithWhereUniqueWithoutProductoInput = {
    where: FotoProductoWhereUniqueInput
    data: XOR<FotoProductoUpdateWithoutProductoInput, FotoProductoUncheckedUpdateWithoutProductoInput>
  }

  export type FotoProductoUpdateManyWithWhereWithoutProductoInput = {
    where: FotoProductoScalarWhereInput
    data: XOR<FotoProductoUpdateManyMutationInput, FotoProductoUncheckedUpdateManyWithoutFotoProductoInput>
  }

  export type FotoProductoScalarWhereInput = {
    AND?: Enumerable<FotoProductoScalarWhereInput>
    OR?: Enumerable<FotoProductoScalarWhereInput>
    NOT?: Enumerable<FotoProductoScalarWhereInput>
    id?: IntFilter | number
    ProductoId?: IntFilter | number
    Foto?: StringFilter | string
    Borrado?: BoolFilter | boolean
  }

  export type MensajeUpsertWithWhereUniqueWithoutProductoInput = {
    where: MensajeWhereUniqueInput
    update: XOR<MensajeUpdateWithoutProductoInput, MensajeUncheckedUpdateWithoutProductoInput>
    create: XOR<MensajeCreateWithoutProductoInput, MensajeUncheckedCreateWithoutProductoInput>
  }

  export type MensajeUpdateWithWhereUniqueWithoutProductoInput = {
    where: MensajeWhereUniqueInput
    data: XOR<MensajeUpdateWithoutProductoInput, MensajeUncheckedUpdateWithoutProductoInput>
  }

  export type MensajeUpdateManyWithWhereWithoutProductoInput = {
    where: MensajeScalarWhereInput
    data: XOR<MensajeUpdateManyMutationInput, MensajeUncheckedUpdateManyWithoutMensajeInput>
  }

  export type CompraDetalleUpsertWithWhereUniqueWithoutProductoInput = {
    where: CompraDetalleWhereUniqueInput
    update: XOR<CompraDetalleUpdateWithoutProductoInput, CompraDetalleUncheckedUpdateWithoutProductoInput>
    create: XOR<CompraDetalleCreateWithoutProductoInput, CompraDetalleUncheckedCreateWithoutProductoInput>
  }

  export type CompraDetalleUpdateWithWhereUniqueWithoutProductoInput = {
    where: CompraDetalleWhereUniqueInput
    data: XOR<CompraDetalleUpdateWithoutProductoInput, CompraDetalleUncheckedUpdateWithoutProductoInput>
  }

  export type CompraDetalleUpdateManyWithWhereWithoutProductoInput = {
    where: CompraDetalleScalarWhereInput
    data: XOR<CompraDetalleUpdateManyMutationInput, CompraDetalleUncheckedUpdateManyWithoutCompraDetalleInput>
  }

  export type CompraDetalleScalarWhereInput = {
    AND?: Enumerable<CompraDetalleScalarWhereInput>
    OR?: Enumerable<CompraDetalleScalarWhereInput>
    NOT?: Enumerable<CompraDetalleScalarWhereInput>
    id?: IntFilter | number
    CompraId?: IntFilter | number
    ProductoId?: IntFilter | number
    Cantidad?: IntFilter | number
    Subtotal?: DecimalFilter | Decimal | DecimalJsLike | number | string
    EstadoCompraId?: IntFilter | number
    Borrado?: BoolFilter | boolean
  }

  export type ProductoCreateWithoutCategoriaInput = {
    Nombre: string
    Descripcion: string
    Precio: Decimal | DecimalJsLike | number | string
    Cantidad: number
    Borrado?: boolean
    estado: EstadoProductoCreateNestedOneWithoutProductoInput
    vendedor: UsuarioCreateNestedOneWithoutProductoInput
    FotoProducto?: FotoProductoCreateNestedManyWithoutProductoInput
    Mensaje?: MensajeCreateNestedManyWithoutProductoInput
    CompraDetalle?: CompraDetalleCreateNestedManyWithoutProductoInput
  }

  export type ProductoUncheckedCreateWithoutCategoriaInput = {
    id?: number
    Nombre: string
    Descripcion: string
    Precio: Decimal | DecimalJsLike | number | string
    Cantidad: number
    EstadoId: number
    VendedorId: number
    Borrado?: boolean
    FotoProducto?: FotoProductoUncheckedCreateNestedManyWithoutProductoInput
    Mensaje?: MensajeUncheckedCreateNestedManyWithoutProductoInput
    CompraDetalle?: CompraDetalleUncheckedCreateNestedManyWithoutProductoInput
  }

  export type ProductoCreateOrConnectWithoutCategoriaInput = {
    where: ProductoWhereUniqueInput
    create: XOR<ProductoCreateWithoutCategoriaInput, ProductoUncheckedCreateWithoutCategoriaInput>
  }

  export type ProductoCreateManyCategoriaInputEnvelope = {
    data: Enumerable<ProductoCreateManyCategoriaInput>
    skipDuplicates?: boolean
  }

  export type ProductoUpsertWithWhereUniqueWithoutCategoriaInput = {
    where: ProductoWhereUniqueInput
    update: XOR<ProductoUpdateWithoutCategoriaInput, ProductoUncheckedUpdateWithoutCategoriaInput>
    create: XOR<ProductoCreateWithoutCategoriaInput, ProductoUncheckedCreateWithoutCategoriaInput>
  }

  export type ProductoUpdateWithWhereUniqueWithoutCategoriaInput = {
    where: ProductoWhereUniqueInput
    data: XOR<ProductoUpdateWithoutCategoriaInput, ProductoUncheckedUpdateWithoutCategoriaInput>
  }

  export type ProductoUpdateManyWithWhereWithoutCategoriaInput = {
    where: ProductoScalarWhereInput
    data: XOR<ProductoUpdateManyMutationInput, ProductoUncheckedUpdateManyWithoutProductoInput>
  }

  export type ProductoCreateWithoutEstadoInput = {
    Nombre: string
    Descripcion: string
    Precio: Decimal | DecimalJsLike | number | string
    Cantidad: number
    Borrado?: boolean
    categoria: CategoriaCreateNestedOneWithoutProductoInput
    vendedor: UsuarioCreateNestedOneWithoutProductoInput
    FotoProducto?: FotoProductoCreateNestedManyWithoutProductoInput
    Mensaje?: MensajeCreateNestedManyWithoutProductoInput
    CompraDetalle?: CompraDetalleCreateNestedManyWithoutProductoInput
  }

  export type ProductoUncheckedCreateWithoutEstadoInput = {
    id?: number
    Nombre: string
    Descripcion: string
    Precio: Decimal | DecimalJsLike | number | string
    Cantidad: number
    CategoriaId: number
    VendedorId: number
    Borrado?: boolean
    FotoProducto?: FotoProductoUncheckedCreateNestedManyWithoutProductoInput
    Mensaje?: MensajeUncheckedCreateNestedManyWithoutProductoInput
    CompraDetalle?: CompraDetalleUncheckedCreateNestedManyWithoutProductoInput
  }

  export type ProductoCreateOrConnectWithoutEstadoInput = {
    where: ProductoWhereUniqueInput
    create: XOR<ProductoCreateWithoutEstadoInput, ProductoUncheckedCreateWithoutEstadoInput>
  }

  export type ProductoCreateManyEstadoInputEnvelope = {
    data: Enumerable<ProductoCreateManyEstadoInput>
    skipDuplicates?: boolean
  }

  export type ProductoUpsertWithWhereUniqueWithoutEstadoInput = {
    where: ProductoWhereUniqueInput
    update: XOR<ProductoUpdateWithoutEstadoInput, ProductoUncheckedUpdateWithoutEstadoInput>
    create: XOR<ProductoCreateWithoutEstadoInput, ProductoUncheckedCreateWithoutEstadoInput>
  }

  export type ProductoUpdateWithWhereUniqueWithoutEstadoInput = {
    where: ProductoWhereUniqueInput
    data: XOR<ProductoUpdateWithoutEstadoInput, ProductoUncheckedUpdateWithoutEstadoInput>
  }

  export type ProductoUpdateManyWithWhereWithoutEstadoInput = {
    where: ProductoScalarWhereInput
    data: XOR<ProductoUpdateManyMutationInput, ProductoUncheckedUpdateManyWithoutProductoInput>
  }

  export type ProductoCreateWithoutFotoProductoInput = {
    Nombre: string
    Descripcion: string
    Precio: Decimal | DecimalJsLike | number | string
    Cantidad: number
    Borrado?: boolean
    categoria: CategoriaCreateNestedOneWithoutProductoInput
    estado: EstadoProductoCreateNestedOneWithoutProductoInput
    vendedor: UsuarioCreateNestedOneWithoutProductoInput
    Mensaje?: MensajeCreateNestedManyWithoutProductoInput
    CompraDetalle?: CompraDetalleCreateNestedManyWithoutProductoInput
  }

  export type ProductoUncheckedCreateWithoutFotoProductoInput = {
    id?: number
    Nombre: string
    Descripcion: string
    Precio: Decimal | DecimalJsLike | number | string
    Cantidad: number
    CategoriaId: number
    EstadoId: number
    VendedorId: number
    Borrado?: boolean
    Mensaje?: MensajeUncheckedCreateNestedManyWithoutProductoInput
    CompraDetalle?: CompraDetalleUncheckedCreateNestedManyWithoutProductoInput
  }

  export type ProductoCreateOrConnectWithoutFotoProductoInput = {
    where: ProductoWhereUniqueInput
    create: XOR<ProductoCreateWithoutFotoProductoInput, ProductoUncheckedCreateWithoutFotoProductoInput>
  }

  export type ProductoUpsertWithoutFotoProductoInput = {
    update: XOR<ProductoUpdateWithoutFotoProductoInput, ProductoUncheckedUpdateWithoutFotoProductoInput>
    create: XOR<ProductoCreateWithoutFotoProductoInput, ProductoUncheckedCreateWithoutFotoProductoInput>
  }

  export type ProductoUpdateWithoutFotoProductoInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    categoria?: CategoriaUpdateOneRequiredWithoutProductoNestedInput
    estado?: EstadoProductoUpdateOneRequiredWithoutProductoNestedInput
    vendedor?: UsuarioUpdateOneRequiredWithoutProductoNestedInput
    Mensaje?: MensajeUpdateManyWithoutProductoNestedInput
    CompraDetalle?: CompraDetalleUpdateManyWithoutProductoNestedInput
  }

  export type ProductoUncheckedUpdateWithoutFotoProductoInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFieldUpdateOperationsInput | number
    CategoriaId?: IntFieldUpdateOperationsInput | number
    EstadoId?: IntFieldUpdateOperationsInput | number
    VendedorId?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Mensaje?: MensajeUncheckedUpdateManyWithoutProductoNestedInput
    CompraDetalle?: CompraDetalleUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type UsuarioCreateWithoutMensajeInput = {
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
    Roles?: RolOnUsuarioCreateNestedManyWithoutUsuarioInput
    MetodoPago?: MetodoPagoCreateNestedManyWithoutUsuarioInput
    Direccion?: DireccionCreateNestedManyWithoutUsuarioInput
    Producto?: ProductoCreateNestedManyWithoutVendedorInput
    Compra?: CompraCreateNestedManyWithoutClienteInput
    Evaluadores?: EvaluacionCreateNestedManyWithoutEvaluadorInput
    Evaluados?: EvaluacionCreateNestedManyWithoutEvaluadoInput
  }

  export type UsuarioUncheckedCreateWithoutMensajeInput = {
    id?: number
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
    Roles?: RolOnUsuarioUncheckedCreateNestedManyWithoutUsuarioInput
    MetodoPago?: MetodoPagoUncheckedCreateNestedManyWithoutUsuarioInput
    Direccion?: DireccionUncheckedCreateNestedManyWithoutUsuarioInput
    Producto?: ProductoUncheckedCreateNestedManyWithoutVendedorInput
    Compra?: CompraUncheckedCreateNestedManyWithoutClienteInput
    Evaluadores?: EvaluacionUncheckedCreateNestedManyWithoutEvaluadorInput
    Evaluados?: EvaluacionUncheckedCreateNestedManyWithoutEvaluadoInput
  }

  export type UsuarioCreateOrConnectWithoutMensajeInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutMensajeInput, UsuarioUncheckedCreateWithoutMensajeInput>
  }

  export type ProductoCreateWithoutMensajeInput = {
    Nombre: string
    Descripcion: string
    Precio: Decimal | DecimalJsLike | number | string
    Cantidad: number
    Borrado?: boolean
    categoria: CategoriaCreateNestedOneWithoutProductoInput
    estado: EstadoProductoCreateNestedOneWithoutProductoInput
    vendedor: UsuarioCreateNestedOneWithoutProductoInput
    FotoProducto?: FotoProductoCreateNestedManyWithoutProductoInput
    CompraDetalle?: CompraDetalleCreateNestedManyWithoutProductoInput
  }

  export type ProductoUncheckedCreateWithoutMensajeInput = {
    id?: number
    Nombre: string
    Descripcion: string
    Precio: Decimal | DecimalJsLike | number | string
    Cantidad: number
    CategoriaId: number
    EstadoId: number
    VendedorId: number
    Borrado?: boolean
    FotoProducto?: FotoProductoUncheckedCreateNestedManyWithoutProductoInput
    CompraDetalle?: CompraDetalleUncheckedCreateNestedManyWithoutProductoInput
  }

  export type ProductoCreateOrConnectWithoutMensajeInput = {
    where: ProductoWhereUniqueInput
    create: XOR<ProductoCreateWithoutMensajeInput, ProductoUncheckedCreateWithoutMensajeInput>
  }

  export type UsuarioUpsertWithoutMensajeInput = {
    update: XOR<UsuarioUpdateWithoutMensajeInput, UsuarioUncheckedUpdateWithoutMensajeInput>
    create: XOR<UsuarioCreateWithoutMensajeInput, UsuarioUncheckedCreateWithoutMensajeInput>
  }

  export type UsuarioUpdateWithoutMensajeInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
    Roles?: RolOnUsuarioUpdateManyWithoutUsuarioNestedInput
    MetodoPago?: MetodoPagoUpdateManyWithoutUsuarioNestedInput
    Direccion?: DireccionUpdateManyWithoutUsuarioNestedInput
    Producto?: ProductoUpdateManyWithoutVendedorNestedInput
    Compra?: CompraUpdateManyWithoutClienteNestedInput
    Evaluadores?: EvaluacionUpdateManyWithoutEvaluadorNestedInput
    Evaluados?: EvaluacionUpdateManyWithoutEvaluadoNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutMensajeInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
    Roles?: RolOnUsuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    MetodoPago?: MetodoPagoUncheckedUpdateManyWithoutUsuarioNestedInput
    Direccion?: DireccionUncheckedUpdateManyWithoutUsuarioNestedInput
    Producto?: ProductoUncheckedUpdateManyWithoutVendedorNestedInput
    Compra?: CompraUncheckedUpdateManyWithoutClienteNestedInput
    Evaluadores?: EvaluacionUncheckedUpdateManyWithoutEvaluadorNestedInput
    Evaluados?: EvaluacionUncheckedUpdateManyWithoutEvaluadoNestedInput
  }

  export type ProductoUpsertWithoutMensajeInput = {
    update: XOR<ProductoUpdateWithoutMensajeInput, ProductoUncheckedUpdateWithoutMensajeInput>
    create: XOR<ProductoCreateWithoutMensajeInput, ProductoUncheckedCreateWithoutMensajeInput>
  }

  export type ProductoUpdateWithoutMensajeInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    categoria?: CategoriaUpdateOneRequiredWithoutProductoNestedInput
    estado?: EstadoProductoUpdateOneRequiredWithoutProductoNestedInput
    vendedor?: UsuarioUpdateOneRequiredWithoutProductoNestedInput
    FotoProducto?: FotoProductoUpdateManyWithoutProductoNestedInput
    CompraDetalle?: CompraDetalleUpdateManyWithoutProductoNestedInput
  }

  export type ProductoUncheckedUpdateWithoutMensajeInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFieldUpdateOperationsInput | number
    CategoriaId?: IntFieldUpdateOperationsInput | number
    EstadoId?: IntFieldUpdateOperationsInput | number
    VendedorId?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    FotoProducto?: FotoProductoUncheckedUpdateManyWithoutProductoNestedInput
    CompraDetalle?: CompraDetalleUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type CompraDetalleCreateWithoutEstadoCompraInput = {
    Cantidad: number
    Subtotal: Decimal | DecimalJsLike | number | string
    Borrado?: boolean
    compra: CompraCreateNestedOneWithoutCompraDetalleInput
    producto: ProductoCreateNestedOneWithoutCompraDetalleInput
  }

  export type CompraDetalleUncheckedCreateWithoutEstadoCompraInput = {
    id?: number
    CompraId: number
    ProductoId: number
    Cantidad: number
    Subtotal: Decimal | DecimalJsLike | number | string
    Borrado?: boolean
  }

  export type CompraDetalleCreateOrConnectWithoutEstadoCompraInput = {
    where: CompraDetalleWhereUniqueInput
    create: XOR<CompraDetalleCreateWithoutEstadoCompraInput, CompraDetalleUncheckedCreateWithoutEstadoCompraInput>
  }

  export type CompraDetalleCreateManyEstadoCompraInputEnvelope = {
    data: Enumerable<CompraDetalleCreateManyEstadoCompraInput>
    skipDuplicates?: boolean
  }

  export type CompraDetalleUpsertWithWhereUniqueWithoutEstadoCompraInput = {
    where: CompraDetalleWhereUniqueInput
    update: XOR<CompraDetalleUpdateWithoutEstadoCompraInput, CompraDetalleUncheckedUpdateWithoutEstadoCompraInput>
    create: XOR<CompraDetalleCreateWithoutEstadoCompraInput, CompraDetalleUncheckedCreateWithoutEstadoCompraInput>
  }

  export type CompraDetalleUpdateWithWhereUniqueWithoutEstadoCompraInput = {
    where: CompraDetalleWhereUniqueInput
    data: XOR<CompraDetalleUpdateWithoutEstadoCompraInput, CompraDetalleUncheckedUpdateWithoutEstadoCompraInput>
  }

  export type CompraDetalleUpdateManyWithWhereWithoutEstadoCompraInput = {
    where: CompraDetalleScalarWhereInput
    data: XOR<CompraDetalleUpdateManyMutationInput, CompraDetalleUncheckedUpdateManyWithoutCompraDetalleInput>
  }

  export type UsuarioCreateWithoutCompraInput = {
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
    Roles?: RolOnUsuarioCreateNestedManyWithoutUsuarioInput
    MetodoPago?: MetodoPagoCreateNestedManyWithoutUsuarioInput
    Direccion?: DireccionCreateNestedManyWithoutUsuarioInput
    Producto?: ProductoCreateNestedManyWithoutVendedorInput
    Mensaje?: MensajeCreateNestedManyWithoutClienteInput
    Evaluadores?: EvaluacionCreateNestedManyWithoutEvaluadorInput
    Evaluados?: EvaluacionCreateNestedManyWithoutEvaluadoInput
  }

  export type UsuarioUncheckedCreateWithoutCompraInput = {
    id?: number
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
    Roles?: RolOnUsuarioUncheckedCreateNestedManyWithoutUsuarioInput
    MetodoPago?: MetodoPagoUncheckedCreateNestedManyWithoutUsuarioInput
    Direccion?: DireccionUncheckedCreateNestedManyWithoutUsuarioInput
    Producto?: ProductoUncheckedCreateNestedManyWithoutVendedorInput
    Mensaje?: MensajeUncheckedCreateNestedManyWithoutClienteInput
    Evaluadores?: EvaluacionUncheckedCreateNestedManyWithoutEvaluadorInput
    Evaluados?: EvaluacionUncheckedCreateNestedManyWithoutEvaluadoInput
  }

  export type UsuarioCreateOrConnectWithoutCompraInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutCompraInput, UsuarioUncheckedCreateWithoutCompraInput>
  }

  export type DireccionCreateWithoutCompraInput = {
    Provincia: string
    Canton: string
    Distrito: string
    Detalle: string
    CodigoPostal: string
    Telefono: string
    Titulo: string
    usuario: UsuarioCreateNestedOneWithoutDireccionInput
  }

  export type DireccionUncheckedCreateWithoutCompraInput = {
    id?: number
    UsuarioId: number
    Provincia: string
    Canton: string
    Distrito: string
    Detalle: string
    CodigoPostal: string
    Telefono: string
    Titulo: string
  }

  export type DireccionCreateOrConnectWithoutCompraInput = {
    where: DireccionWhereUniqueInput
    create: XOR<DireccionCreateWithoutCompraInput, DireccionUncheckedCreateWithoutCompraInput>
  }

  export type MetodoPagoCreateWithoutCompraInput = {
    NumeroCuenta: string
    Expiracion: Date | string
    Titulo: string
    Borrado?: boolean
    usuario: UsuarioCreateNestedOneWithoutMetodoPagoInput
    tipoPago: TipoPagoCreateNestedOneWithoutMetodoPagoInput
  }

  export type MetodoPagoUncheckedCreateWithoutCompraInput = {
    id?: number
    UsuarioId: number
    TipoPagoId: number
    NumeroCuenta: string
    Expiracion: Date | string
    Titulo: string
    Borrado?: boolean
  }

  export type MetodoPagoCreateOrConnectWithoutCompraInput = {
    where: MetodoPagoWhereUniqueInput
    create: XOR<MetodoPagoCreateWithoutCompraInput, MetodoPagoUncheckedCreateWithoutCompraInput>
  }

  export type CompraDetalleCreateWithoutCompraInput = {
    Cantidad: number
    Subtotal: Decimal | DecimalJsLike | number | string
    Borrado?: boolean
    producto: ProductoCreateNestedOneWithoutCompraDetalleInput
    estadoCompra?: EstadoCompraCreateNestedOneWithoutCompraDetalleInput
  }

  export type CompraDetalleUncheckedCreateWithoutCompraInput = {
    id?: number
    ProductoId: number
    Cantidad: number
    Subtotal: Decimal | DecimalJsLike | number | string
    EstadoCompraId?: number
    Borrado?: boolean
  }

  export type CompraDetalleCreateOrConnectWithoutCompraInput = {
    where: CompraDetalleWhereUniqueInput
    create: XOR<CompraDetalleCreateWithoutCompraInput, CompraDetalleUncheckedCreateWithoutCompraInput>
  }

  export type CompraDetalleCreateManyCompraInputEnvelope = {
    data: Enumerable<CompraDetalleCreateManyCompraInput>
    skipDuplicates?: boolean
  }

  export type EvaluacionCreateWithoutCompraInput = {
    Calificacion: number
    Borrado?: boolean
    evaluador: UsuarioCreateNestedOneWithoutEvaluadoresInput
    evaluado: UsuarioCreateNestedOneWithoutEvaluadosInput
  }

  export type EvaluacionUncheckedCreateWithoutCompraInput = {
    id?: number
    EvaluadorId: number
    EvaluadoId: number
    Calificacion: number
    Borrado?: boolean
  }

  export type EvaluacionCreateOrConnectWithoutCompraInput = {
    where: EvaluacionWhereUniqueInput
    create: XOR<EvaluacionCreateWithoutCompraInput, EvaluacionUncheckedCreateWithoutCompraInput>
  }

  export type EvaluacionCreateManyCompraInputEnvelope = {
    data: Enumerable<EvaluacionCreateManyCompraInput>
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutCompraInput = {
    update: XOR<UsuarioUpdateWithoutCompraInput, UsuarioUncheckedUpdateWithoutCompraInput>
    create: XOR<UsuarioCreateWithoutCompraInput, UsuarioUncheckedCreateWithoutCompraInput>
  }

  export type UsuarioUpdateWithoutCompraInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
    Roles?: RolOnUsuarioUpdateManyWithoutUsuarioNestedInput
    MetodoPago?: MetodoPagoUpdateManyWithoutUsuarioNestedInput
    Direccion?: DireccionUpdateManyWithoutUsuarioNestedInput
    Producto?: ProductoUpdateManyWithoutVendedorNestedInput
    Mensaje?: MensajeUpdateManyWithoutClienteNestedInput
    Evaluadores?: EvaluacionUpdateManyWithoutEvaluadorNestedInput
    Evaluados?: EvaluacionUpdateManyWithoutEvaluadoNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutCompraInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
    Roles?: RolOnUsuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    MetodoPago?: MetodoPagoUncheckedUpdateManyWithoutUsuarioNestedInput
    Direccion?: DireccionUncheckedUpdateManyWithoutUsuarioNestedInput
    Producto?: ProductoUncheckedUpdateManyWithoutVendedorNestedInput
    Mensaje?: MensajeUncheckedUpdateManyWithoutClienteNestedInput
    Evaluadores?: EvaluacionUncheckedUpdateManyWithoutEvaluadorNestedInput
    Evaluados?: EvaluacionUncheckedUpdateManyWithoutEvaluadoNestedInput
  }

  export type DireccionUpsertWithoutCompraInput = {
    update: XOR<DireccionUpdateWithoutCompraInput, DireccionUncheckedUpdateWithoutCompraInput>
    create: XOR<DireccionCreateWithoutCompraInput, DireccionUncheckedCreateWithoutCompraInput>
  }

  export type DireccionUpdateWithoutCompraInput = {
    Provincia?: StringFieldUpdateOperationsInput | string
    Canton?: StringFieldUpdateOperationsInput | string
    Distrito?: StringFieldUpdateOperationsInput | string
    Detalle?: StringFieldUpdateOperationsInput | string
    CodigoPostal?: StringFieldUpdateOperationsInput | string
    Telefono?: StringFieldUpdateOperationsInput | string
    Titulo?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneRequiredWithoutDireccionNestedInput
  }

  export type DireccionUncheckedUpdateWithoutCompraInput = {
    id?: IntFieldUpdateOperationsInput | number
    UsuarioId?: IntFieldUpdateOperationsInput | number
    Provincia?: StringFieldUpdateOperationsInput | string
    Canton?: StringFieldUpdateOperationsInput | string
    Distrito?: StringFieldUpdateOperationsInput | string
    Detalle?: StringFieldUpdateOperationsInput | string
    CodigoPostal?: StringFieldUpdateOperationsInput | string
    Telefono?: StringFieldUpdateOperationsInput | string
    Titulo?: StringFieldUpdateOperationsInput | string
  }

  export type MetodoPagoUpsertWithoutCompraInput = {
    update: XOR<MetodoPagoUpdateWithoutCompraInput, MetodoPagoUncheckedUpdateWithoutCompraInput>
    create: XOR<MetodoPagoCreateWithoutCompraInput, MetodoPagoUncheckedCreateWithoutCompraInput>
  }

  export type MetodoPagoUpdateWithoutCompraInput = {
    NumeroCuenta?: StringFieldUpdateOperationsInput | string
    Expiracion?: DateTimeFieldUpdateOperationsInput | Date | string
    Titulo?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    usuario?: UsuarioUpdateOneRequiredWithoutMetodoPagoNestedInput
    tipoPago?: TipoPagoUpdateOneRequiredWithoutMetodoPagoNestedInput
  }

  export type MetodoPagoUncheckedUpdateWithoutCompraInput = {
    id?: IntFieldUpdateOperationsInput | number
    UsuarioId?: IntFieldUpdateOperationsInput | number
    TipoPagoId?: IntFieldUpdateOperationsInput | number
    NumeroCuenta?: StringFieldUpdateOperationsInput | string
    Expiracion?: DateTimeFieldUpdateOperationsInput | Date | string
    Titulo?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompraDetalleUpsertWithWhereUniqueWithoutCompraInput = {
    where: CompraDetalleWhereUniqueInput
    update: XOR<CompraDetalleUpdateWithoutCompraInput, CompraDetalleUncheckedUpdateWithoutCompraInput>
    create: XOR<CompraDetalleCreateWithoutCompraInput, CompraDetalleUncheckedCreateWithoutCompraInput>
  }

  export type CompraDetalleUpdateWithWhereUniqueWithoutCompraInput = {
    where: CompraDetalleWhereUniqueInput
    data: XOR<CompraDetalleUpdateWithoutCompraInput, CompraDetalleUncheckedUpdateWithoutCompraInput>
  }

  export type CompraDetalleUpdateManyWithWhereWithoutCompraInput = {
    where: CompraDetalleScalarWhereInput
    data: XOR<CompraDetalleUpdateManyMutationInput, CompraDetalleUncheckedUpdateManyWithoutCompraDetalleInput>
  }

  export type EvaluacionUpsertWithWhereUniqueWithoutCompraInput = {
    where: EvaluacionWhereUniqueInput
    update: XOR<EvaluacionUpdateWithoutCompraInput, EvaluacionUncheckedUpdateWithoutCompraInput>
    create: XOR<EvaluacionCreateWithoutCompraInput, EvaluacionUncheckedCreateWithoutCompraInput>
  }

  export type EvaluacionUpdateWithWhereUniqueWithoutCompraInput = {
    where: EvaluacionWhereUniqueInput
    data: XOR<EvaluacionUpdateWithoutCompraInput, EvaluacionUncheckedUpdateWithoutCompraInput>
  }

  export type EvaluacionUpdateManyWithWhereWithoutCompraInput = {
    where: EvaluacionScalarWhereInput
    data: XOR<EvaluacionUpdateManyMutationInput, EvaluacionUncheckedUpdateManyWithoutEvaluacionInput>
  }

  export type CompraCreateWithoutCompraDetalleInput = {
    Subtotal: Decimal | DecimalJsLike | number | string
    Total: Decimal | DecimalJsLike | number | string
    Fecha?: Date | string
    Borrado?: boolean
    cliente: UsuarioCreateNestedOneWithoutCompraInput
    direccion: DireccionCreateNestedOneWithoutCompraInput
    metodoPago: MetodoPagoCreateNestedOneWithoutCompraInput
    Evaluacion?: EvaluacionCreateNestedManyWithoutCompraInput
  }

  export type CompraUncheckedCreateWithoutCompraDetalleInput = {
    id?: number
    ClienteId: number
    DireccionId: number
    MetodoPagoId: number
    Subtotal: Decimal | DecimalJsLike | number | string
    Total: Decimal | DecimalJsLike | number | string
    Fecha?: Date | string
    Borrado?: boolean
    Evaluacion?: EvaluacionUncheckedCreateNestedManyWithoutCompraInput
  }

  export type CompraCreateOrConnectWithoutCompraDetalleInput = {
    where: CompraWhereUniqueInput
    create: XOR<CompraCreateWithoutCompraDetalleInput, CompraUncheckedCreateWithoutCompraDetalleInput>
  }

  export type ProductoCreateWithoutCompraDetalleInput = {
    Nombre: string
    Descripcion: string
    Precio: Decimal | DecimalJsLike | number | string
    Cantidad: number
    Borrado?: boolean
    categoria: CategoriaCreateNestedOneWithoutProductoInput
    estado: EstadoProductoCreateNestedOneWithoutProductoInput
    vendedor: UsuarioCreateNestedOneWithoutProductoInput
    FotoProducto?: FotoProductoCreateNestedManyWithoutProductoInput
    Mensaje?: MensajeCreateNestedManyWithoutProductoInput
  }

  export type ProductoUncheckedCreateWithoutCompraDetalleInput = {
    id?: number
    Nombre: string
    Descripcion: string
    Precio: Decimal | DecimalJsLike | number | string
    Cantidad: number
    CategoriaId: number
    EstadoId: number
    VendedorId: number
    Borrado?: boolean
    FotoProducto?: FotoProductoUncheckedCreateNestedManyWithoutProductoInput
    Mensaje?: MensajeUncheckedCreateNestedManyWithoutProductoInput
  }

  export type ProductoCreateOrConnectWithoutCompraDetalleInput = {
    where: ProductoWhereUniqueInput
    create: XOR<ProductoCreateWithoutCompraDetalleInput, ProductoUncheckedCreateWithoutCompraDetalleInput>
  }

  export type EstadoCompraCreateWithoutCompraDetalleInput = {
    Descripcion: string
    Borrado?: boolean
  }

  export type EstadoCompraUncheckedCreateWithoutCompraDetalleInput = {
    id?: number
    Descripcion: string
    Borrado?: boolean
  }

  export type EstadoCompraCreateOrConnectWithoutCompraDetalleInput = {
    where: EstadoCompraWhereUniqueInput
    create: XOR<EstadoCompraCreateWithoutCompraDetalleInput, EstadoCompraUncheckedCreateWithoutCompraDetalleInput>
  }

  export type CompraUpsertWithoutCompraDetalleInput = {
    update: XOR<CompraUpdateWithoutCompraDetalleInput, CompraUncheckedUpdateWithoutCompraDetalleInput>
    create: XOR<CompraCreateWithoutCompraDetalleInput, CompraUncheckedCreateWithoutCompraDetalleInput>
  }

  export type CompraUpdateWithoutCompraDetalleInput = {
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    cliente?: UsuarioUpdateOneRequiredWithoutCompraNestedInput
    direccion?: DireccionUpdateOneRequiredWithoutCompraNestedInput
    metodoPago?: MetodoPagoUpdateOneRequiredWithoutCompraNestedInput
    Evaluacion?: EvaluacionUpdateManyWithoutCompraNestedInput
  }

  export type CompraUncheckedUpdateWithoutCompraDetalleInput = {
    id?: IntFieldUpdateOperationsInput | number
    ClienteId?: IntFieldUpdateOperationsInput | number
    DireccionId?: IntFieldUpdateOperationsInput | number
    MetodoPagoId?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Evaluacion?: EvaluacionUncheckedUpdateManyWithoutCompraNestedInput
  }

  export type ProductoUpsertWithoutCompraDetalleInput = {
    update: XOR<ProductoUpdateWithoutCompraDetalleInput, ProductoUncheckedUpdateWithoutCompraDetalleInput>
    create: XOR<ProductoCreateWithoutCompraDetalleInput, ProductoUncheckedCreateWithoutCompraDetalleInput>
  }

  export type ProductoUpdateWithoutCompraDetalleInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    categoria?: CategoriaUpdateOneRequiredWithoutProductoNestedInput
    estado?: EstadoProductoUpdateOneRequiredWithoutProductoNestedInput
    vendedor?: UsuarioUpdateOneRequiredWithoutProductoNestedInput
    FotoProducto?: FotoProductoUpdateManyWithoutProductoNestedInput
    Mensaje?: MensajeUpdateManyWithoutProductoNestedInput
  }

  export type ProductoUncheckedUpdateWithoutCompraDetalleInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFieldUpdateOperationsInput | number
    CategoriaId?: IntFieldUpdateOperationsInput | number
    EstadoId?: IntFieldUpdateOperationsInput | number
    VendedorId?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    FotoProducto?: FotoProductoUncheckedUpdateManyWithoutProductoNestedInput
    Mensaje?: MensajeUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type EstadoCompraUpsertWithoutCompraDetalleInput = {
    update: XOR<EstadoCompraUpdateWithoutCompraDetalleInput, EstadoCompraUncheckedUpdateWithoutCompraDetalleInput>
    create: XOR<EstadoCompraCreateWithoutCompraDetalleInput, EstadoCompraUncheckedCreateWithoutCompraDetalleInput>
  }

  export type EstadoCompraUpdateWithoutCompraDetalleInput = {
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EstadoCompraUncheckedUpdateWithoutCompraDetalleInput = {
    id?: IntFieldUpdateOperationsInput | number
    Descripcion?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompraCreateWithoutEvaluacionInput = {
    Subtotal: Decimal | DecimalJsLike | number | string
    Total: Decimal | DecimalJsLike | number | string
    Fecha?: Date | string
    Borrado?: boolean
    cliente: UsuarioCreateNestedOneWithoutCompraInput
    direccion: DireccionCreateNestedOneWithoutCompraInput
    metodoPago: MetodoPagoCreateNestedOneWithoutCompraInput
    CompraDetalle?: CompraDetalleCreateNestedManyWithoutCompraInput
  }

  export type CompraUncheckedCreateWithoutEvaluacionInput = {
    id?: number
    ClienteId: number
    DireccionId: number
    MetodoPagoId: number
    Subtotal: Decimal | DecimalJsLike | number | string
    Total: Decimal | DecimalJsLike | number | string
    Fecha?: Date | string
    Borrado?: boolean
    CompraDetalle?: CompraDetalleUncheckedCreateNestedManyWithoutCompraInput
  }

  export type CompraCreateOrConnectWithoutEvaluacionInput = {
    where: CompraWhereUniqueInput
    create: XOR<CompraCreateWithoutEvaluacionInput, CompraUncheckedCreateWithoutEvaluacionInput>
  }

  export type UsuarioCreateWithoutEvaluadoresInput = {
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
    Roles?: RolOnUsuarioCreateNestedManyWithoutUsuarioInput
    MetodoPago?: MetodoPagoCreateNestedManyWithoutUsuarioInput
    Direccion?: DireccionCreateNestedManyWithoutUsuarioInput
    Producto?: ProductoCreateNestedManyWithoutVendedorInput
    Mensaje?: MensajeCreateNestedManyWithoutClienteInput
    Compra?: CompraCreateNestedManyWithoutClienteInput
    Evaluados?: EvaluacionCreateNestedManyWithoutEvaluadoInput
  }

  export type UsuarioUncheckedCreateWithoutEvaluadoresInput = {
    id?: number
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
    Roles?: RolOnUsuarioUncheckedCreateNestedManyWithoutUsuarioInput
    MetodoPago?: MetodoPagoUncheckedCreateNestedManyWithoutUsuarioInput
    Direccion?: DireccionUncheckedCreateNestedManyWithoutUsuarioInput
    Producto?: ProductoUncheckedCreateNestedManyWithoutVendedorInput
    Mensaje?: MensajeUncheckedCreateNestedManyWithoutClienteInput
    Compra?: CompraUncheckedCreateNestedManyWithoutClienteInput
    Evaluados?: EvaluacionUncheckedCreateNestedManyWithoutEvaluadoInput
  }

  export type UsuarioCreateOrConnectWithoutEvaluadoresInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutEvaluadoresInput, UsuarioUncheckedCreateWithoutEvaluadoresInput>
  }

  export type UsuarioCreateWithoutEvaluadosInput = {
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
    Roles?: RolOnUsuarioCreateNestedManyWithoutUsuarioInput
    MetodoPago?: MetodoPagoCreateNestedManyWithoutUsuarioInput
    Direccion?: DireccionCreateNestedManyWithoutUsuarioInput
    Producto?: ProductoCreateNestedManyWithoutVendedorInput
    Mensaje?: MensajeCreateNestedManyWithoutClienteInput
    Compra?: CompraCreateNestedManyWithoutClienteInput
    Evaluadores?: EvaluacionCreateNestedManyWithoutEvaluadorInput
  }

  export type UsuarioUncheckedCreateWithoutEvaluadosInput = {
    id?: number
    Nombre: string
    Apellido: string
    NombreVendedor?: string | null
    Telefono: string
    Email: string
    Identificacion: string
    Contrasenna: string
    Calificacion: Decimal | DecimalJsLike | number | string
    Deshabilitado?: boolean
    Roles?: RolOnUsuarioUncheckedCreateNestedManyWithoutUsuarioInput
    MetodoPago?: MetodoPagoUncheckedCreateNestedManyWithoutUsuarioInput
    Direccion?: DireccionUncheckedCreateNestedManyWithoutUsuarioInput
    Producto?: ProductoUncheckedCreateNestedManyWithoutVendedorInput
    Mensaje?: MensajeUncheckedCreateNestedManyWithoutClienteInput
    Compra?: CompraUncheckedCreateNestedManyWithoutClienteInput
    Evaluadores?: EvaluacionUncheckedCreateNestedManyWithoutEvaluadorInput
  }

  export type UsuarioCreateOrConnectWithoutEvaluadosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutEvaluadosInput, UsuarioUncheckedCreateWithoutEvaluadosInput>
  }

  export type CompraUpsertWithoutEvaluacionInput = {
    update: XOR<CompraUpdateWithoutEvaluacionInput, CompraUncheckedUpdateWithoutEvaluacionInput>
    create: XOR<CompraCreateWithoutEvaluacionInput, CompraUncheckedCreateWithoutEvaluacionInput>
  }

  export type CompraUpdateWithoutEvaluacionInput = {
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    cliente?: UsuarioUpdateOneRequiredWithoutCompraNestedInput
    direccion?: DireccionUpdateOneRequiredWithoutCompraNestedInput
    metodoPago?: MetodoPagoUpdateOneRequiredWithoutCompraNestedInput
    CompraDetalle?: CompraDetalleUpdateManyWithoutCompraNestedInput
  }

  export type CompraUncheckedUpdateWithoutEvaluacionInput = {
    id?: IntFieldUpdateOperationsInput | number
    ClienteId?: IntFieldUpdateOperationsInput | number
    DireccionId?: IntFieldUpdateOperationsInput | number
    MetodoPagoId?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    CompraDetalle?: CompraDetalleUncheckedUpdateManyWithoutCompraNestedInput
  }

  export type UsuarioUpsertWithoutEvaluadoresInput = {
    update: XOR<UsuarioUpdateWithoutEvaluadoresInput, UsuarioUncheckedUpdateWithoutEvaluadoresInput>
    create: XOR<UsuarioCreateWithoutEvaluadoresInput, UsuarioUncheckedCreateWithoutEvaluadoresInput>
  }

  export type UsuarioUpdateWithoutEvaluadoresInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
    Roles?: RolOnUsuarioUpdateManyWithoutUsuarioNestedInput
    MetodoPago?: MetodoPagoUpdateManyWithoutUsuarioNestedInput
    Direccion?: DireccionUpdateManyWithoutUsuarioNestedInput
    Producto?: ProductoUpdateManyWithoutVendedorNestedInput
    Mensaje?: MensajeUpdateManyWithoutClienteNestedInput
    Compra?: CompraUpdateManyWithoutClienteNestedInput
    Evaluados?: EvaluacionUpdateManyWithoutEvaluadoNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutEvaluadoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
    Roles?: RolOnUsuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    MetodoPago?: MetodoPagoUncheckedUpdateManyWithoutUsuarioNestedInput
    Direccion?: DireccionUncheckedUpdateManyWithoutUsuarioNestedInput
    Producto?: ProductoUncheckedUpdateManyWithoutVendedorNestedInput
    Mensaje?: MensajeUncheckedUpdateManyWithoutClienteNestedInput
    Compra?: CompraUncheckedUpdateManyWithoutClienteNestedInput
    Evaluados?: EvaluacionUncheckedUpdateManyWithoutEvaluadoNestedInput
  }

  export type UsuarioUpsertWithoutEvaluadosInput = {
    update: XOR<UsuarioUpdateWithoutEvaluadosInput, UsuarioUncheckedUpdateWithoutEvaluadosInput>
    create: XOR<UsuarioCreateWithoutEvaluadosInput, UsuarioUncheckedCreateWithoutEvaluadosInput>
  }

  export type UsuarioUpdateWithoutEvaluadosInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
    Roles?: RolOnUsuarioUpdateManyWithoutUsuarioNestedInput
    MetodoPago?: MetodoPagoUpdateManyWithoutUsuarioNestedInput
    Direccion?: DireccionUpdateManyWithoutUsuarioNestedInput
    Producto?: ProductoUpdateManyWithoutVendedorNestedInput
    Mensaje?: MensajeUpdateManyWithoutClienteNestedInput
    Compra?: CompraUpdateManyWithoutClienteNestedInput
    Evaluadores?: EvaluacionUpdateManyWithoutEvaluadorNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutEvaluadosInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Apellido?: StringFieldUpdateOperationsInput | string
    NombreVendedor?: NullableStringFieldUpdateOperationsInput | string | null
    Telefono?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Identificacion?: StringFieldUpdateOperationsInput | string
    Contrasenna?: StringFieldUpdateOperationsInput | string
    Calificacion?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Deshabilitado?: BoolFieldUpdateOperationsInput | boolean
    Roles?: RolOnUsuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    MetodoPago?: MetodoPagoUncheckedUpdateManyWithoutUsuarioNestedInput
    Direccion?: DireccionUncheckedUpdateManyWithoutUsuarioNestedInput
    Producto?: ProductoUncheckedUpdateManyWithoutVendedorNestedInput
    Mensaje?: MensajeUncheckedUpdateManyWithoutClienteNestedInput
    Compra?: CompraUncheckedUpdateManyWithoutClienteNestedInput
    Evaluadores?: EvaluacionUncheckedUpdateManyWithoutEvaluadorNestedInput
  }

  export type RolOnUsuarioCreateManyUsuarioInput = {
    RolId: number
  }

  export type MetodoPagoCreateManyUsuarioInput = {
    id?: number
    TipoPagoId: number
    NumeroCuenta: string
    Expiracion: Date | string
    Titulo: string
    Borrado?: boolean
  }

  export type DireccionCreateManyUsuarioInput = {
    id?: number
    Provincia: string
    Canton: string
    Distrito: string
    Detalle: string
    CodigoPostal: string
    Telefono: string
    Titulo: string
  }

  export type ProductoCreateManyVendedorInput = {
    id?: number
    Nombre: string
    Descripcion: string
    Precio: Decimal | DecimalJsLike | number | string
    Cantidad: number
    CategoriaId: number
    EstadoId: number
    Borrado?: boolean
  }

  export type MensajeCreateManyClienteInput = {
    id?: number
    ProductoId: number
    Pregunta: string
    Respuesta?: string | null
    Borrado?: boolean
    Fecha?: Date | string
  }

  export type CompraCreateManyClienteInput = {
    id?: number
    DireccionId: number
    MetodoPagoId: number
    Subtotal: Decimal | DecimalJsLike | number | string
    Total: Decimal | DecimalJsLike | number | string
    Fecha?: Date | string
    Borrado?: boolean
  }

  export type EvaluacionCreateManyEvaluadorInput = {
    id?: number
    CompraId: number
    EvaluadoId: number
    Calificacion: number
    Borrado?: boolean
  }

  export type EvaluacionCreateManyEvaluadoInput = {
    id?: number
    CompraId: number
    EvaluadorId: number
    Calificacion: number
    Borrado?: boolean
  }

  export type RolOnUsuarioUpdateWithoutUsuarioInput = {
    rol?: RolUpdateOneRequiredWithoutUsuariosNestedInput
  }

  export type RolOnUsuarioUncheckedUpdateWithoutUsuarioInput = {
    RolId?: IntFieldUpdateOperationsInput | number
  }

  export type RolOnUsuarioUncheckedUpdateManyWithoutRolesInput = {
    RolId?: IntFieldUpdateOperationsInput | number
  }

  export type MetodoPagoUpdateWithoutUsuarioInput = {
    NumeroCuenta?: StringFieldUpdateOperationsInput | string
    Expiracion?: DateTimeFieldUpdateOperationsInput | Date | string
    Titulo?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    tipoPago?: TipoPagoUpdateOneRequiredWithoutMetodoPagoNestedInput
    Compra?: CompraUpdateManyWithoutMetodoPagoNestedInput
  }

  export type MetodoPagoUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    TipoPagoId?: IntFieldUpdateOperationsInput | number
    NumeroCuenta?: StringFieldUpdateOperationsInput | string
    Expiracion?: DateTimeFieldUpdateOperationsInput | Date | string
    Titulo?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Compra?: CompraUncheckedUpdateManyWithoutMetodoPagoNestedInput
  }

  export type MetodoPagoUncheckedUpdateManyWithoutMetodoPagoInput = {
    id?: IntFieldUpdateOperationsInput | number
    TipoPagoId?: IntFieldUpdateOperationsInput | number
    NumeroCuenta?: StringFieldUpdateOperationsInput | string
    Expiracion?: DateTimeFieldUpdateOperationsInput | Date | string
    Titulo?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DireccionUpdateWithoutUsuarioInput = {
    Provincia?: StringFieldUpdateOperationsInput | string
    Canton?: StringFieldUpdateOperationsInput | string
    Distrito?: StringFieldUpdateOperationsInput | string
    Detalle?: StringFieldUpdateOperationsInput | string
    CodigoPostal?: StringFieldUpdateOperationsInput | string
    Telefono?: StringFieldUpdateOperationsInput | string
    Titulo?: StringFieldUpdateOperationsInput | string
    Compra?: CompraUpdateManyWithoutDireccionNestedInput
  }

  export type DireccionUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    Provincia?: StringFieldUpdateOperationsInput | string
    Canton?: StringFieldUpdateOperationsInput | string
    Distrito?: StringFieldUpdateOperationsInput | string
    Detalle?: StringFieldUpdateOperationsInput | string
    CodigoPostal?: StringFieldUpdateOperationsInput | string
    Telefono?: StringFieldUpdateOperationsInput | string
    Titulo?: StringFieldUpdateOperationsInput | string
    Compra?: CompraUncheckedUpdateManyWithoutDireccionNestedInput
  }

  export type DireccionUncheckedUpdateManyWithoutDireccionInput = {
    id?: IntFieldUpdateOperationsInput | number
    Provincia?: StringFieldUpdateOperationsInput | string
    Canton?: StringFieldUpdateOperationsInput | string
    Distrito?: StringFieldUpdateOperationsInput | string
    Detalle?: StringFieldUpdateOperationsInput | string
    CodigoPostal?: StringFieldUpdateOperationsInput | string
    Telefono?: StringFieldUpdateOperationsInput | string
    Titulo?: StringFieldUpdateOperationsInput | string
  }

  export type ProductoUpdateWithoutVendedorInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    categoria?: CategoriaUpdateOneRequiredWithoutProductoNestedInput
    estado?: EstadoProductoUpdateOneRequiredWithoutProductoNestedInput
    FotoProducto?: FotoProductoUpdateManyWithoutProductoNestedInput
    Mensaje?: MensajeUpdateManyWithoutProductoNestedInput
    CompraDetalle?: CompraDetalleUpdateManyWithoutProductoNestedInput
  }

  export type ProductoUncheckedUpdateWithoutVendedorInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFieldUpdateOperationsInput | number
    CategoriaId?: IntFieldUpdateOperationsInput | number
    EstadoId?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    FotoProducto?: FotoProductoUncheckedUpdateManyWithoutProductoNestedInput
    Mensaje?: MensajeUncheckedUpdateManyWithoutProductoNestedInput
    CompraDetalle?: CompraDetalleUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type ProductoUncheckedUpdateManyWithoutProductoInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFieldUpdateOperationsInput | number
    CategoriaId?: IntFieldUpdateOperationsInput | number
    EstadoId?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MensajeUpdateWithoutClienteInput = {
    Pregunta?: StringFieldUpdateOperationsInput | string
    Respuesta?: NullableStringFieldUpdateOperationsInput | string | null
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    producto?: ProductoUpdateOneRequiredWithoutMensajeNestedInput
  }

  export type MensajeUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    ProductoId?: IntFieldUpdateOperationsInput | number
    Pregunta?: StringFieldUpdateOperationsInput | string
    Respuesta?: NullableStringFieldUpdateOperationsInput | string | null
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensajeUncheckedUpdateManyWithoutMensajeInput = {
    id?: IntFieldUpdateOperationsInput | number
    ProductoId?: IntFieldUpdateOperationsInput | number
    Pregunta?: StringFieldUpdateOperationsInput | string
    Respuesta?: NullableStringFieldUpdateOperationsInput | string | null
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompraUpdateWithoutClienteInput = {
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    direccion?: DireccionUpdateOneRequiredWithoutCompraNestedInput
    metodoPago?: MetodoPagoUpdateOneRequiredWithoutCompraNestedInput
    CompraDetalle?: CompraDetalleUpdateManyWithoutCompraNestedInput
    Evaluacion?: EvaluacionUpdateManyWithoutCompraNestedInput
  }

  export type CompraUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    DireccionId?: IntFieldUpdateOperationsInput | number
    MetodoPagoId?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    CompraDetalle?: CompraDetalleUncheckedUpdateManyWithoutCompraNestedInput
    Evaluacion?: EvaluacionUncheckedUpdateManyWithoutCompraNestedInput
  }

  export type CompraUncheckedUpdateManyWithoutCompraInput = {
    id?: IntFieldUpdateOperationsInput | number
    DireccionId?: IntFieldUpdateOperationsInput | number
    MetodoPagoId?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EvaluacionUpdateWithoutEvaluadorInput = {
    Calificacion?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    compra?: CompraUpdateOneRequiredWithoutEvaluacionNestedInput
    evaluado?: UsuarioUpdateOneRequiredWithoutEvaluadosNestedInput
  }

  export type EvaluacionUncheckedUpdateWithoutEvaluadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    CompraId?: IntFieldUpdateOperationsInput | number
    EvaluadoId?: IntFieldUpdateOperationsInput | number
    Calificacion?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EvaluacionUncheckedUpdateManyWithoutEvaluadoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    CompraId?: IntFieldUpdateOperationsInput | number
    EvaluadoId?: IntFieldUpdateOperationsInput | number
    Calificacion?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EvaluacionUpdateWithoutEvaluadoInput = {
    Calificacion?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    compra?: CompraUpdateOneRequiredWithoutEvaluacionNestedInput
    evaluador?: UsuarioUpdateOneRequiredWithoutEvaluadoresNestedInput
  }

  export type EvaluacionUncheckedUpdateWithoutEvaluadoInput = {
    id?: IntFieldUpdateOperationsInput | number
    CompraId?: IntFieldUpdateOperationsInput | number
    EvaluadorId?: IntFieldUpdateOperationsInput | number
    Calificacion?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EvaluacionUncheckedUpdateManyWithoutEvaluadosInput = {
    id?: IntFieldUpdateOperationsInput | number
    CompraId?: IntFieldUpdateOperationsInput | number
    EvaluadorId?: IntFieldUpdateOperationsInput | number
    Calificacion?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RolOnUsuarioCreateManyRolInput = {
    UsuarioId: number
  }

  export type RolOnUsuarioUpdateWithoutRolInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutRolesNestedInput
  }

  export type RolOnUsuarioUncheckedUpdateWithoutRolInput = {
    UsuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type RolOnUsuarioUncheckedUpdateManyWithoutUsuariosInput = {
    UsuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type MetodoPagoCreateManyTipoPagoInput = {
    id?: number
    UsuarioId: number
    NumeroCuenta: string
    Expiracion: Date | string
    Titulo: string
    Borrado?: boolean
  }

  export type MetodoPagoUpdateWithoutTipoPagoInput = {
    NumeroCuenta?: StringFieldUpdateOperationsInput | string
    Expiracion?: DateTimeFieldUpdateOperationsInput | Date | string
    Titulo?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    usuario?: UsuarioUpdateOneRequiredWithoutMetodoPagoNestedInput
    Compra?: CompraUpdateManyWithoutMetodoPagoNestedInput
  }

  export type MetodoPagoUncheckedUpdateWithoutTipoPagoInput = {
    id?: IntFieldUpdateOperationsInput | number
    UsuarioId?: IntFieldUpdateOperationsInput | number
    NumeroCuenta?: StringFieldUpdateOperationsInput | string
    Expiracion?: DateTimeFieldUpdateOperationsInput | Date | string
    Titulo?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Compra?: CompraUncheckedUpdateManyWithoutMetodoPagoNestedInput
  }

  export type CompraCreateManyMetodoPagoInput = {
    id?: number
    ClienteId: number
    DireccionId: number
    Subtotal: Decimal | DecimalJsLike | number | string
    Total: Decimal | DecimalJsLike | number | string
    Fecha?: Date | string
    Borrado?: boolean
  }

  export type CompraUpdateWithoutMetodoPagoInput = {
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    cliente?: UsuarioUpdateOneRequiredWithoutCompraNestedInput
    direccion?: DireccionUpdateOneRequiredWithoutCompraNestedInput
    CompraDetalle?: CompraDetalleUpdateManyWithoutCompraNestedInput
    Evaluacion?: EvaluacionUpdateManyWithoutCompraNestedInput
  }

  export type CompraUncheckedUpdateWithoutMetodoPagoInput = {
    id?: IntFieldUpdateOperationsInput | number
    ClienteId?: IntFieldUpdateOperationsInput | number
    DireccionId?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    CompraDetalle?: CompraDetalleUncheckedUpdateManyWithoutCompraNestedInput
    Evaluacion?: EvaluacionUncheckedUpdateManyWithoutCompraNestedInput
  }

  export type CompraCreateManyDireccionInput = {
    id?: number
    ClienteId: number
    MetodoPagoId: number
    Subtotal: Decimal | DecimalJsLike | number | string
    Total: Decimal | DecimalJsLike | number | string
    Fecha?: Date | string
    Borrado?: boolean
  }

  export type CompraUpdateWithoutDireccionInput = {
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    cliente?: UsuarioUpdateOneRequiredWithoutCompraNestedInput
    metodoPago?: MetodoPagoUpdateOneRequiredWithoutCompraNestedInput
    CompraDetalle?: CompraDetalleUpdateManyWithoutCompraNestedInput
    Evaluacion?: EvaluacionUpdateManyWithoutCompraNestedInput
  }

  export type CompraUncheckedUpdateWithoutDireccionInput = {
    id?: IntFieldUpdateOperationsInput | number
    ClienteId?: IntFieldUpdateOperationsInput | number
    MetodoPagoId?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    CompraDetalle?: CompraDetalleUncheckedUpdateManyWithoutCompraNestedInput
    Evaluacion?: EvaluacionUncheckedUpdateManyWithoutCompraNestedInput
  }

  export type FotoProductoCreateManyProductoInput = {
    id?: number
    Foto: string
    Borrado?: boolean
  }

  export type MensajeCreateManyProductoInput = {
    id?: number
    ClienteId: number
    Pregunta: string
    Respuesta?: string | null
    Borrado?: boolean
    Fecha?: Date | string
  }

  export type CompraDetalleCreateManyProductoInput = {
    id?: number
    CompraId: number
    Cantidad: number
    Subtotal: Decimal | DecimalJsLike | number | string
    EstadoCompraId?: number
    Borrado?: boolean
  }

  export type FotoProductoUpdateWithoutProductoInput = {
    Foto?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FotoProductoUncheckedUpdateWithoutProductoInput = {
    id?: IntFieldUpdateOperationsInput | number
    Foto?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FotoProductoUncheckedUpdateManyWithoutFotoProductoInput = {
    id?: IntFieldUpdateOperationsInput | number
    Foto?: StringFieldUpdateOperationsInput | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MensajeUpdateWithoutProductoInput = {
    Pregunta?: StringFieldUpdateOperationsInput | string
    Respuesta?: NullableStringFieldUpdateOperationsInput | string | null
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: UsuarioUpdateOneRequiredWithoutMensajeNestedInput
  }

  export type MensajeUncheckedUpdateWithoutProductoInput = {
    id?: IntFieldUpdateOperationsInput | number
    ClienteId?: IntFieldUpdateOperationsInput | number
    Pregunta?: StringFieldUpdateOperationsInput | string
    Respuesta?: NullableStringFieldUpdateOperationsInput | string | null
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    Fecha?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompraDetalleUpdateWithoutProductoInput = {
    Cantidad?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    compra?: CompraUpdateOneRequiredWithoutCompraDetalleNestedInput
    estadoCompra?: EstadoCompraUpdateOneRequiredWithoutCompraDetalleNestedInput
  }

  export type CompraDetalleUncheckedUpdateWithoutProductoInput = {
    id?: IntFieldUpdateOperationsInput | number
    CompraId?: IntFieldUpdateOperationsInput | number
    Cantidad?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EstadoCompraId?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompraDetalleUncheckedUpdateManyWithoutCompraDetalleInput = {
    id?: IntFieldUpdateOperationsInput | number
    CompraId?: IntFieldUpdateOperationsInput | number
    Cantidad?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EstadoCompraId?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductoCreateManyCategoriaInput = {
    id?: number
    Nombre: string
    Descripcion: string
    Precio: Decimal | DecimalJsLike | number | string
    Cantidad: number
    EstadoId: number
    VendedorId: number
    Borrado?: boolean
  }

  export type ProductoUpdateWithoutCategoriaInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    estado?: EstadoProductoUpdateOneRequiredWithoutProductoNestedInput
    vendedor?: UsuarioUpdateOneRequiredWithoutProductoNestedInput
    FotoProducto?: FotoProductoUpdateManyWithoutProductoNestedInput
    Mensaje?: MensajeUpdateManyWithoutProductoNestedInput
    CompraDetalle?: CompraDetalleUpdateManyWithoutProductoNestedInput
  }

  export type ProductoUncheckedUpdateWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFieldUpdateOperationsInput | number
    EstadoId?: IntFieldUpdateOperationsInput | number
    VendedorId?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    FotoProducto?: FotoProductoUncheckedUpdateManyWithoutProductoNestedInput
    Mensaje?: MensajeUncheckedUpdateManyWithoutProductoNestedInput
    CompraDetalle?: CompraDetalleUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type ProductoCreateManyEstadoInput = {
    id?: number
    Nombre: string
    Descripcion: string
    Precio: Decimal | DecimalJsLike | number | string
    Cantidad: number
    CategoriaId: number
    VendedorId: number
    Borrado?: boolean
  }

  export type ProductoUpdateWithoutEstadoInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    categoria?: CategoriaUpdateOneRequiredWithoutProductoNestedInput
    vendedor?: UsuarioUpdateOneRequiredWithoutProductoNestedInput
    FotoProducto?: FotoProductoUpdateManyWithoutProductoNestedInput
    Mensaje?: MensajeUpdateManyWithoutProductoNestedInput
    CompraDetalle?: CompraDetalleUpdateManyWithoutProductoNestedInput
  }

  export type ProductoUncheckedUpdateWithoutEstadoInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Precio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Cantidad?: IntFieldUpdateOperationsInput | number
    CategoriaId?: IntFieldUpdateOperationsInput | number
    VendedorId?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    FotoProducto?: FotoProductoUncheckedUpdateManyWithoutProductoNestedInput
    Mensaje?: MensajeUncheckedUpdateManyWithoutProductoNestedInput
    CompraDetalle?: CompraDetalleUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type CompraDetalleCreateManyEstadoCompraInput = {
    id?: number
    CompraId: number
    ProductoId: number
    Cantidad: number
    Subtotal: Decimal | DecimalJsLike | number | string
    Borrado?: boolean
  }

  export type CompraDetalleUpdateWithoutEstadoCompraInput = {
    Cantidad?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    compra?: CompraUpdateOneRequiredWithoutCompraDetalleNestedInput
    producto?: ProductoUpdateOneRequiredWithoutCompraDetalleNestedInput
  }

  export type CompraDetalleUncheckedUpdateWithoutEstadoCompraInput = {
    id?: IntFieldUpdateOperationsInput | number
    CompraId?: IntFieldUpdateOperationsInput | number
    ProductoId?: IntFieldUpdateOperationsInput | number
    Cantidad?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompraDetalleCreateManyCompraInput = {
    id?: number
    ProductoId: number
    Cantidad: number
    Subtotal: Decimal | DecimalJsLike | number | string
    EstadoCompraId?: number
    Borrado?: boolean
  }

  export type EvaluacionCreateManyCompraInput = {
    id?: number
    EvaluadorId: number
    EvaluadoId: number
    Calificacion: number
    Borrado?: boolean
  }

  export type CompraDetalleUpdateWithoutCompraInput = {
    Cantidad?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    producto?: ProductoUpdateOneRequiredWithoutCompraDetalleNestedInput
    estadoCompra?: EstadoCompraUpdateOneRequiredWithoutCompraDetalleNestedInput
  }

  export type CompraDetalleUncheckedUpdateWithoutCompraInput = {
    id?: IntFieldUpdateOperationsInput | number
    ProductoId?: IntFieldUpdateOperationsInput | number
    Cantidad?: IntFieldUpdateOperationsInput | number
    Subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EstadoCompraId?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EvaluacionUpdateWithoutCompraInput = {
    Calificacion?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
    evaluador?: UsuarioUpdateOneRequiredWithoutEvaluadoresNestedInput
    evaluado?: UsuarioUpdateOneRequiredWithoutEvaluadosNestedInput
  }

  export type EvaluacionUncheckedUpdateWithoutCompraInput = {
    id?: IntFieldUpdateOperationsInput | number
    EvaluadorId?: IntFieldUpdateOperationsInput | number
    EvaluadoId?: IntFieldUpdateOperationsInput | number
    Calificacion?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EvaluacionUncheckedUpdateManyWithoutEvaluacionInput = {
    id?: IntFieldUpdateOperationsInput | number
    EvaluadorId?: IntFieldUpdateOperationsInput | number
    EvaluadoId?: IntFieldUpdateOperationsInput | number
    Calificacion?: IntFieldUpdateOperationsInput | number
    Borrado?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}