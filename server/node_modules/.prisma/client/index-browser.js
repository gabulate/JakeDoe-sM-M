
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.14.1
 * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
 */
Prisma.prismaVersion = {
  client: "4.14.1",
  engine: "d9a4c5988f480fa576d43970d5a23641aa77bc9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.CategoriaScalarFieldEnum = {
  id: 'id',
  Descripcion: 'Descripcion',
  Borrado: 'Borrado'
};

exports.Prisma.CompraDetalleScalarFieldEnum = {
  id: 'id',
  CompraId: 'CompraId',
  ProductoId: 'ProductoId',
  Cantidad: 'Cantidad',
  Subtotal: 'Subtotal',
  Borrado: 'Borrado'
};

exports.Prisma.CompraScalarFieldEnum = {
  id: 'id',
  ClienteId: 'ClienteId',
  DireccionId: 'DireccionId',
  MetodoPagoId: 'MetodoPagoId',
  EstadoCompraId: 'EstadoCompraId',
  Subtotal: 'Subtotal',
  Total: 'Total',
  Fecha: 'Fecha',
  Borrado: 'Borrado'
};

exports.Prisma.DireccionScalarFieldEnum = {
  id: 'id',
  UsuarioId: 'UsuarioId',
  Provincia: 'Provincia',
  Canton: 'Canton',
  Distrito: 'Distrito',
  Detalle: 'Detalle',
  CodigoPostal: 'CodigoPostal',
  Telefono: 'Telefono',
  Titulo: 'Titulo'
};

exports.Prisma.EstadoCompraScalarFieldEnum = {
  id: 'id',
  Descripcion: 'Descripcion',
  Borrado: 'Borrado'
};

exports.Prisma.EstadoProductoScalarFieldEnum = {
  id: 'id',
  Descripcion: 'Descripcion',
  Borrado: 'Borrado'
};

exports.Prisma.EvaluacionScalarFieldEnum = {
  id: 'id',
  CompraId: 'CompraId',
  EvaluadorId: 'EvaluadorId',
  EvaluadoId: 'EvaluadoId',
  Calificacion: 'Calificacion',
  Borrado: 'Borrado'
};

exports.Prisma.FotoProductoScalarFieldEnum = {
  id: 'id',
  ProductoId: 'ProductoId',
  Foto: 'Foto',
  Borrado: 'Borrado'
};

exports.Prisma.MensajeScalarFieldEnum = {
  id: 'id',
  ClienteId: 'ClienteId',
  ProductoId: 'ProductoId',
  Pregunta: 'Pregunta',
  Respuesta: 'Respuesta',
  Borrado: 'Borrado',
  Fecha: 'Fecha'
};

exports.Prisma.MetodoPagoScalarFieldEnum = {
  id: 'id',
  UsuarioId: 'UsuarioId',
  TipoPagoId: 'TipoPagoId',
  NumeroCuenta: 'NumeroCuenta',
  Expiracion: 'Expiracion',
  Titulo: 'Titulo',
  Borrado: 'Borrado'
};

exports.Prisma.ProductoScalarFieldEnum = {
  id: 'id',
  Nombre: 'Nombre',
  Descripcion: 'Descripcion',
  Precio: 'Precio',
  Cantidad: 'Cantidad',
  CategoriaId: 'CategoriaId',
  EstadoId: 'EstadoId',
  VendedorId: 'VendedorId',
  Borrado: 'Borrado'
};

exports.Prisma.RolOnUsuarioScalarFieldEnum = {
  RolId: 'RolId',
  UsuarioId: 'UsuarioId'
};

exports.Prisma.RolScalarFieldEnum = {
  id: 'id',
  Descripcion: 'Descripcion',
  Borrado: 'Borrado'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.TipoPagoScalarFieldEnum = {
  id: 'id',
  Descripcion: 'Descripcion',
  Borrado: 'Borrado'
};

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsuarioScalarFieldEnum = {
  id: 'id',
  Nombre: 'Nombre',
  Apellido: 'Apellido',
  Telefono: 'Telefono',
  Email: 'Email',
  Contrasenna: 'Contrasenna',
  Calificacion: 'Calificacion',
  Deshabilitado: 'Deshabilitado'
};


exports.Prisma.ModelName = {
  Usuario: 'Usuario',
  Rol: 'Rol',
  RolOnUsuario: 'RolOnUsuario',
  TipoPago: 'TipoPago',
  MetodoPago: 'MetodoPago',
  Direccion: 'Direccion',
  Producto: 'Producto',
  Categoria: 'Categoria',
  EstadoProducto: 'EstadoProducto',
  FotoProducto: 'FotoProducto',
  Mensaje: 'Mensaje',
  EstadoCompra: 'EstadoCompra',
  Compra: 'Compra',
  CompraDetalle: 'CompraDetalle',
  Evaluacion: 'Evaluacion'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
